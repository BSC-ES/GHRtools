[
  {
    "objectID": "content/upload-instructions.html",
    "href": "content/upload-instructions.html",
    "title": "Vignettes",
    "section": "",
    "text": "Vignettes\nRun in the R package project:\nrmarkdown::render(\n  input = \"~/Documents/ghrexplore/vignettes/GHRexplore.Rmd\",\n  output_format = \"github_document\",\n  output_file = \"GHRexplore-vignette.md\"\n)\nMove the .md file and depending image files to the website repo and link in the index Copy paste header, badges and hex sticker from main page to the vignette\n\n\nChangelog\nRun in the R package project: generate-news.R\ncopy/paste the resulting file in the respective docs folder\nAdd the link to the reference in the main page\nCustomize the index page, e.g. add sections and logo\n\n\nReference\nInstall package locally.\nRun in the R package project: generate-reference.R\ncopy/paste the index and function files in the respective docs folder\nAdd the link to the reference in the main page\nCustomize the index page, e.g. add sections and logo"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel.html#overview",
    "href": "docs/GHRmodel/GHRmodel.html#overview",
    "title": "GHRmodel",
    "section": "Overview",
    "text": "Overview\n\n\nThe GHRmodel package supports modeling health outcomes using Bayesian hierarchical spatio-temporal models with complex covariate effects (e.g., linear, non-linear, interactions, distributed lag linear and non-linear models) in the R-INLA framework. It is designed to help users identify key drivers and predictors of disease risk by enabling streamlined model exploration, comparison, and visualization of complex covariate effects.\nThe image below shows the structure of the GHRmodel package, outlining its functions (in blue), GHRmodel-specific output objects (in purple), generic output objects (in grey), and general functionality. Generic output objects can be provided directly by the user or can be generated using GHRmodel helper functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe GHRmodel package is designed to work in tandem with other packages of the GHRtools suite: GHRexplore, which facilitates data exploration and visualization, and GHRpredict, which computes out-of-sample probabilistic predictions of models developed in GHRmodel and enables predictive performance evaluation.\nMore information about the toolkit, with tutorials and published examples can be found at this website."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel.html#installation",
    "href": "docs/GHRmodel/GHRmodel.html#installation",
    "title": "GHRmodel",
    "section": "Installation",
    "text": "Installation\nThe latest version of the GHRmodel package is hosted on CRAN and can by installed using the following commands:\n# Install from CRAN\ninstall.packages(\"GHRmodel\") \n\n# Get the development version from Gitlab\nlibrary(devtools)\ndevtools::install_git('https://earth.bsc.es/gitlab/ghr/ghrmodel.git')"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel.html#usage",
    "href": "docs/GHRmodel/GHRmodel.html#usage",
    "title": "GHRmodel",
    "section": "Usage",
    "text": "Usage\nTo fit a model with R-INLA, formulas need to follow its required syntax and structural conventions. INLA-compatible model formulas can be developed using either:\n\nUser-defined INLA-compatible input, which may consist of either user-defined covariate lists or user-defined formula lists.\nGHRmodel helper functions that allow the user to pre-process and transform covariates and streamline writing INLA-compatible formulas.\n\nIn this example the user provides a list of INLA-compatible model formulas. These are passed to the as_GHRformulas() function to be converted into a standardized GHRformulas object. This ensures consistent output structure and random effect specification across models that can be interpreted by the function fit_models() for model fitting.\nlibrary(\"GHRmodel\")\n\n# Convert list of user-defined INLA formulas into a GHRformulas object \nformulas_user_ghr &lt;- as_GHRformulas(c(\n  \n  # Model 1: random effects only, where monthly random effect is replicated by meso region and the spatial random effect is replicated by year\n    \"dengue_cases ~ 1 +\n     f(month_id, model = 'rw1', replicate = spat_meso_id, cyclic = TRUE, constr = TRUE, hyper = prior_t) +\n     f(year_id, model = 'iid', constr = TRUE, hyper = prior_t) +\n     f(spat_id, model = 'bym2', graph = g, constr = TRUE, hyper = prior_sp, replicate = year_id2)\",\n    \n  # Model 2: random effects and a varying effect for pdsi lag 1 by climate zone\n  \"dengue_cases ~ 1 + f(main_climate_f, pdsi.l1, model = 'iid') +\n     f(month_id, model = 'rw1', replicate = spat_meso_id, cyclic = TRUE, constr = TRUE, hyper = prior_t) +\n     f(year_id, model = 'iid', constr = TRUE, hyper = prior_t) +\n     f(spat_id, model = 'bym2', graph = g, constr = TRUE, hyper = prior_sp, replicate = year_id2)\",\n\n  # Model 3: random effects and a 3-way interaction between different pdsi and tmin lags\n  \"dengue_cases ~ 1 + pdsi.l1 + tmin.l3 + pdsi.l6 + pdsi.l1:tmin.l3:pdsi.l6 +\n     f(month_id, model = 'rw1', replicate = spat_meso_id, cyclic = TRUE, constr = TRUE, hyper = prior_t) +\n     f(year_id, model = 'iid', constr = TRUE, hyper = prior_t) +\n     f(spat_id, model = 'bym2', graph = g, constr = TRUE, hyper = prior_sp, replicate = year_id2)\"\n))\nThe fit_models() function allows users to fit a set of INLA-compatible model formulas defined by a GHRformulas object to a provided data set. It automates model fitting, extraction of outputs, and computation of a wide range of goodness-of-fit (GoF) metrics. The output is a GHRmodels object.\n# User-defined INLA-compatible formulas can be passed into fit_models() as a GHRformulas object\nmodel_user &lt;- fit_models(\n  formulas = formulas_user_ghr,\n  data = data,\n  family = \"nbinomial\",           # Negative binomial likelihood\n  name = \"mod\",                   # Label prefix for each model\n  offset = \"population\",          # Offset variable to account for population size\n  control_compute = list(\n    config = FALSE,               # Do not posterior predictive distribution\n    vcov = FALSE                  # Do not return variance-covariance matrix\n  ),\n  pb = TRUE,                      # Display progress bar\n  nthreads = 8                    # Use 8 threads for parallel computation\n)\nFor model evaluation, GHRmodel provides a range of functions for model diagnostics, interpretation and evaluation. Functions with the prefix plot_* return graphical ggplot2 or cowplot objects, allowing users to easily customize visual outputs.\n# Plot any linear coefficients found in the fitted model results. \nplot_coef_lin(\n  model = model_user,              # Provide fitted model GHRmodels object\n  exp = TRUE,                      # Exponentiate coefficients to relative risk scale\n  title = \"Relative Risk (RR)\"     # Plot title\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel.html#developers",
    "href": "docs/GHRmodel/GHRmodel.html#developers",
    "title": "GHRmodel",
    "section": "Developers",
    "text": "Developers\nGiovenale Moirano, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nCarles Milà, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nAnna B. Kawiecki, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nRachel Lowe, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience (Group leader)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html",
    "title": "Administrative Map for Municipalities in the Mato Grosso do Sul",
    "section": "",
    "text": "A simple feature (sf) multipolygon object representing a map of Mato Grosso do Sul, Brazil, including 11 municipalities. See @source for access to the complete data set.\nmap_MS\n\n\n\nA simple feature (sf) object including 11 rows and 2 columns:\n\n$code: Unique ID number for each micro region (11 units)\n$geometry: geometries of the sf multipolygon\n\n\n\n\nsource code on GitHub; source code on Zenodo);"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html#description",
    "title": "Administrative Map for Municipalities in the Mato Grosso do Sul",
    "section": "",
    "text": "A simple feature (sf) multipolygon object representing a map of Mato Grosso do Sul, Brazil, including 11 municipalities. See @source for access to the complete data set.\nmap_MS"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html#format",
    "href": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html#format",
    "title": "Administrative Map for Municipalities in the Mato Grosso do Sul",
    "section": "",
    "text": "A simple feature (sf) object including 11 rows and 2 columns:\n\n$code: Unique ID number for each micro region (11 units)\n$geometry: geometries of the sf multipolygon"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html#source",
    "href": "docs/GHRmodel/GHRmodel-reference/map_MS.Rd.html#source",
    "title": "Administrative Map for Municipalities in the Mato Grosso do Sul",
    "section": "",
    "text": "source code on GitHub; source code on Zenodo);"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "This function fits a set of INLA model formulas, provided in a GHRformulas object, to a specified dataset. For each fitted model, it extracts a range of outputs, including goodness-of-fit (GoF) metrics and other model outputs (fitted values, fixed effects, random effects). Results are extracted and stored in a GHRmodels object.\nfit_models(\n  formulas,\n  data,\n  family,\n  name,\n  offset = NULL,\n  control_compute = list(config = FALSE, vcov = FALSE),\n  nthreads = 8,\n  pb = FALSE\n)\n\n\n\n\nformulas: A GHRformulas object containing multiple INLA model formulas.\ndata: A data frame containing the variables used in the model formulas.\nfamily: A character string specifying the likelihood family (e.g., \"poisson\", \"nbinomial\", etc.).\nname: A character string to label each fitted model (e.g., \"mod\").\noffset: A character string specifying the name of the offset variable in data. If NULL, no offset is applied. Default is NULL. Internally, log(offset_values) is applied.\ncontrol_compute: A named list controlling additional computation options:\n\nconfig: Logical ; if TRUE, stores the Gaussian Markov Random Field (GMRF) and enables the computation of posterior predictive distribution (1,000 draws). Defaults to FALSE.\nvcov: Logical if TRUE, returns the variance-covariance (correlation) matrix of fixed effects. Defaults to FALSE.\n\nnthreads: An integer specifying the number of threads for parallel computation. Default is 8.\npb: Logical; if TRUE, displays a progress bar while fitting models. Default is FALSE.\n\n\n\n\nThis function iterates over each formula in the GHRformulas object and fits the corresponding INLA model using the internal function .fit_single_model(). For each fitted model, it extracts the fitted values, fixed effects, and random effects summaries. Then, it calculates a series of model evaluation metrics using the .gof_single_model() internal function.\nThe goodness-of-fit (GoF) metrics are organized into two categories:\n\nModel-Specific Goodness-of-Fit Metrics\n\nThese are computed separately for each model:\n\nDeviance Information Criterion (DIC)\nDIC = \\bar{D} + p_{D}\nwhere \\bar{D} is the posterior mean deviance and p_{D} is the effective number of parameters. Lower DIC values indicate a better model fit, balancing goodness-of-fit and model complexity.\nWatanabe-Akaike Information Criterion (WAIC)\nWAIC = -2\\left(\\mathrm{lppd} - p_{\\mathrm{WAIC}}\\right)\nWAIC evaluates predictive accuracy and penalizes model complexity through the log pointwise predictive density (\\mathrm{lppd}). Lower values imply better generalization.\nLog Mean Score (LMS)\nLMS = \\frac{1}{n} \\sum_{i=1}^n \\left( -\\log(\\mathrm{CPO}_i) \\right)\nLMS assesses the average negative log-predictive density using Conditional Predictive Ordinates (CPO). Lower LMS values indicate stronger predictive performance by penalizing models that assign low probability to observed outcomes.\nMean Absolute Error (MAE)\nMAE = \\frac{1}{n} \\sum_{i=1}^n \\left| y_i - \\hat{y}_i \\right|\nMeasures the average absolute deviation between observed values y_i and predicted values \\hat{y}_i. Lower MAE values indicate improved fit. If config = TRUE, MAE is computed using the full posterior predictive distribution (PPD); otherwise, it uses point estimates from INLA’s summary.fitted.values.\nRoot Mean Squared Error (RMSE)\nRMSE = \\sqrt{ \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 }\nCaptures average squared deviation between observed and predicted values. RMSE penalizes larger errors more heavily. Lower values reflect better model fit. If config = TRUE, RMSE uses the PPD; otherwise, it uses point estimates.\nContinuous Ranked Probability Score (CRPS)\n\\mathrm{CRPS}(F, y) = \\int_{-\\infty}^{\\infty} \\left[F(t) - \\mathbf{1}\\{y \\leq t\\}\\right]^2 dt\nCRPS assesses how well the predictive cumulative distribution aligns with the observed outcome. Lower scores suggest better calibrated predictive distributions. Only available when config = TRUE.\n\n\nModel Comparison Metrics (relative to the first model)\n\nThe first model in the list is treated as the baseline for model comparisons. All other models are evaluated against it using the following metrics:\n\nDifference in DIC and WAIC\nStored as dic_vs_first and waic_vs_first. These represent how much higher (or lower) each model’s DIC/WAIC is compared to the first model. Additionally, 95% credible intervals for these differences are stored as *_vs_first_lci and *_vs_first_uci.\nDifference in MAE and RMSE\nStored as mae_vs_first and rmse_vs_first. These reflect the absolute difference in prediction error compared to the first model. No credible intervals are computed for these metrics.\nContinuous Ranked Probability Score Skill Score (CRPSS)\n\\mathrm{CRPSS} = 1 - \\frac{\\mathrm{CRPS}_{\\text{model}}}{\\mathrm{CRPS}_{\\text{baseline}}}\nIndicates how much better the predictive distribution of the current model is relative to the baseline model. Values closer to 1 indicate improvement; negative values imply worse performance. Available only when config = TRUE.\nPseudo R-squared based on deviance\nR^2 = 1 - \\exp\\left( \\frac{-2}{n} \\left( \\frac{dev_{\\text{model}}}{-2} - \\frac{dev_{\\text{base}}}{-2} \\right) \\right)\nCaptures relative deviance reduction compared to the baseline model. Values range from 0 (no improvement) to 1 (strong improvement).\nRandom Effect Variance\n\\mathrm{Var}_{re} = \\frac{1}{\\mathrm{precision}}\nQuantifies residual variance due to group- or cluster-level effects. Computed only when random effects are defined in the model formula.\nProportional Change in Random Effect Variance\n\\frac{\\mathrm{Var}_{re}}{\\mathrm{Var}_{re}^{(1)}} - 1\nRepresents the relative change in group-level variance compared to the baseline model. Helps assess how much variance is explained by added covariates.\n\n\n\n\nAn object of class GHRmodels containing:\n\n$mod_gof: A data frame of model-specific goodness-of-fit metrics.\n$fitted: A list of fitted values (one element per model). If config = TRUE, these are derived from the posterior predictive distribution (PPD); otherwise, they are extracted from INLA’s summary.fitted.values.\n$fixed: A list of summary tables for fixed effects (one element per model).\n$random: A list of summary tables for random effects (one element per model).\n$formulas: A character vector of the original model formulas used.\n$re: A character vector specifying any random effects defined in formulas.\n$outcome: A character string indicating the outcome variable used.\n$data: The original data frame passed to the function.\n\n\n\n\nas_GHRformulas converts a set of R-INLA-compatible formulas into a GHRformulas object.\n\n\n\n## Not run:\n\n# Load example dataset\ndata(dengueMS)\n\n# Declare formulas\nformulas &lt;- c(\n  \"dengue_cases ~ tmin +  f(year, model='rw1')\",\n  \"dengue_cases ~ pdsi +  f(year, model='rw1')\"\n)\n\n# Tranform formulas into a 'GHRformulas' object\nghr_formulas &lt;- as_GHRformulas(formulas)\n\n# Fit multiple models \nresults &lt;- fit_models(\n  formulas = ghr_formulas,\n  data     = dengue_MS,\n  family   = \"nbinomial\",\n  name     = \"TestModel\",\n  offset   = \"population\",\nnthreads = 2,\ncontrol_compute = list(config = FALSE),\npb       = TRUE\n)\n\n# Inspect goodness-of-fit metrics\n\nhead(results$mod_gof)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#description",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "This function fits a set of INLA model formulas, provided in a GHRformulas object, to a specified dataset. For each fitted model, it extracts a range of outputs, including goodness-of-fit (GoF) metrics and other model outputs (fitted values, fixed effects, random effects). Results are extracted and stored in a GHRmodels object.\nfit_models(\n  formulas,\n  data,\n  family,\n  name,\n  offset = NULL,\n  control_compute = list(config = FALSE, vcov = FALSE),\n  nthreads = 8,\n  pb = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#arguments",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "formulas: A GHRformulas object containing multiple INLA model formulas.\ndata: A data frame containing the variables used in the model formulas.\nfamily: A character string specifying the likelihood family (e.g., \"poisson\", \"nbinomial\", etc.).\nname: A character string to label each fitted model (e.g., \"mod\").\noffset: A character string specifying the name of the offset variable in data. If NULL, no offset is applied. Default is NULL. Internally, log(offset_values) is applied.\ncontrol_compute: A named list controlling additional computation options:\n\nconfig: Logical ; if TRUE, stores the Gaussian Markov Random Field (GMRF) and enables the computation of posterior predictive distribution (1,000 draws). Defaults to FALSE.\nvcov: Logical if TRUE, returns the variance-covariance (correlation) matrix of fixed effects. Defaults to FALSE.\n\nnthreads: An integer specifying the number of threads for parallel computation. Default is 8.\npb: Logical; if TRUE, displays a progress bar while fitting models. Default is FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#details",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "This function iterates over each formula in the GHRformulas object and fits the corresponding INLA model using the internal function .fit_single_model(). For each fitted model, it extracts the fitted values, fixed effects, and random effects summaries. Then, it calculates a series of model evaluation metrics using the .gof_single_model() internal function.\nThe goodness-of-fit (GoF) metrics are organized into two categories:\n\nModel-Specific Goodness-of-Fit Metrics\n\nThese are computed separately for each model:\n\nDeviance Information Criterion (DIC)\nDIC = \\bar{D} + p_{D}\nwhere \\bar{D} is the posterior mean deviance and p_{D} is the effective number of parameters. Lower DIC values indicate a better model fit, balancing goodness-of-fit and model complexity.\nWatanabe-Akaike Information Criterion (WAIC)\nWAIC = -2\\left(\\mathrm{lppd} - p_{\\mathrm{WAIC}}\\right)\nWAIC evaluates predictive accuracy and penalizes model complexity through the log pointwise predictive density (\\mathrm{lppd}). Lower values imply better generalization.\nLog Mean Score (LMS)\nLMS = \\frac{1}{n} \\sum_{i=1}^n \\left( -\\log(\\mathrm{CPO}_i) \\right)\nLMS assesses the average negative log-predictive density using Conditional Predictive Ordinates (CPO). Lower LMS values indicate stronger predictive performance by penalizing models that assign low probability to observed outcomes.\nMean Absolute Error (MAE)\nMAE = \\frac{1}{n} \\sum_{i=1}^n \\left| y_i - \\hat{y}_i \\right|\nMeasures the average absolute deviation between observed values y_i and predicted values \\hat{y}_i. Lower MAE values indicate improved fit. If config = TRUE, MAE is computed using the full posterior predictive distribution (PPD); otherwise, it uses point estimates from INLA’s summary.fitted.values.\nRoot Mean Squared Error (RMSE)\nRMSE = \\sqrt{ \\frac{1}{n} \\sum_{i=1}^n (y_i - \\hat{y}_i)^2 }\nCaptures average squared deviation between observed and predicted values. RMSE penalizes larger errors more heavily. Lower values reflect better model fit. If config = TRUE, RMSE uses the PPD; otherwise, it uses point estimates.\nContinuous Ranked Probability Score (CRPS)\n\\mathrm{CRPS}(F, y) = \\int_{-\\infty}^{\\infty} \\left[F(t) - \\mathbf{1}\\{y \\leq t\\}\\right]^2 dt\nCRPS assesses how well the predictive cumulative distribution aligns with the observed outcome. Lower scores suggest better calibrated predictive distributions. Only available when config = TRUE.\n\n\nModel Comparison Metrics (relative to the first model)\n\nThe first model in the list is treated as the baseline for model comparisons. All other models are evaluated against it using the following metrics:\n\nDifference in DIC and WAIC\nStored as dic_vs_first and waic_vs_first. These represent how much higher (or lower) each model’s DIC/WAIC is compared to the first model. Additionally, 95% credible intervals for these differences are stored as *_vs_first_lci and *_vs_first_uci.\nDifference in MAE and RMSE\nStored as mae_vs_first and rmse_vs_first. These reflect the absolute difference in prediction error compared to the first model. No credible intervals are computed for these metrics.\nContinuous Ranked Probability Score Skill Score (CRPSS)\n\\mathrm{CRPSS} = 1 - \\frac{\\mathrm{CRPS}_{\\text{model}}}{\\mathrm{CRPS}_{\\text{baseline}}}\nIndicates how much better the predictive distribution of the current model is relative to the baseline model. Values closer to 1 indicate improvement; negative values imply worse performance. Available only when config = TRUE.\nPseudo R-squared based on deviance\nR^2 = 1 - \\exp\\left( \\frac{-2}{n} \\left( \\frac{dev_{\\text{model}}}{-2} - \\frac{dev_{\\text{base}}}{-2} \\right) \\right)\nCaptures relative deviance reduction compared to the baseline model. Values range from 0 (no improvement) to 1 (strong improvement).\nRandom Effect Variance\n\\mathrm{Var}_{re} = \\frac{1}{\\mathrm{precision}}\nQuantifies residual variance due to group- or cluster-level effects. Computed only when random effects are defined in the model formula.\nProportional Change in Random Effect Variance\n\\frac{\\mathrm{Var}_{re}}{\\mathrm{Var}_{re}^{(1)}} - 1\nRepresents the relative change in group-level variance compared to the baseline model. Helps assess how much variance is explained by added covariates."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#returns",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "An object of class GHRmodels containing:\n\n$mod_gof: A data frame of model-specific goodness-of-fit metrics.\n$fitted: A list of fitted values (one element per model). If config = TRUE, these are derived from the posterior predictive distribution (PPD); otherwise, they are extracted from INLA’s summary.fitted.values.\n$fixed: A list of summary tables for fixed effects (one element per model).\n$random: A list of summary tables for random effects (one element per model).\n$formulas: A character vector of the original model formulas used.\n$re: A character vector specifying any random effects defined in formulas.\n$outcome: A character string indicating the outcome variable used.\n$data: The original data frame passed to the function."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#see-also",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "as_GHRformulas converts a set of R-INLA-compatible formulas into a GHRformulas object."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/fit_models.Rd.html#examples",
    "title": "Fit Multiple INLA Models",
    "section": "",
    "text": "## Not run:\n\n# Load example dataset\ndata(dengueMS)\n\n# Declare formulas\nformulas &lt;- c(\n  \"dengue_cases ~ tmin +  f(year, model='rw1')\",\n  \"dengue_cases ~ pdsi +  f(year, model='rw1')\"\n)\n\n# Tranform formulas into a 'GHRformulas' object\nghr_formulas &lt;- as_GHRformulas(formulas)\n\n# Fit multiple models \nresults &lt;- fit_models(\n  formulas = ghr_formulas,\n  data     = dengue_MS,\n  family   = \"nbinomial\",\n  name     = \"TestModel\",\n  offset   = \"population\",\nnthreads = 2,\ncontrol_compute = list(config = FALSE),\npb       = TRUE\n)\n\n# Inspect goodness-of-fit metrics\n\nhead(results$mod_gof)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html",
    "title": "Produce a Forest Plot for a Spatially or Temporally Varying Effects from a GHRmodels object.",
    "section": "",
    "text": "Generates a forest plot for a specified spatially or temporally varying coefficient (i.e. a random slope) from a fitted GHRmodels object. The plot displays the effect estimates (x-axis) for each spatial/temporal unit (y-axis).\nplot_coef_varying(\n  models,\n  mod_id,\n  name,\n  unit_label = NULL,\n  palette = \"IDE2\",\n  title = NULL,\n  xlab = \"Effect size\",\n  ylab = NULL,\n  exp = FALSE\n)\n\n\n\n\nmodels: A GHRmodels object containing fitted model output.\nmod_id: A character specifying which model to be plotted (as in models$mod_gof$model_id).\nname: A character string naming the spatially or temporally varying coefficient to plot. This should match a random effect name in models$random[[mod_id]].\nunit_label: Optional named character vector providing custom labels for each spatial/temporal unit.\npalette: Character string for the GHR, RColorBrewer or colorspace palette (e.g. “Purp”) colour palette to use for the different models. See all available options by running GHR_palettes(), RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE). Single R colors in colors() or hex codes can also be used.\ntitle: Optional string for the plot title.\nxlab: Optional character string for the x-axis label (default = “Effect size”).\nylab: Optional character string for the y-axis label (default constructed from varying covariate name).\nexp: Logical,if TRUE the coefficients are exponentiated, Default is if FALSE.\n\n\n\n\nA ggplot2 forest plot object representing the spatially or temporally varying effect, with each line corresponding to a different spatial or temporal unit.\n\n\n\n## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_cov_list_file &lt;- system.file(\"examples\", \"model_cov_list.rds\", package = \"GHRmodel\")\nmodel_cov_list &lt;- readRDS(model_cov_list_file)\n\n# Plot varying slopes of pdsi.l1 depending on the climate zone\nplot_coef_varying(\nmodels = model_cov_list,               # A list of fitted INLA model objects\nmod_id = \"mod8\",                       # Select the model with varying slopes\npalette = \"Blues\",                     # Color palette for the plot \nname = \"main_climate_f\",               # The grouping variable \ntitle = \"Effect of PDSI at one-month lag for each climate zone\",  # Plot title\nylab = \"Main climate zones\",           # Label for the y-axis \nunit_label = c(                        # Map factor levels to descriptive names \n  \"1\" = \"Tropical Rainforest Climate\", \n  \"2\" = \"Tropical Monsoon Climate\", \n  \"3\" = \"Tropical Savanna Climate with Dry Winter\",\n  \"4\" = \"Humid Subtropical Climate\"\n)\n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#description",
    "title": "Produce a Forest Plot for a Spatially or Temporally Varying Effects from a GHRmodels object.",
    "section": "",
    "text": "Generates a forest plot for a specified spatially or temporally varying coefficient (i.e. a random slope) from a fitted GHRmodels object. The plot displays the effect estimates (x-axis) for each spatial/temporal unit (y-axis).\nplot_coef_varying(\n  models,\n  mod_id,\n  name,\n  unit_label = NULL,\n  palette = \"IDE2\",\n  title = NULL,\n  xlab = \"Effect size\",\n  ylab = NULL,\n  exp = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#arguments",
    "title": "Produce a Forest Plot for a Spatially or Temporally Varying Effects from a GHRmodels object.",
    "section": "",
    "text": "models: A GHRmodels object containing fitted model output.\nmod_id: A character specifying which model to be plotted (as in models$mod_gof$model_id).\nname: A character string naming the spatially or temporally varying coefficient to plot. This should match a random effect name in models$random[[mod_id]].\nunit_label: Optional named character vector providing custom labels for each spatial/temporal unit.\npalette: Character string for the GHR, RColorBrewer or colorspace palette (e.g. “Purp”) colour palette to use for the different models. See all available options by running GHR_palettes(), RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE). Single R colors in colors() or hex codes can also be used.\ntitle: Optional string for the plot title.\nxlab: Optional character string for the x-axis label (default = “Effect size”).\nylab: Optional character string for the y-axis label (default constructed from varying covariate name).\nexp: Logical,if TRUE the coefficients are exponentiated, Default is if FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#returns",
    "title": "Produce a Forest Plot for a Spatially or Temporally Varying Effects from a GHRmodels object.",
    "section": "",
    "text": "A ggplot2 forest plot object representing the spatially or temporally varying effect, with each line corresponding to a different spatial or temporal unit."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_varying.Rd.html#examples",
    "title": "Produce a Forest Plot for a Spatially or Temporally Varying Effects from a GHRmodels object.",
    "section": "",
    "text": "## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_cov_list_file &lt;- system.file(\"examples\", \"model_cov_list.rds\", package = \"GHRmodel\")\nmodel_cov_list &lt;- readRDS(model_cov_list_file)\n\n# Plot varying slopes of pdsi.l1 depending on the climate zone\nplot_coef_varying(\nmodels = model_cov_list,               # A list of fitted INLA model objects\nmod_id = \"mod8\",                       # Select the model with varying slopes\npalette = \"Blues\",                     # Color palette for the plot \nname = \"main_climate_f\",               # The grouping variable \ntitle = \"Effect of PDSI at one-month lag for each climate zone\",  # Plot title\nylab = \"Main climate zones\",           # Label for the y-axis \nunit_label = c(                        # Map factor levels to descriptive names \n  \"1\" = \"Tropical Rainforest Climate\", \n  \"2\" = \"Tropical Monsoon Climate\", \n  \"3\" = \"Tropical Savanna Climate with Dry Winter\",\n  \"4\" = \"Humid Subtropical Climate\"\n)\n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "This function converts a character vector of suitable R-INLA formulas into a structured GHRformulas object. The GHRformulas object contains the standardized information about the fixed effects, the random effects, and the outcome variable, ensuring consistency across multiple models to be fitted using the fit_models function.\nas_GHRformulas(formulas)\n\n\n\n\nformulas: A character vector of model formulas formatted for R-INLA. Each formula must contain a single ~ separating the outcome variable from the predictors. Formulas generated with write_inla_formulas are compatible with this function.\n\n\n\n\nThe as_GHRformulas() function parses each input formula to extract the outcome variable, fixed effects (covariates), and random effects. The resulting GHRformulas object is designed to be used with the fit_models function for model fitting with R-INLA.\n\n\n\nA structured list of class GHRformulas with the following components:\n\nformulas: A character vector of the original INLA-compatible model formulas.\nvars: A data frame where each row corresponds to a formula and each column to a covariate. Entries indicate whether a covariate is included in the formula.\nre: A character vector listing the random effects specified across all formulas.\noutcome: A character string indicating the outcome variable (must be consistent across formulas).\n\n\n\n\nwrite_inla_formulas to generate R-INLA compatible input formulas\n\n\n\nformulas &lt;- c(\n\"dengue_cases ~ 1 + f(month_id, model = 'rw1')\", \n\"dengue_cases ~ 1 + f(month_id, model = 'rw1') + tmin.l1\") \n\n# Convert the formulas into a GHRformulas object\nformulas &lt;- as_GHRformulas(formulas)\n\n# Inspect the structured GHRformulas object\nprint(formulas)\n# Visualize output: GHRformulas object\nclass(formulas)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#description",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "This function converts a character vector of suitable R-INLA formulas into a structured GHRformulas object. The GHRformulas object contains the standardized information about the fixed effects, the random effects, and the outcome variable, ensuring consistency across multiple models to be fitted using the fit_models function.\nas_GHRformulas(formulas)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#arguments",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "formulas: A character vector of model formulas formatted for R-INLA. Each formula must contain a single ~ separating the outcome variable from the predictors. Formulas generated with write_inla_formulas are compatible with this function."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#details",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "The as_GHRformulas() function parses each input formula to extract the outcome variable, fixed effects (covariates), and random effects. The resulting GHRformulas object is designed to be used with the fit_models function for model fitting with R-INLA."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#returns",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "A structured list of class GHRformulas with the following components:\n\nformulas: A character vector of the original INLA-compatible model formulas.\nvars: A data frame where each row corresponds to a formula and each column to a covariate. Entries indicate whether a covariate is included in the formula.\nre: A character vector listing the random effects specified across all formulas.\noutcome: A character string indicating the outcome variable (must be consistent across formulas)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#see-also",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "write_inla_formulas to generate R-INLA compatible input formulas"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/as_GHRformulas.Rd.html#examples",
    "title": "Convert R-INLA Model Formulas into a GHRformulas Object",
    "section": "",
    "text": "formulas &lt;- c(\n\"dengue_cases ~ 1 + f(month_id, model = 'rw1')\", \n\"dengue_cases ~ 1 + f(month_id, model = 'rw1') + tmin.l1\") \n\n# Convert the formulas into a GHRformulas object\nformulas &lt;- as_GHRformulas(formulas)\n\n# Inspect the structured GHRformulas object\nprint(formulas)\n# Visualize output: GHRformulas object\nclass(formulas)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html",
    "title": "Generate Interaction Terms Between Covariates",
    "section": "",
    "text": "This function generates interaction terms between covariates specified in the pattern or name arguments. It requires a list of character vectors and appends interaction terms to each vector based on pairwise or three-way interactions. The resulting list can be input into the covariates argument in write_inla_formulas.\ncov_interact(covariates = NULL, pattern = NULL, name = NULL, add = FALSE)\n\n\n\n\ncovariates: A list of character vectors, each vector containing variable names. Typically an output of cov_multi or cov_uni.\npattern: A character vector of length 2 or 3 specifying prefixes of variables to interact (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: A character vector specifying the exact variable names to be included in the interactions.\nadd: Logical; if TRUE, appends the newly created formulas to the original list. Default is FALSE.\n\n\n\n\n\nIf two variables are matched, their pairwise interaction is added (var1:var2).\nIf three variables are matched, two-way and three-way interactions are generated.\nOnly variables that are expressed as linear terms can be used in interactions.\nUse either pattern, name, or both to identify variables for interaction.\n\n\n\n\nA list of character vectors, where each vector includes covariates and their corresponding interaction terms. This object can be passed to the covariates argument in write_inla_formulas.\n\n\n\n# Example dataset\ndata &lt;- data.frame(tmin.l1 = rnorm(10), pdsi.l1 = rnorm(10), urban = rnorm(10))\n\n# Extract names\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\", \"urban\"))\n\n# Create combinations\ncombos &lt;- cov_multi(covariates = covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Add interaction terms\ncov_interact(covariates = combos, pattern = c(\"tmin\", \"pdsi\"))\n\n# Output can be passed to write_inla_formulas()\nnew_covs &lt;- cov_interact(combos, pattern = c(\"tmin\", \"pdsi\"))\nformulas &lt;- write_inla_formulas(outcome = \"cases\", covariates = new_covs)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#description",
    "title": "Generate Interaction Terms Between Covariates",
    "section": "",
    "text": "This function generates interaction terms between covariates specified in the pattern or name arguments. It requires a list of character vectors and appends interaction terms to each vector based on pairwise or three-way interactions. The resulting list can be input into the covariates argument in write_inla_formulas.\ncov_interact(covariates = NULL, pattern = NULL, name = NULL, add = FALSE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#arguments",
    "title": "Generate Interaction Terms Between Covariates",
    "section": "",
    "text": "covariates: A list of character vectors, each vector containing variable names. Typically an output of cov_multi or cov_uni.\npattern: A character vector of length 2 or 3 specifying prefixes of variables to interact (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: A character vector specifying the exact variable names to be included in the interactions.\nadd: Logical; if TRUE, appends the newly created formulas to the original list. Default is FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#details",
    "title": "Generate Interaction Terms Between Covariates",
    "section": "",
    "text": "If two variables are matched, their pairwise interaction is added (var1:var2).\nIf three variables are matched, two-way and three-way interactions are generated.\nOnly variables that are expressed as linear terms can be used in interactions.\nUse either pattern, name, or both to identify variables for interaction."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#returns",
    "title": "Generate Interaction Terms Between Covariates",
    "section": "",
    "text": "A list of character vectors, where each vector includes covariates and their corresponding interaction terms. This object can be passed to the covariates argument in write_inla_formulas."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_interact.Rd.html#examples",
    "title": "Generate Interaction Terms Between Covariates",
    "section": "",
    "text": "# Example dataset\ndata &lt;- data.frame(tmin.l1 = rnorm(10), pdsi.l1 = rnorm(10), urban = rnorm(10))\n\n# Extract names\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\", \"urban\"))\n\n# Create combinations\ncombos &lt;- cov_multi(covariates = covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Add interaction terms\ncov_interact(covariates = combos, pattern = c(\"tmin\", \"pdsi\"))\n\n# Output can be passed to write_inla_formulas()\nnew_covs &lt;- cov_interact(combos, pattern = c(\"tmin\", \"pdsi\"))\nformulas &lt;- write_inla_formulas(outcome = \"cases\", covariates = new_covs)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "Provides visualization of model performance using selected goodness-of-fit (GoF) metrics for one or more models. It is typically used with the mod_gof component of a GHRmodels object (produced by fit_models), but it can also accept any custom data frame — provided it contains the same column names as the default mod_gof output (including model_id and the relevant metric column names). It supports visual grouping by aesthetics (color, shape, facet), arranging models by metric, and adding credible intervals for model differences.\nplot_gof(\n  mod_gof,\n  metric = \"dic\",\n  mod_id = NULL,\n  mod_label = NULL,\n  ci = FALSE,\n  var_arrange = NULL,\n  var_color = NULL,\n  var_shape = NULL,\n  var_facet = NULL,\n  palette = \"IDE2\"\n)\n\n\n\n\nmod_gof: A data frame containing goodness-of-fit statistics for each model. Typically this is the mod_gof component of a GHRmodels object. It must include at least a model_id column and the selected metric. Other columns can be used for aesthetics (e.g., color, shape).\nmetric: Character string specifying the GoF metric to plot. Common options include:\n\n\"dic\", \"waic\", \"lms\", \"mae\", \"rmse\", \"crps\", \"rsq\"\nDifferences from baseline: \"dic_vs_first\", \"waic_vs_first\", \"mae_vs_first\", etc.\nRandom effect variances: \"re_n_var\", \"re_n_var_change\", where n is an index.\n\nmod_id: Optional character vector of model IDs to include. If NULL, includes all in mod_gof.\nmod_label: Optional named or unnamed vector to customize display names for models. If unnamed, must match the order of mod_id.\nci: Logical. If TRUE, adds credible intervals for \"*_vs_first\" metrics (if available).\nvar_arrange: Character string for a column name used to order models along the x-axis. Defaults to \"model_id\" order if NULL.\nvar_color: Optional; name of a column in mod_gof to use for color grouping.\nvar_shape: Optional; name of a column in mod_gof to use for point shape grouping.\nvar_facet: Optional; name of a column in mod_gof to use for faceting the plot.\npalette: Character; name of a color palette to use if var_color is provided. Default is \"IDE2\".\n\n\n\n\nThis function helps interpret and visualize comparative model performance:\n\nRelative metrics (e.g., \"*_vs_first\") assume the first model is a reference.\nIf ci = TRUE, the function looks for columns like \"dic_vs_first_lci\" and \"_uci\".\nThe user can customize model order with var_arrange and legend groupings using var_color, etc.\n\n\n\n\nA ggplot2 object showing the specified metric for each model, optionally grouped and faceted. The plot supports:\n\nRanking or sorting models by a specified variable\nHighlighting credible intervals for relative metrics (e.g. \"dic_vs_first\")\nGroup-level comparisons via color, shape, and facet aesthetics\n\n\n\n\nfit_models for fitting multiple INLA models.\n\n\n\n## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot models by difference in DIC\n        \nplot_gof(mod_gof = model_list$mod_gof,\n        metric = \"dic_vs_first\",\n        ci = TRUE,\n        var_arrange = \"dic\",\n        var_color = \"covariate_1\",\n        var_shape = \"covariate_2\",\n        palette= \"IDE2\")\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#description",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "Provides visualization of model performance using selected goodness-of-fit (GoF) metrics for one or more models. It is typically used with the mod_gof component of a GHRmodels object (produced by fit_models), but it can also accept any custom data frame — provided it contains the same column names as the default mod_gof output (including model_id and the relevant metric column names). It supports visual grouping by aesthetics (color, shape, facet), arranging models by metric, and adding credible intervals for model differences.\nplot_gof(\n  mod_gof,\n  metric = \"dic\",\n  mod_id = NULL,\n  mod_label = NULL,\n  ci = FALSE,\n  var_arrange = NULL,\n  var_color = NULL,\n  var_shape = NULL,\n  var_facet = NULL,\n  palette = \"IDE2\"\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#arguments",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "mod_gof: A data frame containing goodness-of-fit statistics for each model. Typically this is the mod_gof component of a GHRmodels object. It must include at least a model_id column and the selected metric. Other columns can be used for aesthetics (e.g., color, shape).\nmetric: Character string specifying the GoF metric to plot. Common options include:\n\n\"dic\", \"waic\", \"lms\", \"mae\", \"rmse\", \"crps\", \"rsq\"\nDifferences from baseline: \"dic_vs_first\", \"waic_vs_first\", \"mae_vs_first\", etc.\nRandom effect variances: \"re_n_var\", \"re_n_var_change\", where n is an index.\n\nmod_id: Optional character vector of model IDs to include. If NULL, includes all in mod_gof.\nmod_label: Optional named or unnamed vector to customize display names for models. If unnamed, must match the order of mod_id.\nci: Logical. If TRUE, adds credible intervals for \"*_vs_first\" metrics (if available).\nvar_arrange: Character string for a column name used to order models along the x-axis. Defaults to \"model_id\" order if NULL.\nvar_color: Optional; name of a column in mod_gof to use for color grouping.\nvar_shape: Optional; name of a column in mod_gof to use for point shape grouping.\nvar_facet: Optional; name of a column in mod_gof to use for faceting the plot.\npalette: Character; name of a color palette to use if var_color is provided. Default is \"IDE2\"."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#details",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "This function helps interpret and visualize comparative model performance:\n\nRelative metrics (e.g., \"*_vs_first\") assume the first model is a reference.\nIf ci = TRUE, the function looks for columns like \"dic_vs_first_lci\" and \"_uci\".\nThe user can customize model order with var_arrange and legend groupings using var_color, etc."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#returns",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "A ggplot2 object showing the specified metric for each model, optionally grouped and faceted. The plot supports:\n\nRanking or sorting models by a specified variable\nHighlighting credible intervals for relative metrics (e.g. \"dic_vs_first\")\nGroup-level comparisons via color, shape, and facet aesthetics"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#see-also",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "fit_models for fitting multiple INLA models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_gof.Rd.html#examples",
    "title": "Plot Models by Goodness-of-Fit",
    "section": "",
    "text": "## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot models by difference in DIC\n        \nplot_gof(mod_gof = model_list$mod_gof,\n        metric = \"dic_vs_first\",\n        ci = TRUE,\n        var_arrange = \"dic\",\n        var_color = \"covariate_1\",\n        var_shape = \"covariate_2\",\n        palette= \"IDE2\")\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html",
    "title": "Plot Nonlinear Effects from a GHRmodels Object",
    "section": "",
    "text": "Generates plots of nonlinear effects from one or more fitted models contained within a GHRmodels object. The function supports two main display modes:\n\nGrid (when collapse = FALSE): one plot per covariate and model, with effects by column and models by row.\n\nIf multiple models are specified, the user must provide either name or pattern to select which nonlinear effects to plot.\nIf only one model is selected and both name and pattern are NULL, all nonlinear effects in the model will be plotted.\n\nCollapsed (when collapse = TRUE): one non-linear effect combined across models into a single panel.\n\nThe user must explicitly specify the exact variable name using name. It only accepts one covariate name.\nCollapse mode can only be used when the selected effect is not replicated (that is, does not have the format f(covariate, model = ..., replicate = group)) If replication is detected, an error will be thrown.\n\n\nplot_coef_nl(\n  models,\n  mod_id,\n  mod_label = NULL,\n  name = NULL,\n  pattern = NULL,\n  title = NULL,\n  var_label = NULL,\n  palette = \"IDE2\",\n  xlim = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  histogram = FALSE,\n  legend = NULL,\n  hist_fill = \"grey\",\n  rug = FALSE,\n  collapse = FALSE,\n  exp = FALSE\n)\n\n\n\n\nmodels: A GHRmodels object containing fitted model outputs.\nmod_id: Integer vector specifying which model(s) to plot (as indexed in model$models).\nmod_label: An optional named character vector mapping model names to custom labels, e.g. c(“mod1” = “Model 1”). Any model not found in the vector names retains its original label.\nname: Optional character vector of variable names (as used in inla.group(...)) to select specific nonlinear effects. Required for collapse mode.\npattern: Optional regular expression pattern to match effect names. Used to select nonlinear effects when name is not provided.\ntitle: Optional overall title for the plot.\nvar_label: Optional named character vector providing custom labels for each nonlinear variable. Names must match the variable names (e.g., used in inla.group(x)), not full effect names.\npalette: Name of the color palette to use (passed to GHR_palette). Default is \"IDE2\".\nxlim: Optional named list specifying x-axis limits for each effect. Each element should be a numeric vector of length 2: list(var1 = c(min, max), var2 = c(min, max)). Variable names must match those used in inla.group().\nylab: Optional y-axis label. If NULL, defaults to \"Effect size\".\nxlab: Optional x-axis label. If NULL, defaults to \"&lt;variable&gt; values\". If explicitly set to NULL, no x-axis label will be shown.\nhistogram: Logical; if TRUE (default), includes a histogram below each partial-effect plot.\nlegend: Legend title for the replicate color scale (if multi-replicate effects are present). Default is \"Replicate\".\nhist_fill: Fill color for histogram bars. Default is \"grey\".\nrug: Include a rug plot in the x-axis. Default is FALSE.\ncollapse: Logical; if TRUE, attempts to collapse plots across models to show one plot per variable. This requires that selected nonlinear effect is not replicated (i.e. the covariate is not in the format f(covariate, model = …, replicate = group))\nexp: Logical,if TRUE the coefficients are exponentiated, Default is if FALSE.\n\n\n\n\nA ggplot or cowplot object, depending on the plotting mode.\n\n\n\n## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot 2 models with a non-linear term of PDSI at one month lag in collapsed mode: \nplot_coef_nl(\nmodels = model_list,\nmod_id = c( \"mod5\", \"mod6\") ,\nmod_label = c(\"mod6\" = \"pdsi.l1_nl\",\n              \"mod5\" = \"pdsi.l1_nl + tmin.l1_nl\"),\nvar_label = c(\"pdsi.l1\" = \"Drought index (PDSI)\"),\nname = c(\"pdsi.l1\"),\ntitle = \"Change in non-linear term for drought index (PDSI)\nwith and without mean min. temp lag 1\",\nxlab = \"PDSI\",\npalette = \"IDE2\",\ncollapse = TRUE    \n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#description",
    "title": "Plot Nonlinear Effects from a GHRmodels Object",
    "section": "",
    "text": "Generates plots of nonlinear effects from one or more fitted models contained within a GHRmodels object. The function supports two main display modes:\n\nGrid (when collapse = FALSE): one plot per covariate and model, with effects by column and models by row.\n\nIf multiple models are specified, the user must provide either name or pattern to select which nonlinear effects to plot.\nIf only one model is selected and both name and pattern are NULL, all nonlinear effects in the model will be plotted.\n\nCollapsed (when collapse = TRUE): one non-linear effect combined across models into a single panel.\n\nThe user must explicitly specify the exact variable name using name. It only accepts one covariate name.\nCollapse mode can only be used when the selected effect is not replicated (that is, does not have the format f(covariate, model = ..., replicate = group)) If replication is detected, an error will be thrown.\n\n\nplot_coef_nl(\n  models,\n  mod_id,\n  mod_label = NULL,\n  name = NULL,\n  pattern = NULL,\n  title = NULL,\n  var_label = NULL,\n  palette = \"IDE2\",\n  xlim = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  histogram = FALSE,\n  legend = NULL,\n  hist_fill = \"grey\",\n  rug = FALSE,\n  collapse = FALSE,\n  exp = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#arguments",
    "title": "Plot Nonlinear Effects from a GHRmodels Object",
    "section": "",
    "text": "models: A GHRmodels object containing fitted model outputs.\nmod_id: Integer vector specifying which model(s) to plot (as indexed in model$models).\nmod_label: An optional named character vector mapping model names to custom labels, e.g. c(“mod1” = “Model 1”). Any model not found in the vector names retains its original label.\nname: Optional character vector of variable names (as used in inla.group(...)) to select specific nonlinear effects. Required for collapse mode.\npattern: Optional regular expression pattern to match effect names. Used to select nonlinear effects when name is not provided.\ntitle: Optional overall title for the plot.\nvar_label: Optional named character vector providing custom labels for each nonlinear variable. Names must match the variable names (e.g., used in inla.group(x)), not full effect names.\npalette: Name of the color palette to use (passed to GHR_palette). Default is \"IDE2\".\nxlim: Optional named list specifying x-axis limits for each effect. Each element should be a numeric vector of length 2: list(var1 = c(min, max), var2 = c(min, max)). Variable names must match those used in inla.group().\nylab: Optional y-axis label. If NULL, defaults to \"Effect size\".\nxlab: Optional x-axis label. If NULL, defaults to \"&lt;variable&gt; values\". If explicitly set to NULL, no x-axis label will be shown.\nhistogram: Logical; if TRUE (default), includes a histogram below each partial-effect plot.\nlegend: Legend title for the replicate color scale (if multi-replicate effects are present). Default is \"Replicate\".\nhist_fill: Fill color for histogram bars. Default is \"grey\".\nrug: Include a rug plot in the x-axis. Default is FALSE.\ncollapse: Logical; if TRUE, attempts to collapse plots across models to show one plot per variable. This requires that selected nonlinear effect is not replicated (i.e. the covariate is not in the format f(covariate, model = …, replicate = group))\nexp: Logical,if TRUE the coefficients are exponentiated, Default is if FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#returns",
    "title": "Plot Nonlinear Effects from a GHRmodels Object",
    "section": "",
    "text": "A ggplot or cowplot object, depending on the plotting mode."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_nl.Rd.html#examples",
    "title": "Plot Nonlinear Effects from a GHRmodels Object",
    "section": "",
    "text": "## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot 2 models with a non-linear term of PDSI at one month lag in collapsed mode: \nplot_coef_nl(\nmodels = model_list,\nmod_id = c( \"mod5\", \"mod6\") ,\nmod_label = c(\"mod6\" = \"pdsi.l1_nl\",\n              \"mod5\" = \"pdsi.l1_nl + tmin.l1_nl\"),\nvar_label = c(\"pdsi.l1\" = \"Drought index (PDSI)\"),\nname = c(\"pdsi.l1\"),\ntitle = \"Change in non-linear term for drought index (PDSI)\nwith and without mean min. temp lag 1\",\nxlab = \"PDSI\",\npalette = \"IDE2\",\ncollapse = TRUE    \n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html",
    "title": "Build Univariable Covariate Sets",
    "section": "",
    "text": "This function returns a list where each element contains a single covariate, based on covariates specified in the pattern or name arguments. This structure is suitable for generating separate univariable model formulas using write_inla_formulas.\ncov_uni(covariates = NULL, pattern = NULL, name = NULL)\n\n\n\n\ncovariates: A character vector of covariate names. Typically the output from extract_names.\npattern: A character vector specifying the prefix pattern(s) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: A character vector specifying exact variable name(s) to extract.\n\n\n\n\nA list of character vectors, each of length 1, containing the matched covariate name. The resulting list is suitable for use as the covariates argument in write_inla_formulas.\n\n\n\ndata &lt;- data.frame(tmin = rnorm(10), tmin.l1 = rnorm(10), urban = rnorm(10))\ncovs &lt;- extract_names(data, pattern = \"tmin\", name = \"urban\")\ncov_uni(covs, pattern = \"tmin\")\ncov_uni(covs, name = \"urban\")"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#description",
    "title": "Build Univariable Covariate Sets",
    "section": "",
    "text": "This function returns a list where each element contains a single covariate, based on covariates specified in the pattern or name arguments. This structure is suitable for generating separate univariable model formulas using write_inla_formulas.\ncov_uni(covariates = NULL, pattern = NULL, name = NULL)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#arguments",
    "title": "Build Univariable Covariate Sets",
    "section": "",
    "text": "covariates: A character vector of covariate names. Typically the output from extract_names.\npattern: A character vector specifying the prefix pattern(s) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: A character vector specifying exact variable name(s) to extract."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#returns",
    "title": "Build Univariable Covariate Sets",
    "section": "",
    "text": "A list of character vectors, each of length 1, containing the matched covariate name. The resulting list is suitable for use as the covariates argument in write_inla_formulas."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_uni.Rd.html#examples",
    "title": "Build Univariable Covariate Sets",
    "section": "",
    "text": "data &lt;- data.frame(tmin = rnorm(10), tmin.l1 = rnorm(10), urban = rnorm(10))\ncovs &lt;- extract_names(data, pattern = \"tmin\", name = \"urban\")\ncov_uni(covs, pattern = \"tmin\")\ncov_uni(covs, name = \"urban\")"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "This function transforms selected covariates identified by pattern or name into non-linear terms using INLA’s f() syntax. It supports random walk models (rw1, rw2) and allows discretization by quantiles or equal intervals. Transformed covariates are returned as character vectors inside a list ready to be passed to the write_inla_formulas function.\ncov_nl(\n  covariates,\n  pattern = NULL,\n  name = NULL,\n  model = \"rw2\",\n  method = \"quantile\",\n  n = 10,\n  replicate = NULL,\n  add = FALSE\n)\n\n\n\n\ncovariates: A character vector or list of character vectors. Usually from cov_multi or cov_uni.\npattern: Character vector of patterns to match covariates for transformation (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: Character vector of exact covariate names to transform.\nmodel: Character; either \"rw1\" or \"rw2\" to specify the non-linear INLA model.\nmethod: Character; either \"cut\" or \"quantile\" for discretization. Default is \"quantile\".\nn: Integer; number of intervals or quantile bins. Must be &gt;= 2. Default is 10.\nreplicate: Optional character string indicating a replicate structure for non-linear effects.\nadd: Logical; if TRUE, adds the transformed covariates to the original ones. Default is FALSE.\n\n\n\n\n\nUse pattern or name (or both) to specify which variables to transform.\nThe method and n arguments discretize the covariate into evenly populated bins.\nThe function supports discretization with either equal-width (cut) or quantile-based (quantile) bins.\nThe model argument imposes smoothness on the grouped effect, capturing non-linear trends.\nNon-linear effects are created using .single_non_linear_eff_inla() (internal helper).\n\n\n\n\nA list of character vectors. This object can be passed to the covariates argument in write_inla_formulas.\n\n\n\nSee Bayesian inference with INLA: Smoothing\nfor more information on smoothing and non-linear effects in R-INLA models.\n\n\n\ndata &lt;- data.frame(tmin.l1 = rnorm(10), pdsi.l1 = rnorm(10))\n\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\"))\ncovlist &lt;- cov_multi(covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Apply non-linear transformation to tmin variables\ncov_nl(covlist, pattern = \"tmin\", model = \"rw2\")\n\n# Include original variables along with transformed ones\ncov_nl(covlist, pattern = \"tmin\", model = \"rw2\", add = TRUE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#description",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "This function transforms selected covariates identified by pattern or name into non-linear terms using INLA’s f() syntax. It supports random walk models (rw1, rw2) and allows discretization by quantiles or equal intervals. Transformed covariates are returned as character vectors inside a list ready to be passed to the write_inla_formulas function.\ncov_nl(\n  covariates,\n  pattern = NULL,\n  name = NULL,\n  model = \"rw2\",\n  method = \"quantile\",\n  n = 10,\n  replicate = NULL,\n  add = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#arguments",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "covariates: A character vector or list of character vectors. Usually from cov_multi or cov_uni.\npattern: Character vector of patterns to match covariates for transformation (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: Character vector of exact covariate names to transform.\nmodel: Character; either \"rw1\" or \"rw2\" to specify the non-linear INLA model.\nmethod: Character; either \"cut\" or \"quantile\" for discretization. Default is \"quantile\".\nn: Integer; number of intervals or quantile bins. Must be &gt;= 2. Default is 10.\nreplicate: Optional character string indicating a replicate structure for non-linear effects.\nadd: Logical; if TRUE, adds the transformed covariates to the original ones. Default is FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#details",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "Use pattern or name (or both) to specify which variables to transform.\nThe method and n arguments discretize the covariate into evenly populated bins.\nThe function supports discretization with either equal-width (cut) or quantile-based (quantile) bins.\nThe model argument imposes smoothness on the grouped effect, capturing non-linear trends.\nNon-linear effects are created using .single_non_linear_eff_inla() (internal helper)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#returns",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "A list of character vectors. This object can be passed to the covariates argument in write_inla_formulas."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#see-also",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "See Bayesian inference with INLA: Smoothing\nfor more information on smoothing and non-linear effects in R-INLA models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_nl.Rd.html#examples",
    "title": "Create Non-Linear Effects for INLA",
    "section": "",
    "text": "data &lt;- data.frame(tmin.l1 = rnorm(10), pdsi.l1 = rnorm(10))\n\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\"))\ncovlist &lt;- cov_multi(covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Apply non-linear transformation to tmin variables\ncov_nl(covlist, pattern = \"tmin\", model = \"rw2\")\n\n# Include original variables along with transformed ones\ncov_nl(covlist, pattern = \"tmin\", model = \"rw2\", add = TRUE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html",
    "title": "Add Covariates to All Combinations",
    "section": "",
    "text": "This function appends one or more covariate names to all elements (i.e., covariate sets) in a list of character vectors. This is useful when a covariate (like a confounder or control variable) needs to be included in every model. It also works with a single character vector input. The resulting list can be input into the covariates argument in write_inla_formulas.\ncov_add(covariates, name, add = FALSE)\n\n\n\n\ncovariates: A character vector or a list of character vectors, where each vector represents a set of covariates (e.g., from cov_multi).\nname: A character vector of covariate names to be added to each set.\nadd: Boolean that indicates if the original combinations in the covariates argument must be kept. Defaults to FALSE.\n\n\n\n\nA list of character vectors, with each vector containing the original covariates plus the additional ones specified in the name argument.\n\n\n\n# Multiple combinations\ncov_sets &lt;- list(\n  c(\"tmin\", \"pdsi\"),\n  c(\"tmin.l1\", \"pdsi\"),\n  c(\"tmin.l2\", \"pdsi\")\n)\ncov_add(cov_sets, name = \"urban\")"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#description",
    "title": "Add Covariates to All Combinations",
    "section": "",
    "text": "This function appends one or more covariate names to all elements (i.e., covariate sets) in a list of character vectors. This is useful when a covariate (like a confounder or control variable) needs to be included in every model. It also works with a single character vector input. The resulting list can be input into the covariates argument in write_inla_formulas.\ncov_add(covariates, name, add = FALSE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#arguments",
    "title": "Add Covariates to All Combinations",
    "section": "",
    "text": "covariates: A character vector or a list of character vectors, where each vector represents a set of covariates (e.g., from cov_multi).\nname: A character vector of covariate names to be added to each set.\nadd: Boolean that indicates if the original combinations in the covariates argument must be kept. Defaults to FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#returns",
    "title": "Add Covariates to All Combinations",
    "section": "",
    "text": "A list of character vectors, with each vector containing the original covariates plus the additional ones specified in the name argument."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_add.Rd.html#examples",
    "title": "Add Covariates to All Combinations",
    "section": "",
    "text": "# Multiple combinations\ncov_sets &lt;- list(\n  c(\"tmin\", \"pdsi\"),\n  c(\"tmin.l1\", \"pdsi\"),\n  c(\"tmin.l2\", \"pdsi\")\n)\ncov_add(cov_sets, name = \"urban\")"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html",
    "title": "Create a One-Dimensional Basis for INLA",
    "section": "",
    "text": "This function is a wrapper around onebasis to create a one-dimensional basis for spline modeling. This wrapper enhances the original function by allowing users to specify a custom prefix for the column names using the basis_name argument, such that each set of basis variables can be easily identified in the model formula by the INLA framework.\nonebasis_inla(covariate, fun, basis_name, ...)\n\n\n\n\ncovariate: A numeric vector representing the covariate\nfun: A character string specifying the shape function to be used by onebasis.\nbasis_name: A character string giving a base name for the columns in the resulting basis matrix. The default prefix (usually \"b\") is replaced by this string.\n...: Additional arguments passed to onebasis, such as degree, df, knots, etc.\n\n\n\n\nAn object of class \"onebasis\", as returned by onebasis, with column names modified according to basis_name.\n\n\n\n# Import example data set\ndata(\"dengue_MS\")\n\n# Build a one-dimensional spline basis with a custom name\nob_inla &lt;- onebasis_inla(\n covariate = dengue_MS$tmin,\n fun = \"bs\",\n basis_name = \"tempBasis\",\n degree = 2\n)\n\n# Check class of the one-basis object\nclass(ob_inla)\n\n# View first rows of the one-basis matrix\nhead(ob_inla)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#description",
    "title": "Create a One-Dimensional Basis for INLA",
    "section": "",
    "text": "This function is a wrapper around onebasis to create a one-dimensional basis for spline modeling. This wrapper enhances the original function by allowing users to specify a custom prefix for the column names using the basis_name argument, such that each set of basis variables can be easily identified in the model formula by the INLA framework.\nonebasis_inla(covariate, fun, basis_name, ...)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#arguments",
    "title": "Create a One-Dimensional Basis for INLA",
    "section": "",
    "text": "covariate: A numeric vector representing the covariate\nfun: A character string specifying the shape function to be used by onebasis.\nbasis_name: A character string giving a base name for the columns in the resulting basis matrix. The default prefix (usually \"b\") is replaced by this string.\n...: Additional arguments passed to onebasis, such as degree, df, knots, etc."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#returns",
    "title": "Create a One-Dimensional Basis for INLA",
    "section": "",
    "text": "An object of class \"onebasis\", as returned by onebasis, with column names modified according to basis_name."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/onebasis_inla.Rd.html#examples",
    "title": "Create a One-Dimensional Basis for INLA",
    "section": "",
    "text": "# Import example data set\ndata(\"dengue_MS\")\n\n# Build a one-dimensional spline basis with a custom name\nob_inla &lt;- onebasis_inla(\n covariate = dengue_MS$tmin,\n fun = \"bs\",\n basis_name = \"tempBasis\",\n degree = 2\n)\n\n# Check class of the one-basis object\nclass(ob_inla)\n\n# View first rows of the one-basis matrix\nhead(ob_inla)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html",
    "title": "Retrieve Covariates from a GHRmodels Object as a List of Character Vectors",
    "section": "",
    "text": "Extracts covariates from a GHRmodels object and returns them as a list of character vectors. If unique = TRUE, the output contains unique covariates across models. If unique = FALSE, the output preserves the original combinations of covariates as specified in the GHRmodels object.\nget_covariates(model, unique = TRUE)\n\n\n\n\nmodel: A GHRmodels object containing fitted models.\nunique: Logical; if TRUE, returns unique covariates across models. If FALSE, returns vectors of covariate combinations as declared in the GHRmodels object.\n\n\n\n\nA list of character vectors.\n\n\n\n## Not run:\n\n# Load example dataset\ndata(dengueMS)\n\n# Declare formulas\nformulas &lt;- c(\n  \"dengue_cases ~ tmin +  f(year, model='rw1')\",\n  \"dengue_cases ~ pdsi +  f(year, model='rw1')\"\n)\n\n# Tranform formulas into a 'GHRformulas' object\nghr_formulas &lt;- as_GHRformulas(formulas)\n\n# Fit multiple models \nresults &lt;- fit_models(\n  formulas = ghr_formulas,\n  data     = dengue_MS,\n  family   = \"nbinomial\",\n  name     = \"TestModel\",\n  offset   = \"population\",\nnthreads = 2,\ncontrol_compute = list(config = FALSE),\npb       = TRUE\n)\n\n# Extract the list of covariates from the models \nget_covariates(results)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#description",
    "title": "Retrieve Covariates from a GHRmodels Object as a List of Character Vectors",
    "section": "",
    "text": "Extracts covariates from a GHRmodels object and returns them as a list of character vectors. If unique = TRUE, the output contains unique covariates across models. If unique = FALSE, the output preserves the original combinations of covariates as specified in the GHRmodels object.\nget_covariates(model, unique = TRUE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#arguments",
    "title": "Retrieve Covariates from a GHRmodels Object as a List of Character Vectors",
    "section": "",
    "text": "model: A GHRmodels object containing fitted models.\nunique: Logical; if TRUE, returns unique covariates across models. If FALSE, returns vectors of covariate combinations as declared in the GHRmodels object."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#returns",
    "title": "Retrieve Covariates from a GHRmodels Object as a List of Character Vectors",
    "section": "",
    "text": "A list of character vectors."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/get_covariates.Rd.html#examples",
    "title": "Retrieve Covariates from a GHRmodels Object as a List of Character Vectors",
    "section": "",
    "text": "## Not run:\n\n# Load example dataset\ndata(dengueMS)\n\n# Declare formulas\nformulas &lt;- c(\n  \"dengue_cases ~ tmin +  f(year, model='rw1')\",\n  \"dengue_cases ~ pdsi +  f(year, model='rw1')\"\n)\n\n# Tranform formulas into a 'GHRformulas' object\nghr_formulas &lt;- as_GHRformulas(formulas)\n\n# Fit multiple models \nresults &lt;- fit_models(\n  formulas = ghr_formulas,\n  data     = dengue_MS,\n  family   = \"nbinomial\",\n  name     = \"TestModel\",\n  offset   = \"population\",\nnthreads = 2,\ncontrol_compute = list(config = FALSE),\npb       = TRUE\n)\n\n# Extract the list of covariates from the models \nget_covariates(results)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html",
    "title": "Dengue cases from the “Mato Grosso do Sul” state of Brazil",
    "section": "",
    "text": "The dengue_MS example data set contains monthly counts of notified dengue cases by microregion, along with a range of spatial and spatiotemporal covariates (e.g., environmental, socio-economic and meteo-climatic factors). This data set represents a subset of a larger national data set that covers the entire territory of Brazil. The subset focuses on a specific region, Mato Grosso do Sul, for the purposes of illustration and computational efficiency. See @source for access to the complete data set.\ndengue_MS\n\n\n\nA data frame with 2,600 rows and 27 columns:\n\nmicro_code: Unique ID number to each micro region (11 units)\nmicro_name: Name of each micro region\nmicro_name_ibge: Name of each micro region following IBGE\nmeso_code: Unique ID number to each meso region (4 units)\nmeso_name: Name of each meso region\nstate_code: Unique ID number to each state (1 unit)\nstate_name: Name of each state\nregion_code: Unique ID number given to each Brazilian Region, In this data frame all observations come from the “Southeast Region”\nregion_name: Name of each Brazilian Region, In this data frame all observations come from the “Southeast Region”\nbiome_code: Biome code\nbiome_name: Biome name\necozone_code: Ecozone code\necozone_name: Ecozone name\nmain_climate: Most prevalent climate regime in the microregion. Based on Koppen Geiger climate regimes\nmonth: Calendar month index, 1 = January, 12 = December\nyear: Year 2000 - 2019\ntime: Time index starting at 1 for January 2000\ndengue_cases: Number of notified dengue cases registered in the notifiable diseases system in Brazil (SINAN) in the microregion of reference, at the month of first symptoms\npopulation: Estimated population, based on projections calculated using the 2000 and 2010 censuses, and counts taken in 2007 and 2017\npop_density: Population density (number of people per km2)\ntmax: Monthly average daily maximum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion\ntmin: Monthly average daily minimum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion\npdsi: Self-calibrated Palmer drought severity index for each microregion. It measures how wet or dry a region is relative to usual conditions. Negative values represent periods of drought, positive values represent wetter periods. Calculated by taking the mean value within each microregion\nurban: Percentage of inhabitants living in urban areas (2010 census)\nwater_network: Percentage of inhabitants with access to the piped water network according to the 2010 census\nwater_shortage: Frequency of reported water shortages per microregion between 2000 - 2016\ndate: First day of the Month, in date format (“%d-%m-%Y”)\n\n\n\n\nsource code on GitHub; source code on Zenodo);"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html#description",
    "title": "Dengue cases from the “Mato Grosso do Sul” state of Brazil",
    "section": "",
    "text": "The dengue_MS example data set contains monthly counts of notified dengue cases by microregion, along with a range of spatial and spatiotemporal covariates (e.g., environmental, socio-economic and meteo-climatic factors). This data set represents a subset of a larger national data set that covers the entire territory of Brazil. The subset focuses on a specific region, Mato Grosso do Sul, for the purposes of illustration and computational efficiency. See @source for access to the complete data set.\ndengue_MS"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html#format",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html#format",
    "title": "Dengue cases from the “Mato Grosso do Sul” state of Brazil",
    "section": "",
    "text": "A data frame with 2,600 rows and 27 columns:\n\nmicro_code: Unique ID number to each micro region (11 units)\nmicro_name: Name of each micro region\nmicro_name_ibge: Name of each micro region following IBGE\nmeso_code: Unique ID number to each meso region (4 units)\nmeso_name: Name of each meso region\nstate_code: Unique ID number to each state (1 unit)\nstate_name: Name of each state\nregion_code: Unique ID number given to each Brazilian Region, In this data frame all observations come from the “Southeast Region”\nregion_name: Name of each Brazilian Region, In this data frame all observations come from the “Southeast Region”\nbiome_code: Biome code\nbiome_name: Biome name\necozone_code: Ecozone code\necozone_name: Ecozone name\nmain_climate: Most prevalent climate regime in the microregion. Based on Koppen Geiger climate regimes\nmonth: Calendar month index, 1 = January, 12 = December\nyear: Year 2000 - 2019\ntime: Time index starting at 1 for January 2000\ndengue_cases: Number of notified dengue cases registered in the notifiable diseases system in Brazil (SINAN) in the microregion of reference, at the month of first symptoms\npopulation: Estimated population, based on projections calculated using the 2000 and 2010 censuses, and counts taken in 2007 and 2017\npop_density: Population density (number of people per km2)\ntmax: Monthly average daily maximum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion\ntmin: Monthly average daily minimum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion\npdsi: Self-calibrated Palmer drought severity index for each microregion. It measures how wet or dry a region is relative to usual conditions. Negative values represent periods of drought, positive values represent wetter periods. Calculated by taking the mean value within each microregion\nurban: Percentage of inhabitants living in urban areas (2010 census)\nwater_network: Percentage of inhabitants with access to the piped water network according to the 2010 census\nwater_shortage: Frequency of reported water shortages per microregion between 2000 - 2016\ndate: First day of the Month, in date format (“%d-%m-%Y”)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html#source",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_MS.Rd.html#source",
    "title": "Dengue cases from the “Mato Grosso do Sul” state of Brazil",
    "section": "",
    "text": "source code on GitHub; source code on Zenodo);"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html",
    "title": "Subset GHRmodels Objects",
    "section": "",
    "text": "This function subsets selected models from a GHRmodels object into a new reduced GHRmodels object.\nsubset_models(models, mod_id, new_name = NULL)\n\n\n\n\nmodels: A GHRmodels object.\nmod_id: A character vector of model IDs indicating which model(s) to keep. These must match models$mod_gof$model_id.\nnew_name: NULL (default) or a character used to build the new model IDs.\n\n\n\n\nA new GHRmodels object containing only the specified model(s).\n\n\n\nstack_models for combining GHRmodels objects, fit_models for fitting INLA models.\n\n\n\n## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Extract a vector with the moded IDs of the 2 best fitting models by WAIC\nbest_waic &lt;- rank_models(\n  models = model_list,  # GHRmodels object containing model fit results\n  metric = \"waic\",      # Metric used to rank models (lower WAIC is better)\n  n = 2                 # Number of top-ranked models to return\n)\n\n# The output is a vector \nbest_waic\n\n# Subset those specific models and assign new IDs\nmodel_waic &lt;- subset_models(\n  model = model_list,\n  mod_id = best_waic,\n  new_name = \"best_waic\"\n)\n\n# Check output subset model names\nmodel_waic$mod_gof$model_id  \n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#description",
    "title": "Subset GHRmodels Objects",
    "section": "",
    "text": "This function subsets selected models from a GHRmodels object into a new reduced GHRmodels object.\nsubset_models(models, mod_id, new_name = NULL)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#arguments",
    "title": "Subset GHRmodels Objects",
    "section": "",
    "text": "models: A GHRmodels object.\nmod_id: A character vector of model IDs indicating which model(s) to keep. These must match models$mod_gof$model_id.\nnew_name: NULL (default) or a character used to build the new model IDs."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#returns",
    "title": "Subset GHRmodels Objects",
    "section": "",
    "text": "A new GHRmodels object containing only the specified model(s)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#see-also",
    "title": "Subset GHRmodels Objects",
    "section": "",
    "text": "stack_models for combining GHRmodels objects, fit_models for fitting INLA models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/subset_models.Rd.html#examples",
    "title": "Subset GHRmodels Objects",
    "section": "",
    "text": "## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Extract a vector with the moded IDs of the 2 best fitting models by WAIC\nbest_waic &lt;- rank_models(\n  models = model_list,  # GHRmodels object containing model fit results\n  metric = \"waic\",      # Metric used to rank models (lower WAIC is better)\n  n = 2                 # Number of top-ranked models to return\n)\n\n# The output is a vector \nbest_waic\n\n# Subset those specific models and assign new IDs\nmodel_waic &lt;- subset_models(\n  model = model_list,\n  mod_id = best_waic,\n  new_name = \"best_waic\"\n)\n\n# Check output subset model names\nmodel_waic$mod_gof$model_id  \n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html",
    "title": "Dengue cases from the “São Paulo” state of Brazil",
    "section": "",
    "text": "The dengue_SP example data set reports the weekly number of notified dengue cases in the municipality of São Paulo together with climatic covariates. Data was sourced from Infodengue (see @source).\ndengue_SP\n\n\n\nA data frame with 678 rows and 8 columns:\n\ndate: First day of the week, in date format (“%d-%m-%Y”)\ngeocode: Unique ID code for São Paulo microregion\ncases: Number of notified dengue cases\nyear: Year 2000 - 2022\ntemp_med: Weekly average daily mean temperature\nprecip_tot: Weekly cumulative precipitation\nenso: El Niño-Southern Oscillation Index\npop: Number of inhabitants\n\n\n\n\nInfodengue API"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html#description",
    "title": "Dengue cases from the “São Paulo” state of Brazil",
    "section": "",
    "text": "The dengue_SP example data set reports the weekly number of notified dengue cases in the municipality of São Paulo together with climatic covariates. Data was sourced from Infodengue (see @source).\ndengue_SP"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html#format",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html#format",
    "title": "Dengue cases from the “São Paulo” state of Brazil",
    "section": "",
    "text": "A data frame with 678 rows and 8 columns:\n\ndate: First day of the week, in date format (“%d-%m-%Y”)\ngeocode: Unique ID code for São Paulo microregion\ncases: Number of notified dengue cases\nyear: Year 2000 - 2022\ntemp_med: Weekly average daily mean temperature\nprecip_tot: Weekly cumulative precipitation\nenso: El Niño-Southern Oscillation Index\npop: Number of inhabitants"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html#source",
    "href": "docs/GHRmodel/GHRmodel-reference/dengue_SP.Rd.html#source",
    "title": "Dengue cases from the “São Paulo” state of Brazil",
    "section": "",
    "text": "Infodengue API"
  },
  {
    "objectID": "docs/GHRpredict/GHRpredict.html",
    "href": "docs/GHRpredict/GHRpredict.html",
    "title": "GHRpredict",
    "section": "",
    "text": "Under construction."
  },
  {
    "objectID": "docs/data4health/data4health-vignette1.html",
    "href": "docs/data4health/data4health-vignette1.html",
    "title": "data4health tutorial",
    "section": "",
    "text": "Under construction."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html",
    "title": "Bivariate plot",
    "section": "",
    "text": "Plots a bivariate graph to visually assess associations. It will be a scatterplot if both variables are numeric and grouped boxplots if one of them is categorical.\nplot_bivariate(\n  data,\n  var,\n  area = NULL,\n  facet = FALSE,\n  free_x_scale = FALSE,\n  free_y_scale = FALSE,\n  title = NULL,\n  var_label = NULL,\n  legend = NULL,\n  palette = NULL\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Character vector of covariate names with length 2 (x, y). One of them can be a factor.\narea: Character, the name of the variable that identifies the different areal units or any other grouping of interest. If specified, results are grouped by this variable. Defaults to NULL (no grouping).\nfacet: If TRUE, plot each grouping in a different facet.\nfree_x_scale: If TRUE and facet=TRUE, the x-axis scale is free in each facet.\nfree_y_scale: If TRUE and facet=TRUE, the y-axis scale is free in each facet.\ntitle: Optional title of the plot.\nvar_label: A 2 character vector with a custom name for the variables.\nlegend: A character vector with a custom name for the legend.\npalette: GHR, RColorBrewer or colorspace palette (e.g. “Purp”). Single R colors in colors() or hex codes can be used when there is no grouping or facets are used. Use “-” before the palette name (e.g., “-Reds”) to reverse it. Defaults to a dark green when area is NULL or when facet is TRUE, otherwise defaults to the “IDE2” palette.\n\n\n\n\nA ggplot2 scatterplot or boxplot graph.\n\n\n\n# Load data\ndata(\"dengue_MS\")\n\n# Scatter (two numeric variables) - No grouping\nplot_bivariate(dengue_MS, \n               var = c(\"pop_density\", \"tmin\"), \n               palette = \"#d04a2d\")\n\n# Scatter (two numeric variables) - Grouping in the same graph\nplot_bivariate(dengue_MS, \n               var = c(\"pop_density\", \"tmin\"),\n               var_label = c(\"Pop. density\", \"Min temp.\"),\n               area = \"micro_code\")\n\n# Scatter  (two numeric variables) - Grouping in facets\nplot_bivariate(dengue_MS,\n               var = c(\"pop_density\", \"tmin\"),\n               var_label = c(\"Pop. density\", \"Min temp.\"),\n               area = \"micro_code\", facet = TRUE, \n               free_x_scale = TRUE)\n\n# Boxplots (one numeric, one categorical) - No grouping\nplot_bivariate(dengue_MS, \n               var = c(\"pop_density\", \"biome_name\"), \n               var_label = c(\"Pop. density\", \"Min temp.\"),\n               palette = \"royalblue\")\n\n# Boxplots (one numeric, one categorical) - Grouping\nplot_bivariate(dengue_MS, \n               var = c(\"biome_name\", \"tmin\"), \n               area = \"meso_code\",\n               palette = \"Accent\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#description",
    "title": "Bivariate plot",
    "section": "",
    "text": "Plots a bivariate graph to visually assess associations. It will be a scatterplot if both variables are numeric and grouped boxplots if one of them is categorical.\nplot_bivariate(\n  data,\n  var,\n  area = NULL,\n  facet = FALSE,\n  free_x_scale = FALSE,\n  free_y_scale = FALSE,\n  title = NULL,\n  var_label = NULL,\n  legend = NULL,\n  palette = NULL\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#arguments",
    "title": "Bivariate plot",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Character vector of covariate names with length 2 (x, y). One of them can be a factor.\narea: Character, the name of the variable that identifies the different areal units or any other grouping of interest. If specified, results are grouped by this variable. Defaults to NULL (no grouping).\nfacet: If TRUE, plot each grouping in a different facet.\nfree_x_scale: If TRUE and facet=TRUE, the x-axis scale is free in each facet.\nfree_y_scale: If TRUE and facet=TRUE, the y-axis scale is free in each facet.\ntitle: Optional title of the plot.\nvar_label: A 2 character vector with a custom name for the variables.\nlegend: A character vector with a custom name for the legend.\npalette: GHR, RColorBrewer or colorspace palette (e.g. “Purp”). Single R colors in colors() or hex codes can be used when there is no grouping or facets are used. Use “-” before the palette name (e.g., “-Reds”) to reverse it. Defaults to a dark green when area is NULL or when facet is TRUE, otherwise defaults to the “IDE2” palette."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#returns",
    "title": "Bivariate plot",
    "section": "",
    "text": "A ggplot2 scatterplot or boxplot graph."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_bivariate.Rd.html#examples",
    "title": "Bivariate plot",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\n\n# Scatter (two numeric variables) - No grouping\nplot_bivariate(dengue_MS, \n               var = c(\"pop_density\", \"tmin\"), \n               palette = \"#d04a2d\")\n\n# Scatter (two numeric variables) - Grouping in the same graph\nplot_bivariate(dengue_MS, \n               var = c(\"pop_density\", \"tmin\"),\n               var_label = c(\"Pop. density\", \"Min temp.\"),\n               area = \"micro_code\")\n\n# Scatter  (two numeric variables) - Grouping in facets\nplot_bivariate(dengue_MS,\n               var = c(\"pop_density\", \"tmin\"),\n               var_label = c(\"Pop. density\", \"Min temp.\"),\n               area = \"micro_code\", facet = TRUE, \n               free_x_scale = TRUE)\n\n# Boxplots (one numeric, one categorical) - No grouping\nplot_bivariate(dengue_MS, \n               var = c(\"pop_density\", \"biome_name\"), \n               var_label = c(\"Pop. density\", \"Min temp.\"),\n               palette = \"royalblue\")\n\n# Boxplots (one numeric, one categorical) - Grouping\nplot_bivariate(dengue_MS, \n               var = c(\"biome_name\", \"tmin\"), \n               area = \"meso_code\",\n               palette = \"Accent\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html",
    "title": "Combine plots",
    "section": "",
    "text": "Combines plots, each representing one variable, into a single plot.\nplot_combine(\n  plot_list,\n  combine_legend = FALSE,\n  combine_xaxis = FALSE,\n  ncol = 1,\n  align = \"v\",\n  ...,\n  ncol_l = 2,\n  nrow_l = NULL,\n  rel_widths_l = c(3, 1),\n  rel_heights_l = c(1, 1),\n  ncol_legend = 1\n)\n\n\n\n\nplot_list: A list of plots to be combined.\ncombine_legend: Logical. If TRUE, assumes the legend of all plots is the same as the legend of the first plot in plot_list and final plot shows only one instance of the common legend. Default is FALSE.\ncombine_xaxis: Logical. If TRUE, removes x axis labels from all but the last plot. Default is FALSE.\nncol: (from cowplot) Number of colums in the plot grid. Default is 1.\nalign: (from cowplot) Specifies how plots should be aligned Options are “none”, “hv” (align in both directions), “h”, and “v” (default).\n...: Additional arguments passed to cowplot::plot_grid.\nncol_l: When combine_legend = TRUE, number of colums in which to align plots and the common legend. Default is 2.\nnrow_l: When combine_legend = TRUE, number of rows in which to align plots and the common legend. Default is NULL.\nrel_widths_l: When combine_legend = TRUE, vector of widths in which to align plots and the common legend. Default is c(3, 1).\nrel_heights_l: When combine_legend = TRUE, vector of heights in which to align plots and the common legend. Default is c(1, 1).\nncol_legend: When combine_legend = TRUE, number of columns the legend should be distributed in. Default is one column.\n\n\n\n\nThis function takes any input from the cowplot::plot_grid function to customize the organization of the plots.\n\n\n\nA single (cow)plot including the provided multiple plots.\n\n\n\nplot_compare, plot_multiple\n\n\n\n# Load data\ndata(\"dengue_MS\")\n\n# Multiple time series plot\nplots &lt;- plot_multiple(\n  plot_function = plot_timeseries,\n  data = dengue_MS,\n  var = c(\"tmax\", \"tmin\", \"pdsi\"),\n  type = c(\"cov\", \"cov\", \"cov\"),\n  aggregate_space = \"meso_code\",\n  pop = \"population\",\n  var_label = c(\"Max Temp\", \"Min Temp\", \"PDSI\"),\n  time = \"date\",\n  area = \"micro_code\")\n\n# Combine them with a shared legend\nplot_combine(plot_list = plots, \n             ncol = 1,\n             align = \"v\",\n             combine_legend = TRUE,\n             combine_xaxis = TRUE,\n             rel_widths_l = c(7,1))"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#description",
    "title": "Combine plots",
    "section": "",
    "text": "Combines plots, each representing one variable, into a single plot.\nplot_combine(\n  plot_list,\n  combine_legend = FALSE,\n  combine_xaxis = FALSE,\n  ncol = 1,\n  align = \"v\",\n  ...,\n  ncol_l = 2,\n  nrow_l = NULL,\n  rel_widths_l = c(3, 1),\n  rel_heights_l = c(1, 1),\n  ncol_legend = 1\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#arguments",
    "title": "Combine plots",
    "section": "",
    "text": "plot_list: A list of plots to be combined.\ncombine_legend: Logical. If TRUE, assumes the legend of all plots is the same as the legend of the first plot in plot_list and final plot shows only one instance of the common legend. Default is FALSE.\ncombine_xaxis: Logical. If TRUE, removes x axis labels from all but the last plot. Default is FALSE.\nncol: (from cowplot) Number of colums in the plot grid. Default is 1.\nalign: (from cowplot) Specifies how plots should be aligned Options are “none”, “hv” (align in both directions), “h”, and “v” (default).\n...: Additional arguments passed to cowplot::plot_grid.\nncol_l: When combine_legend = TRUE, number of colums in which to align plots and the common legend. Default is 2.\nnrow_l: When combine_legend = TRUE, number of rows in which to align plots and the common legend. Default is NULL.\nrel_widths_l: When combine_legend = TRUE, vector of widths in which to align plots and the common legend. Default is c(3, 1).\nrel_heights_l: When combine_legend = TRUE, vector of heights in which to align plots and the common legend. Default is c(1, 1).\nncol_legend: When combine_legend = TRUE, number of columns the legend should be distributed in. Default is one column."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#details",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#details",
    "title": "Combine plots",
    "section": "",
    "text": "This function takes any input from the cowplot::plot_grid function to customize the organization of the plots."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#returns",
    "title": "Combine plots",
    "section": "",
    "text": "A single (cow)plot including the provided multiple plots."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#see-also",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#see-also",
    "title": "Combine plots",
    "section": "",
    "text": "plot_compare, plot_multiple"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_combine.Rd.html#examples",
    "title": "Combine plots",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\n\n# Multiple time series plot\nplots &lt;- plot_multiple(\n  plot_function = plot_timeseries,\n  data = dengue_MS,\n  var = c(\"tmax\", \"tmin\", \"pdsi\"),\n  type = c(\"cov\", \"cov\", \"cov\"),\n  aggregate_space = \"meso_code\",\n  pop = \"population\",\n  var_label = c(\"Max Temp\", \"Min Temp\", \"PDSI\"),\n  time = \"date\",\n  area = \"micro_code\")\n\n# Combine them with a shared legend\nplot_combine(plot_list = plots, \n             ncol = 1,\n             align = \"v\",\n             combine_legend = TRUE,\n             combine_xaxis = TRUE,\n             rel_widths_l = c(7,1))"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html",
    "title": "Compare plots",
    "section": "",
    "text": "Combines multiple plots of several variables in a single graph.\nplot_compare(plot_function, data, var, type, ...)\n\n\n\n\nplot_function: Indicates which of the plot types to use. Options are: ‘plot_timeseries’, ‘plot_heatmap’, ‘plot_seasonality’, ‘plot_map’.\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Character vector with the name of the variables to be plotted.\ntype: Character vector with the same length of var that specifies the types of variable for each element in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\n...: Additional arguments for plot_multiple, plot_combine, and the selected plot_function.\n\n\n\n\nThis function takes any input arguments from plot_combine() and plot_multiple() to customize the plots and their organization in a grid.\n\n\n\nA single (cow)plot containing plots of several variables.\n\n\n\nplot_multiple, plot_combine\n\n\n\n# Load data\nlibrary(\"sf\")\ndata(\"dengue_MS\")\ndata(\"map_MS\")\n\nplot_compare(\n  plot_function = plot_timeseries,\n  data = dengue_MS,\n  var = c(\"dengue_cases\",  \"pdsi\"),\n  type = c(\"inc\", \"cov\"),\n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  var_label = c(\"Dengue inc\", \"PDSI\"), \n  combine_legend = TRUE, \n  ncol_legend = 1,\n  ncol = 1, \n  align = \"h\")\n\n# Comparing seasonality plots\nplot_compare(\n  plot_function = plot_seasonality,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"pdsi\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  aggregate_space = \"region_code\",\n  pt = 100,\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Min Temp\"), \n  ncol_legend = 1,\n  combine_legend = TRUE)\n\n# Comparing heatmaps plots\nplot_compare(\n  plot_function = plot_heatmap,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"pdsi\"),\n  type = c(\"inc\", \"cov\"),   \n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  var_label = c(\"Dengue Cases\", \"Min Temp\"), \n  palette = c(\"Reds\", \"Blues\"),\n  ncol_legend = 1,\n  combine_xaxis = TRUE)\n\n# Comparing map plots\nplot_compare(\n  plot_function = plot_map,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"tmax\"),\n  type = c(\"inc\", \"cov\"),  \n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  var_label= c(\"Dengue Incidence\", \"Max Temperature\"), \n  palette = c(\"Reds\", \"Blues\"),\n  map = map_MS,        \n  map_area = \"code\", \n  aggregate_time = \"all\",\n  ncol_legend = 1,\n  combine_xaxis =TRUE)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#description",
    "title": "Compare plots",
    "section": "",
    "text": "Combines multiple plots of several variables in a single graph.\nplot_compare(plot_function, data, var, type, ...)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#arguments",
    "title": "Compare plots",
    "section": "",
    "text": "plot_function: Indicates which of the plot types to use. Options are: ‘plot_timeseries’, ‘plot_heatmap’, ‘plot_seasonality’, ‘plot_map’.\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Character vector with the name of the variables to be plotted.\ntype: Character vector with the same length of var that specifies the types of variable for each element in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\n...: Additional arguments for plot_multiple, plot_combine, and the selected plot_function."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#details",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#details",
    "title": "Compare plots",
    "section": "",
    "text": "This function takes any input arguments from plot_combine() and plot_multiple() to customize the plots and their organization in a grid."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#returns",
    "title": "Compare plots",
    "section": "",
    "text": "A single (cow)plot containing plots of several variables."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#see-also",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#see-also",
    "title": "Compare plots",
    "section": "",
    "text": "plot_multiple, plot_combine"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_compare.Rd.html#examples",
    "title": "Compare plots",
    "section": "",
    "text": "# Load data\nlibrary(\"sf\")\ndata(\"dengue_MS\")\ndata(\"map_MS\")\n\nplot_compare(\n  plot_function = plot_timeseries,\n  data = dengue_MS,\n  var = c(\"dengue_cases\",  \"pdsi\"),\n  type = c(\"inc\", \"cov\"),\n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  var_label = c(\"Dengue inc\", \"PDSI\"), \n  combine_legend = TRUE, \n  ncol_legend = 1,\n  ncol = 1, \n  align = \"h\")\n\n# Comparing seasonality plots\nplot_compare(\n  plot_function = plot_seasonality,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"pdsi\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  aggregate_space = \"region_code\",\n  pt = 100,\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Min Temp\"), \n  ncol_legend = 1,\n  combine_legend = TRUE)\n\n# Comparing heatmaps plots\nplot_compare(\n  plot_function = plot_heatmap,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"pdsi\"),\n  type = c(\"inc\", \"cov\"),   \n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  var_label = c(\"Dengue Cases\", \"Min Temp\"), \n  palette = c(\"Reds\", \"Blues\"),\n  ncol_legend = 1,\n  combine_xaxis = TRUE)\n\n# Comparing map plots\nplot_compare(\n  plot_function = plot_map,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"tmax\"),\n  type = c(\"inc\", \"cov\"),  \n  pop = \"population\",\n  time = \"date\",\n  area = \"micro_code\",\n  var_label= c(\"Dengue Incidence\", \"Max Temperature\"), \n  palette = c(\"Reds\", \"Blues\"),\n  map = map_MS,        \n  map_area = \"code\", \n  aggregate_time = \"all\",\n  ncol_legend = 1,\n  combine_xaxis =TRUE)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html",
    "title": "Time series plot of two variables in two different axes",
    "section": "",
    "text": "Plots time series of two covariates, case counts, or incidence rates in two different axes.\nplot_timeseries2(\n  data,\n  var,\n  time,\n  type = c(\"cov\", \"cov\"),\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = NULL,\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  align = \"min\",\n  title = NULL,\n  var_label = NULL,\n  legend = \"Variable\",\n  ylab = NULL,\n  xlab = NULL,\n  free_y_scale = FALSE,\n  palette = c(\"#168c81\", \"#B98AFB\"),\n  alpha = 0.9\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: A character vector of length 2 (left axis, right axis) identifying the variables to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: A character vector of length 2 (left axis, right axis) that specifies the types of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Numerical only used for type='inc'. It represents the scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\nalign: Options to align the two plots. Defaults to “min”, which forces the minimum of the two variables to be aligned. Other options include “mean” and “median”.\ntitle: Optional title of the plot.\nvar_label: A character vector of length 2 (left axis, right axis) with custom names for the case or covariate variable.\nlegend: Character with a custom name for the legend.\nylab: A character vector of length 2 (left, right) for the y-axes.\nxlab: Label for the x-axis.\nfree_y_scale: Logical, default FALSE. Allows different scales in the y_axis when facets are used.\npalette: A character vector of length 2 (left axis, right axis) indicating the colours (R or hex codes) to use for each of the two variables).\nalpha: Numerical between 0 and 1 determining the transparency of the lines.\n\n\n\n\nA ggplot2 time series plot.\n\n\n\nplot_timeseries for single axis time series plots.\n\n\n\n# Load data\ndata(\"dengue_MS\")\ndata(\"dengue_SP\")\n\n# Plotting two covariates with temporal aggregation, align using the mean\nplot_timeseries2(dengue_SP,\n                 var = c(\"temp_med\", \"precip_tot\"),\n                 time = \"date\",\n                 align = \"mean\",\n                 aggregate_time = \"month\")\n\n# Plotting case incidence and a covariate with temporal aggregation \n# and customized colours and labels\nplot_timeseries2(dengue_SP,\n                 var = c(\"cases\", \"precip_tot\"),\n                 type = c(\"inc\", \"cov\"),\n                 var_label = c(\"Incidence\", \"Precipitation\"),\n                 title = \"Precipitation and dengue incidence in Sao Paulo\",\n                 time = \"date\",\n                 pop = \"pop\",\n                 aggregate_time = \"month\",\n                 palette = c(\"darkgreen\", \"royalblue\"),\n                 alpha = 0.8)\n                 \n# Plotting case incidence and a covariate with spatial aggregation\nplot_timeseries2(dengue_MS,\n                 var = c(\"dengue_cases\", \"pdsi\"),\n                 type = c(\"inc\", \"cov\"),\n                 pop = \"population\",\n                 time = \"date\",\n                 area = \"micro_code\",\n                 aggregate_space = \"meso_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#description",
    "title": "Time series plot of two variables in two different axes",
    "section": "",
    "text": "Plots time series of two covariates, case counts, or incidence rates in two different axes.\nplot_timeseries2(\n  data,\n  var,\n  time,\n  type = c(\"cov\", \"cov\"),\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = NULL,\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  align = \"min\",\n  title = NULL,\n  var_label = NULL,\n  legend = \"Variable\",\n  ylab = NULL,\n  xlab = NULL,\n  free_y_scale = FALSE,\n  palette = c(\"#168c81\", \"#B98AFB\"),\n  alpha = 0.9\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#arguments",
    "title": "Time series plot of two variables in two different axes",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: A character vector of length 2 (left axis, right axis) identifying the variables to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: A character vector of length 2 (left axis, right axis) that specifies the types of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Numerical only used for type='inc'. It represents the scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\nalign: Options to align the two plots. Defaults to “min”, which forces the minimum of the two variables to be aligned. Other options include “mean” and “median”.\ntitle: Optional title of the plot.\nvar_label: A character vector of length 2 (left axis, right axis) with custom names for the case or covariate variable.\nlegend: Character with a custom name for the legend.\nylab: A character vector of length 2 (left, right) for the y-axes.\nxlab: Label for the x-axis.\nfree_y_scale: Logical, default FALSE. Allows different scales in the y_axis when facets are used.\npalette: A character vector of length 2 (left axis, right axis) indicating the colours (R or hex codes) to use for each of the two variables).\nalpha: Numerical between 0 and 1 determining the transparency of the lines."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#returns",
    "title": "Time series plot of two variables in two different axes",
    "section": "",
    "text": "A ggplot2 time series plot."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#see-also",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#see-also",
    "title": "Time series plot of two variables in two different axes",
    "section": "",
    "text": "plot_timeseries for single axis time series plots."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries2.Rd.html#examples",
    "title": "Time series plot of two variables in two different axes",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\ndata(\"dengue_SP\")\n\n# Plotting two covariates with temporal aggregation, align using the mean\nplot_timeseries2(dengue_SP,\n                 var = c(\"temp_med\", \"precip_tot\"),\n                 time = \"date\",\n                 align = \"mean\",\n                 aggregate_time = \"month\")\n\n# Plotting case incidence and a covariate with temporal aggregation \n# and customized colours and labels\nplot_timeseries2(dengue_SP,\n                 var = c(\"cases\", \"precip_tot\"),\n                 type = c(\"inc\", \"cov\"),\n                 var_label = c(\"Incidence\", \"Precipitation\"),\n                 title = \"Precipitation and dengue incidence in Sao Paulo\",\n                 time = \"date\",\n                 pop = \"pop\",\n                 aggregate_time = \"month\",\n                 palette = c(\"darkgreen\", \"royalblue\"),\n                 alpha = 0.8)\n                 \n# Plotting case incidence and a covariate with spatial aggregation\nplot_timeseries2(dengue_MS,\n                 var = c(\"dengue_cases\", \"pdsi\"),\n                 type = c(\"inc\", \"cov\"),\n                 pop = \"population\",\n                 time = \"date\",\n                 area = \"micro_code\",\n                 aggregate_space = \"meso_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html",
    "title": "Time series plot",
    "section": "",
    "text": "Plots time series of covariates, case counts, or incidence rates.\nplot_timeseries(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = NULL,\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  facet = FALSE,\n  highlight = NULL,\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  legend = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  free_y_scale = FALSE,\n  palette = NULL\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Numerical only used for type='inc'. It represents the scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\nfacet: If TRUE a separate time series for each space unit is plotted in different facets.\nhighlight: ID of the area to be highlighted. Using this option will only color the selected spatial unit and set all the rest to grey.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the y-axis for better visualization. Useful options include “log10p1” log10(x+1) useful for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\nlegend: Character with a custom name for the legend.\nylab: Label for the y-axis.\nxlab: Label for the x-axis.\nfree_y_scale: Logical, default FALSE. Allows different scales in the y_axis when facets are used.\npalette: GHR, RColorBrewer or colorspace palette (e.g. “Purp”). Single R colors in colors() or hex codes can be used for single time series or facets. Use “-” before the palette name (e.g., “-Reds”) to reverse it. Defaults to a dark green when area is NULL, when facet is TRUE or when highlight is used (i.e. single time series), otherwise defaults to the “IDE2” palette.\n\n\n\n\nA ggplot2 time series plot.\n\n\n\nplot_timeseries2 for dual-axis time series plots.\n\n\n\n# Load data\ndata(\"dengue_MS\")\n\n# Plotting a covariate, all areas in a single graph\nplot_timeseries(dengue_MS,\n                var = \"tmin\",\n                time = \"date\",          \n                type = \"cov\",\n                area = \"micro_code\",   \n                title = \"Minimun Temperature\") \n                \n# Plotting a covariate with space aggregation and different facets\nplot_timeseries(dengue_MS,\n                var = \"tmin\",\n                time = \"date\",\n                type = \"cov\",\n                area = \"micro_code\",\n                aggregate_space = \"meso_code\",\n                aggregate_space_fun = \"mean\",\n                facet = TRUE,           \n                var_label= \"Minimum Temperature\",\n                palette = \"violetred\")\n                \n# Plotting counts, highlight a single area \nplot_timeseries(dengue_MS,\n                var = \"dengue_cases\", \n                time = \"date\",         \n                type = \"counts\",\n                pop = \"population\",\n                area = \"micro_code\",  \n                title= \"Dengue cases\",\n                highlight = \"50001\")\n\n# Plot disease counts (log scale) with temporal and spatial aggregation             \nplot_timeseries(dengue_MS,\n                var = \"dengue_cases\", \n                time = \"date\",      \n                type = \"counts\",\n                area = \"micro_code\",   \n                aggregate_space = \"meso_code\",\n                aggregate_time = \"year\",\n                title = \"Yearly Cases\",\n                transform = \"log10\") \n               \n# Plot incidence for 1,000 people with a Brewer palette and log y axis\nplot_timeseries(dengue_MS,\n                var = \"dengue_cases\",\n                time = \"date\",          \n                type = \"inc\",\n                pop = \"population\",\n                area = \"micro_code\",  \n                pt = 1000,\n                transform = \"log10p1\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#description",
    "title": "Time series plot",
    "section": "",
    "text": "Plots time series of covariates, case counts, or incidence rates.\nplot_timeseries(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = NULL,\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  facet = FALSE,\n  highlight = NULL,\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  legend = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  free_y_scale = FALSE,\n  palette = NULL\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#arguments",
    "title": "Time series plot",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Numerical only used for type='inc'. It represents the scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\nfacet: If TRUE a separate time series for each space unit is plotted in different facets.\nhighlight: ID of the area to be highlighted. Using this option will only color the selected spatial unit and set all the rest to grey.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the y-axis for better visualization. Useful options include “log10p1” log10(x+1) useful for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\nlegend: Character with a custom name for the legend.\nylab: Label for the y-axis.\nxlab: Label for the x-axis.\nfree_y_scale: Logical, default FALSE. Allows different scales in the y_axis when facets are used.\npalette: GHR, RColorBrewer or colorspace palette (e.g. “Purp”). Single R colors in colors() or hex codes can be used for single time series or facets. Use “-” before the palette name (e.g., “-Reds”) to reverse it. Defaults to a dark green when area is NULL, when facet is TRUE or when highlight is used (i.e. single time series), otherwise defaults to the “IDE2” palette."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#returns",
    "title": "Time series plot",
    "section": "",
    "text": "A ggplot2 time series plot."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#see-also",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#see-also",
    "title": "Time series plot",
    "section": "",
    "text": "plot_timeseries2 for dual-axis time series plots."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_timeseries.Rd.html#examples",
    "title": "Time series plot",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\n\n# Plotting a covariate, all areas in a single graph\nplot_timeseries(dengue_MS,\n                var = \"tmin\",\n                time = \"date\",          \n                type = \"cov\",\n                area = \"micro_code\",   \n                title = \"Minimun Temperature\") \n                \n# Plotting a covariate with space aggregation and different facets\nplot_timeseries(dengue_MS,\n                var = \"tmin\",\n                time = \"date\",\n                type = \"cov\",\n                area = \"micro_code\",\n                aggregate_space = \"meso_code\",\n                aggregate_space_fun = \"mean\",\n                facet = TRUE,           \n                var_label= \"Minimum Temperature\",\n                palette = \"violetred\")\n                \n# Plotting counts, highlight a single area \nplot_timeseries(dengue_MS,\n                var = \"dengue_cases\", \n                time = \"date\",         \n                type = \"counts\",\n                pop = \"population\",\n                area = \"micro_code\",  \n                title= \"Dengue cases\",\n                highlight = \"50001\")\n\n# Plot disease counts (log scale) with temporal and spatial aggregation             \nplot_timeseries(dengue_MS,\n                var = \"dengue_cases\", \n                time = \"date\",      \n                type = \"counts\",\n                area = \"micro_code\",   \n                aggregate_space = \"meso_code\",\n                aggregate_time = \"year\",\n                title = \"Yearly Cases\",\n                transform = \"log10\") \n               \n# Plot incidence for 1,000 people with a Brewer palette and log y axis\nplot_timeseries(dengue_MS,\n                var = \"dengue_cases\",\n                time = \"date\",          \n                type = \"inc\",\n                pop = \"population\",\n                area = \"micro_code\",  \n                pt = 1000,\n                transform = \"log10p1\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html",
    "title": "Seasonality plot",
    "section": "",
    "text": "Plots yearly time series of covariates, case counts, or incidence rates to explore seasonality patterns.\nplot_seasonality(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = \"month\",\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  free_y_scale = FALSE,\n  palette = \"IDE1\"\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the y-axis for better visualization. Useful options include “log10p1” log10(x+1) for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\nylab: Label for the y-axis.\nxlab: Label for the x-axis.\nfree_y_scale: If TRUE, the y-axis scale is free in each facet.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\n\n\n\n\nA ggplot2 seasonality plot.\n\n\n\n# Load data\ndata(\"dengue_MS\")\n\n# Seasonality plot of a covariate with space aggregation\nplot_seasonality(dengue_MS,\n                 var = \"tmax\",\n                 time = \"date\",\n                 var_label = \"Max temp.\",\n                 type = \"cov\",\n                 area = \"micro_code\",\n                 aggregate_space = \"region_code\") \n\n# Plot case counts (log scale) with space aggregation\n plot_seasonality(dengue_MS,\n                  var = \"dengue_cases\",\n                  time = \"date\",  \n                  type = \"counts\",\n                  area = \"micro_code\",\n                  aggregate_space = \"meso_code\",\n                  transform = \"log10p1\",\n                  var_label = \"Monthly Dengue Cases\", \n                  xlab = \"Month\", \n                  ylab = \"Number of cases\",\n                  free_y_scale = TRUE)\n                  \n# Seasonality plot of incidence\nplot_seasonality(dengue_MS,\n                 var = \"dengue_cases\",\n                 time = \"date\",    \n                 type = \"inc\",\n                 pop = \"population\",\n                 area = \"micro_code\",\n                 pt = 1000, \n                 title = \"Monthly Dengue Incidence\",\n                 palette = \"Reds\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#description",
    "title": "Seasonality plot",
    "section": "",
    "text": "Plots yearly time series of covariates, case counts, or incidence rates to explore seasonality patterns.\nplot_seasonality(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = \"month\",\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  free_y_scale = FALSE,\n  palette = \"IDE1\"\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#arguments",
    "title": "Seasonality plot",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the y-axis for better visualization. Useful options include “log10p1” log10(x+1) for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\nylab: Label for the y-axis.\nxlab: Label for the x-axis.\nfree_y_scale: If TRUE, the y-axis scale is free in each facet.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#returns",
    "title": "Seasonality plot",
    "section": "",
    "text": "A ggplot2 seasonality plot."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_seasonality.Rd.html#examples",
    "title": "Seasonality plot",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\n\n# Seasonality plot of a covariate with space aggregation\nplot_seasonality(dengue_MS,\n                 var = \"tmax\",\n                 time = \"date\",\n                 var_label = \"Max temp.\",\n                 type = \"cov\",\n                 area = \"micro_code\",\n                 aggregate_space = \"region_code\") \n\n# Plot case counts (log scale) with space aggregation\n plot_seasonality(dengue_MS,\n                  var = \"dengue_cases\",\n                  time = \"date\",  \n                  type = \"counts\",\n                  area = \"micro_code\",\n                  aggregate_space = \"meso_code\",\n                  transform = \"log10p1\",\n                  var_label = \"Monthly Dengue Cases\", \n                  xlab = \"Month\", \n                  ylab = \"Number of cases\",\n                  free_y_scale = TRUE)\n                  \n# Seasonality plot of incidence\nplot_seasonality(dengue_MS,\n                 var = \"dengue_cases\",\n                 time = \"date\",    \n                 type = \"inc\",\n                 pop = \"population\",\n                 area = \"micro_code\",\n                 pt = 1000, \n                 title = \"Monthly Dengue Incidence\",\n                 palette = \"Reds\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html",
    "title": "Aggregate cases",
    "section": "",
    "text": "Aggregates a data frame containing disease cases in space and/or time.\naggregate_cases(\n  data = NULL,\n  cases = NULL,\n  pop = NULL,\n  time = NULL,\n  area = NULL,\n  pt = 1e+05,\n  aggregate_space = NULL,\n  aggregate_time = NULL\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) incident cases for one or multiple areas.\ncases: Name of the variable that identifies the cases.\npop: Name of the variable that identifies the population.\ntime: Name of the variable that identifies the temporal dimension. The values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\npt: Scale of the person-time (default 100,000) for incidence rates.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\n\n\n\n\nA data frame with the aggregated cases."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html#description",
    "title": "Aggregate cases",
    "section": "",
    "text": "Aggregates a data frame containing disease cases in space and/or time.\naggregate_cases(\n  data = NULL,\n  cases = NULL,\n  pop = NULL,\n  time = NULL,\n  area = NULL,\n  pt = 1e+05,\n  aggregate_space = NULL,\n  aggregate_time = NULL\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html#arguments",
    "title": "Aggregate cases",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) incident cases for one or multiple areas.\ncases: Name of the variable that identifies the cases.\npop: Name of the variable that identifies the population.\ntime: Name of the variable that identifies the temporal dimension. The values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\npt: Scale of the person-time (default 100,000) for incidence rates.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cases.Rd.html#returns",
    "title": "Aggregate cases",
    "section": "",
    "text": "A data frame with the aggregated cases."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html",
    "title": "Generate GHR color palettes",
    "section": "",
    "text": "Generates color palettes including custom, ColorBrewer and colorspace palettes.\nCreates a visualization of all custom GHR palettes.\nGHR_palette(palette, ncols = 30)\n\nGHR_palettes()\n\n\n\n\npalette: Name of the GHR, RcolorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it. A vector of custom colors is also possible.\nncols: Number of colors to sample.\n\n\n\n\nSee all available options by running GHR_palettes(), RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE).\n\n\n\nGHR_palette() returns the function that generates the color palette and the attribute ‘na_color’.\nGHR_palettes() returns a plot with the custom GHR palettes.\n\n\n\nGHR_palette(\"IDE1\", 5)(5)\n\nGHR_palettes()"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#description",
    "title": "Generate GHR color palettes",
    "section": "",
    "text": "Generates color palettes including custom, ColorBrewer and colorspace palettes.\nCreates a visualization of all custom GHR palettes.\nGHR_palette(palette, ncols = 30)\n\nGHR_palettes()"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#arguments",
    "title": "Generate GHR color palettes",
    "section": "",
    "text": "palette: Name of the GHR, RcolorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it. A vector of custom colors is also possible.\nncols: Number of colors to sample."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#details",
    "href": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#details",
    "title": "Generate GHR color palettes",
    "section": "",
    "text": "See all available options by running GHR_palettes(), RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE)."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#returns",
    "title": "Generate GHR color palettes",
    "section": "",
    "text": "GHR_palette() returns the function that generates the color palette and the attribute ‘na_color’.\nGHR_palettes() returns a plot with the custom GHR palettes."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/GHR_palette.Rd.html#examples",
    "title": "Generate GHR color palettes",
    "section": "",
    "text": "GHR_palette(\"IDE1\", 5)(5)\n\nGHR_palettes()"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html",
    "title": "Dengue cases in Sao Paulo",
    "section": "",
    "text": "Data frame containing the weekly number of notified dengue cases in the municipality of Sao Paulo, as well as a set of climatic covariates.\ndata(dengue_SP)\n\n\n\nA data frame with 678 rows and 8 columns:\n\ndate: First day of the week in date format.\ngeocode: Unique ID code for Sao Paulo microregion.\ncases: Number of notified dengue cases.\nyear: Year (2010 - 2022).\ntemp_med: Weekly average daily mean temperature.\nprecip_tot: Weekly cumulative precipitation.\nenso: El Niño-Southern Oscillation index.\npop: Number of inhabitants.\n\n\n\n\nhttps://info.dengue.mat.br/services/api"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html#description",
    "title": "Dengue cases in Sao Paulo",
    "section": "",
    "text": "Data frame containing the weekly number of notified dengue cases in the municipality of Sao Paulo, as well as a set of climatic covariates.\ndata(dengue_SP)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html#format",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html#format",
    "title": "Dengue cases in Sao Paulo",
    "section": "",
    "text": "A data frame with 678 rows and 8 columns:\n\ndate: First day of the week in date format.\ngeocode: Unique ID code for Sao Paulo microregion.\ncases: Number of notified dengue cases.\nyear: Year (2010 - 2022).\ntemp_med: Weekly average daily mean temperature.\nprecip_tot: Weekly cumulative precipitation.\nenso: El Niño-Southern Oscillation index.\npop: Number of inhabitants."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html#source",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_SP.Rd.html#source",
    "title": "Dengue cases in Sao Paulo",
    "section": "",
    "text": "https://info.dengue.mat.br/services/api"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-index.html",
    "href": "docs/GHRexplore/GHRexplore-index.html",
    "title": "GHRexplore reference",
    "section": "",
    "text": "GHR_palette: Generates color palettes including custom, ColorBrewer and colorspace palettes.\nGHRexplore-package: A collection of commonly used visualizations of temporal and spatio-temporal health data including case counts, incidence rates, and covariates.\naggregate_cases: Aggregates a data frame containing disease cases in space and/or time.\naggregate_cov: Aggregates a data frame containing a covariate of interest in space and/or time.\ndengue_MS: Monthly number of notified dengue cases by municipality in the Mato Grosso do Sul state of Brazil and a set of spatial and spatio-temporal covariates.\ndengue_SP: Data frame containing the weekly number of notified dengue cases in the municipality of Sao Paulo , as well as a set of climatic covariates.\nmap_MS: Administrative boundaries (polygon geometries) of the 11 municipalities in Mato Grosso do Sul (Brazil) to be used with the dengue_MS data set.\nplot_bivariate: Plots a bivariate graph to visually assess associations.\nplot_combine: Combines plots, each representing one variable, into a single plot.\nplot_compare: Combines multiple plots of several variables in a single graph.\nplot_correlation: Plots a correlation matrix of a series of variables.\nplot_heatmap: Plots temporal heatmaps of covariates, case counts, or incidence rates.\nplot_map: Plots a choropleth map of covariates, case counts, or incidence rates.\nplot_multiple: Produces a list of multiple plots of the same type, each representing one variable.\nplot_seasonality: Plots yearly time series of covariates, case counts, or incidence rates to explore seasonality patterns.\nplot_timeseries: Plots time series of covariates, case counts, or incidence rates.\nplot_timeseries2: Plots time series of two covariates, case counts, or incidence rates in two different axes."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#data-requirements",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#data-requirements",
    "title": "Introduction to GHRexplore",
    "section": "Data requirements",
    "text": "Data requirements\nThe data must be a long-format data frame containing a regularly spaced time series (e.g., daily, weekly, monthly) of a single or several spatial units. In this data frame, the time and optional space identifiers must be included as columns.\nAs an example, we can have a look at the dengue_MS dataset included in the package, which includes data on dengue cases from the Mato Grosso do Sul state in Brazil as well as a set of relevant covariates.\ndata(\"dengue_MS\")\nglimpse(dengue_MS)\n#&gt; Rows: 2,640\n#&gt; Columns: 27\n#&gt; $ micro_code      &lt;dbl&gt; 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009, 50010, 50011, 50001, 50002, 50003, 50004, …\n#&gt; $ micro_name      &lt;chr&gt; \"Baixo Pantanal\", \"Aquidauana\", \"Alto Taquari\", \"Campo Grande\", \"Cassilândia\", \"Paranaíba\", \"Três Lagoas\"…\n#&gt; $ micro_name_ibge &lt;chr&gt; \"BAIXO PANTANAL\", \"AQUIDAUANA\", \"ALTO TAQUARI\", \"CAMPO GRANDE\", \"CASSILÂNDIA\", \"PARANAÍBA\", \"TRÊS LAGOAS\"…\n#&gt; $ meso_code       &lt;dbl&gt; 5001, 5001, 5002, 5002, 5003, 5003, 5003, 5003, 5004, 5004, 5004, 5001, 5001, 5002, 5002, 5003, 5003, 500…\n#&gt; $ meso_name       &lt;chr&gt; \"Pantanais Sul Mato-Grossense\", \"Pantanais Sul Mato-Grossense\", \"Centro Norte De Mato Grosso Do Sul\", \"Ce…\n#&gt; $ state_code      &lt;dbl&gt; 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 5…\n#&gt; $ state_name      &lt;chr&gt; \"Mato Grosso Do Sul\", \"Mato Grosso Do Sul\", \"Mato Grosso Do Sul\", \"Mato Grosso Do Sul\", \"Mato Grosso Do S…\n#&gt; $ region_code     &lt;dbl&gt; 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, …\n#&gt; $ region_name     &lt;chr&gt; \"Centre-West\", \"Centre-West\", \"Centre-West\", \"Centre-West\", \"Centre-West\", \"Centre-West\", \"Centre-West\", …\n#&gt; $ biome_code      &lt;dbl&gt; 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 6, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 6, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 6, 3, 3, …\n#&gt; $ biome_name      &lt;chr&gt; \"Pantanal\", \"Pantanal\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cer…\n#&gt; $ ecozone_code    &lt;dbl&gt; 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 8, 3, 3, …\n#&gt; $ ecozone_name    &lt;chr&gt; \"Pantanal\", \"Pantanal\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cerrado\", \"Cer…\n#&gt; $ main_climate    &lt;chr&gt; \"AW\", \"AM\", \"AW\", \"AM\", \"AM\", \"AW\", \"AM\", \"AW\", \"AF\", \"CFA\", \"CFA\", \"AW\", \"AM\", \"AW\", \"AM\", \"AM\", \"AW\", \"…\n#&gt; $ month           &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, …\n#&gt; $ year            &lt;dbl&gt; 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 200…\n#&gt; $ time            &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, …\n#&gt; $ dengue_cases    &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ population      &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ pop_density     &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ tmax            &lt;dbl&gt; 34.28429, 33.15394, 32.31370, 31.23787, 31.19907, 32.12062, 31.67418, 31.42584, 33.35522, 31.53561, 31.59…\n#&gt; $ tmin            &lt;dbl&gt; 24.00583, 23.43257, 22.61425, 21.82709, 21.29000, 21.85358, 22.03971, 21.71142, 23.22608, 21.63477, 21.51…\n#&gt; $ pdsi            &lt;dbl&gt; -1.2329962, -1.8564967, -0.7201829, -2.3979688, -0.2056521, -1.5016941, -2.4826837, -3.2662439, -3.053628…\n#&gt; $ urban           &lt;dbl&gt; 88.31, 72.36, 84.51, 94.71, 87.29, 85.58, 84.16, 78.50, 78.59, 81.81, 73.65, 88.31, 72.36, 84.51, 94.71, …\n#&gt; $ water_network   &lt;dbl&gt; 88.78, 79.59, 84.29, 88.13, 86.48, 65.80, 83.69, 81.68, 80.51, 77.45, 76.66, 88.78, 79.59, 84.29, 88.13, …\n#&gt; $ water_shortage  &lt;dbl&gt; 0.0000, 0.1528, 0.0437, 0.1855, 0.3201, 0.1921, 0.0524, 0.2444, 0.1247, 0.2095, 0.1419, 0.0000, 0.1528, 0…\n#&gt; $ date            &lt;date&gt; 2000-01-01, 2000-01-01, 2000-01-01, 2000-01-01, 2000-01-01, 2000-01-01, 2000-01-01, 2000-01-01, 2000-01-…\nIn this data frame, the date column contains the temporal identifier (in this case, we have monthly data where the variable date represents the first day of the month) and the spatial unit identifier is micro_code.\nSince we have data for several spatial units, it is useful to have the polygon geometries of the areas (e.g., a geopackage, shapefile o geojson file), loaded as an sf object, in order to plot cartographic representations. The sf object must also contain the area unit identifier to be able to link the geometries with the data frame.\nFor the dengue_MS, the geometries are already included in the package in the map_MS object:\ndata(\"map_MS\")\nglimpse(map_MS)\n#&gt; Rows: 11\n#&gt; Columns: 2\n#&gt; $ code     &lt;dbl&gt; 50001, 50002, 50003, 50004, 50005, 50006, 50007, 50008, 50009, 50010, 50011\n#&gt; $ geometry &lt;MULTIPOLYGON [°]&gt; MULTIPOLYGON (((-55.60618 -..., MULTIPOLYGON (((-55.39862 -..., MULTIPOLYGON (((-53.68353 -..., MULTIPOLYGON (((…\nIn map_MS, the code variable corresponds to the micro_code area identifier in the dengue_MS object.\n\n💡 Tip: If you don’t have geometries for your data, a good place to look for them is GADM, natural earth, or GeoBoundaries."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#covariates-case-counts-and-incidence-rates",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#covariates-case-counts-and-incidence-rates",
    "title": "Introduction to GHRexplore",
    "section": "Covariates, case counts, and incidence rates",
    "text": "Covariates, case counts, and incidence rates\nIn all GHRexplore functions, the column name of the variable to be plotted needs to be specified with the var argument. Plotting functions behave differently depending on the type of data being plotted as defined by the type argument: covariates (type='cov'), case counts (type='counts'), and incidence rates (type='inc'). Several examples for each type are provided in the following sections.\nTo plot incidence rates, the column with the disease counts must be used as var and the population must be also supplied as the pop argument. By default, rates are computed per 100,000 persons, but this number can be changed using the pt argument."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#spatial-and-temporal-aggregations",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#spatial-and-temporal-aggregations",
    "title": "Introduction to GHRexplore",
    "section": "Spatial and temporal aggregations",
    "text": "Spatial and temporal aggregations\nMost GHRexplore functions support temporal and spatial aggregations from finer to coarser resolution. For example, you can aggregate daily to weekly data, or aggregate small regions to larger regions.\nTemporal and spatial aggregations are performed using the arguments aggregate_time and aggregate_space, respectively. For covariates (type='cov'), the aggregation function can be specified using aggregate_space_fun and aggregate_time_fun (options include mean (default), median, and sum). For case counts and incidence, the aggregation function is fixed to be the sum of cases."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#color-palettes",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#color-palettes",
    "title": "Introduction to GHRexplore",
    "section": "Color palettes",
    "text": "Color palettes\nIn GHRexplore, color is controlled by the palette argument. We included a few in-house palettes that are used as defaults depending on the plot type:\nGHR_palettes()\n\nIn addition to these, all color palettes included in the packages RColorBrewer and colorspace can also be used. All available options can be checked by running RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE).\nAs a few examples, the ‘Blues’ palette can be useful when plotting precipitation-related variables, ‘Greens’ when plotting vegetation-related variables, or ‘Blue-Red’ when displaying temperature. When a single color is needed, a color in colors() or a hex code can also be specified. In addition, the user can provide custom palettes using a vector of hex codes to the palette argument.\n\n💡 Tip: Palettes can be reversed by preceding them with a minus sign, e.g. ‘-IDE1’."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#time-series",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#time-series",
    "title": "Introduction to GHRexplore",
    "section": "Time series",
    "text": "Time series\nplot_timeseries produces time series plots of covariates, case counts, or incidence rates. It allows for spatial and temporal aggregations, plotting single or multiple time series of different areas simultaneously (using facets or colors), y-axis transformations, and axis and title labeling.\nWe start by plotting the time series data for minimum temperature (note type=\"cov\") for all the 11 areas in dengue_MS:\nplot_timeseries(dengue_MS, var = \"tmin\", type = \"cov\", \n                var_label = \"Minimum temp.\",\n                time = \"date\", area = \"micro_code\")\n\nSince 11 areas are quite a lot for a single graph, we can use facet = TRUE to display them in different panels:\nplot_timeseries(dengue_MS, var = \"tmin\", type = \"cov\", var_label = \"Minimum temp.\",\n                time = \"date\", area = \"micro_code\", facet = TRUE)\n\nAnother possible strategy is to keep the 11 areas, but highlight the one we are interested in using the highlight argument by setting it to the area identifier we want to highlight:\nplot_timeseries(dengue_MS, var = \"tmin\", type = \"cov\", var_label = \"Minimum temp.\",\n                time = \"date\", area = \"micro_code\", highlight = \"50001\",\n                title = \"Micro code 50001\")\n\nAs an alternative option, we could also aggregate to a coarser spatial unit by using an aggregation function. Here, we aggregate to meso areas using the aggregate_space argument. Since type=\"cov\", it will aggregate temperatures using the mean as a default.\nplot_timeseries(dengue_MS, var = \"tmin\", type = \"cov\", var_label = \"Minimum temp.\",\n                time = \"date\", area = \"micro_code\", aggregate_space = \"meso_code\")\n\nAfter temperature, we move on to plotting dengue counts (note type=\"counts\") aggregating to meso areas using aggregate_space, which applies a sum function by default when type=\"counts\". Given the right-skewed distribution of the counts, we scale the y axis using a log10(x+1) transformation:\nplot_timeseries(dengue_MS, var = \"dengue_cases\", type = \"counts\",\n                time = \"date\", area = \"micro_code\", aggregate_space = \"meso_code\",\n                transform = \"log10p1\")\n\nIn a similar fashion, we can also plot incidence rates (note type=\"inc\" and the defined pop argument) aggregating to meso areas using aggregate_space, which for type=\"inc\" it first sums the cases per area, and then computes the incidence rates. We set the scale of the incidence rate (pt argument) to 1,000 persons, and scale the y axis using a log10(x+1) transformation:\nplot_timeseries(dengue_MS, var = \"dengue_cases\", type = \"inc\", pop = \"population\",\n                time = \"date\", area = \"micro_code\", aggregate_space = \"meso_code\",\n                pt = 1000, transform = \"log10p1\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#dual-axis-time-series",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#dual-axis-time-series",
    "title": "Introduction to GHRexplore",
    "section": "Dual-axis time series",
    "text": "Dual-axis time series\nplot_timeseries2 produces two-axis time series plots of covariates, case counts, or incidence rates. Similarly to plot_timeseries, it allows for spatial and temporal aggregations, plotting single or multiple time series of different areas simultaneously using facets, and axis and title labeling. The main difference between the two time series functions is that, in plot_timeseries2 the arguments var, type and optionally var_label and ylab need to be of length 2, corresponding to the left and right axes respectively.\nWe start by plotting the time series data for two covariates (note type=c(\"cov\", \"cov\")): maximum temperature and PDSI. We choose to align the two axis by forcing the mean of the two variables to be aligned:\nplot_timeseries2(dengue_MS,\n                 var = c(\"tmax\", \"pdsi\"),\n                 type = c(\"cov\", \"cov\"),\n                 time = \"date\", \n                 area = \"micro_code\",\n                 align = \"mean\")\n\nWe now improve on this by performing spatial aggregation into larger meso areas and specifying custom colours and labels:\nplot_timeseries2(dengue_MS,\n                 var = c(\"tmax\", \"pdsi\"),\n                 type = c(\"cov\", \"cov\"),\n                 time = \"date\", \n                 area = \"micro_code\",\n                 aggregate_space = \"meso_code\",\n                 palette = c(\"tomato\", \"royalblue\"),\n                 var_label = c(\"Maximum temp.\", \"PDSI\"),\n                 align = \"mean\")\n\nOne of the most interesting applications of plot_timeseries2 is to visualize in the same graph disease cases and a candidate predictor. We do that in the following example, where we visualize dengue incidence and maximum temperature (note type=c(\"inc\", \"cov\") and the pop argument):\nplot_timeseries2(dengue_MS,\n                 var = c(\"dengue_cases\", \"pdsi\"),\n                 type = c(\"inc\", \"cov\"),\n                 pop = \"population\", \n                 time = \"date\", \n                 area = \"micro_code\",\n                 aggregate_space = \"meso_code\")\n\nSimilarly, we can visualize case counts together with a covariate (note type=c(\"counts\", \"cov\")).\nplot_timeseries2(dengue_MS,\n                 var = c(\"dengue_cases\", \"pdsi\"),\n                 type = c(\"counts\", \"cov\"),\n                 time = \"date\", \n                 area = \"micro_code\",\n                 aggregate_space = \"meso_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#heatmap",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#heatmap",
    "title": "Introduction to GHRexplore",
    "section": "Heatmap",
    "text": "Heatmap\nplot_heatmap plots time series heatmaps of covariates, case counts, or incidence rates. Years are displayed on the y axis and weeks or months on the x axis. The function allows for spatial and temporal aggregations, plotting single or multiple time series for different areas simultaneously (using facets), color transformations, and axis and title labeling.\nIn this first example, we plot the variable (note type=\"cov\") PDSI (Palmer Drought Severity Index) aggregated at the meso code level. We use a suitable palette for drought and we center it at zero:\nplot_heatmap(dengue_MS, var = \"pdsi\", type = \"cov\", var_label = \"PDSI\",\n             time = \"date\", area = \"micro_code\",\n             aggregate_space = \"meso_code\", palette = \"-Vik\", centering = 0) \n\nIn this second example, we plot dengue incidence rates (note type=\"inc\" and pop arguments) at the meso code level and apply a transformation to the color gradient to have a better contrast.\nplot_heatmap(dengue_MS, var = \"dengue_cases\", type = \"inc\", pop = \"population\",\n             time = \"date\", area = \"micro_code\", aggregate_space = \"meso_code\",\n             title= \"Monthly Incidence\", transform = \"log10p1\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#seasonality",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#seasonality",
    "title": "Introduction to GHRexplore",
    "section": "Seasonality",
    "text": "Seasonality\nplot_seasonality produces yearly time series of covariates, case counts, or incidence rates to explore seasonality patterns. Months/weeks are shown on the x axis, the magnitude of the variable on the y axis, and years are represented as colors. The function allows for spatial and temporal aggregations, plotting single or multiple time series of different areas simultaneously (using facets), axis transformations, and axis and title labeling.\nIn this example, we explore the seasonal patterns of minimum temperature aggregated at the meso code level.\nplot_seasonality(dengue_MS, var = \"tmin\", var_label = \"Minimum temperature\",\n                 type = \"cov\", time = \"date\", area = \"micro_code\",   \n                 aggregate_space = \"meso_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#map",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#map",
    "title": "Introduction to GHRexplore",
    "section": "Map",
    "text": "Map\nplot_map plots choropleth maps of covariates, case counts, or incidence rates. In this function, we also need to supply the sf object containing the polygon geometries in the map argument. We can use the map_area argument to specify the column in the sf object that contains the area identifiers to be merged to the area column of the data frame specified in data.\nplot_map allows for temporal aggregations (by year or across all years), color transformations, centering and binning (current options include quantiles and equal area), as well as title labeling. It can plot both numerical and categorical variables.\nIn this first example, we plot average urbanicity levels (note type=\"cov\") over the entire study period while using an inverted palette:\nplot_map(data = dengue_MS, var = \"urban\",  time = \"date\", \n         type = \"cov\", area = \"micro_code\",  map = map_MS, \n         map_area = \"code\", aggregate_time = \"all\", \n         var_label= \"Urbanicity\", palette = \"-Heat\")\n\nWe now plot case incidence per 1,000 persons (note type=\"inc\" and pt=1000) for every year (aggregate_time = \"year\") and binning into 5 categories using the quantile method (see bins and bins_method arguments).\nplot_map(dengue_MS, var = \"dengue_cases\", type = \"inc\", pop = \"population\", \n         pt = 1000, time = \"date\", area = \"micro_code\",  \n         map = map_MS, map_area = \"code\", aggregate_time = \"year\", \n         bins = 5, bins_method = \"quantile\", palette = \"-Rocket\")  \n\nLastly, here is one example with the categorical, time-invariant biome covariate:\nplot_map(data = dengue_MS, var = \"biome_name\", type = \"cov\",\n         time = \"date\", area = \"micro_code\", aggregate_time = \"all\", \n         map = map_MS, map_area = \"code\", var_label= \"Biome\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#bivariate",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#bivariate",
    "title": "Introduction to GHRexplore",
    "section": "Bivariate",
    "text": "Bivariate\nplot_bivariate allows the visually assessment of associations between two variables. It will be a scatter plot if both variables are numeric and box plots if one of them is categorical. Options for customization include grouping by a variable using color or facets (area argument) and axis and title labeling.\nIn this first example, we explore the relationship between maximum temperature and drought while grouping by meso code:\nplot_bivariate(dengue_MS, \n               var = c(\"tmax\", \"pdsi\"), \n               var_label = c(\"Max. temp\", \"PDSI\"),\n               area = \"meso_code\")\n\nNext, we do the same but grouping using facets with free scales:\nplot_bivariate(dengue_MS, \n               var = c(\"tmax\", \"pdsi\"), \n               var_label = c(\"Max. temp\", \"PDSI\"),\n               area = \"meso_code\", \n               facet = TRUE, free_x_scale = TRUE, free_y_scale = TRUE)\n\nLastly, we explore the distribution of minimum temperature and the categorical variable biome while coloring by meso code:\nplot_bivariate(dengue_MS, \n               var = c(\"biome_name\", \"tmax\"), \n               var_label = c(\"Biome\", \"Max. temp\"),\n               area = \"meso_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#correlation",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#correlation",
    "title": "Introduction to GHRexplore",
    "section": "Correlation",
    "text": "Correlation\nplot_correlation plots a correlation matrix of a set of variables. By default, Pearson correlation is computed, and circles are used to depict correlation values in the lower triangle and the diagonal of the matrix, whereas numbering is used in the upper triangle:\nplot_correlation(dengue_MS, \n                 var = c(\"dengue_cases\",\"pop_density\", \"tmax\", \"tmin\",\n                         \"pdsi\", \"urban\", \"water_network\", \"water_shortage\")) \n\nIn this second example, we use Spearman correlation and customize the triangles and the palette.\nplot_correlation(dengue_MS, var = c(\"dengue_cases\",\"pop_density\", \"tmax\", \"tmin\",\n                                    \"pdsi\", \"urban\", \"water_network\", \"water_shortage\"),  \n                 method = \"spearman\", plot_type = c(\"number\", \"raster\"),\n                 palette = \"RdBu\") \n\nCustom labels for the variables can be provided using the var_label argument."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-vignette.html#compare",
    "href": "docs/GHRexplore/GHRexplore-vignette.html#compare",
    "title": "Introduction to GHRexplore",
    "section": "Compare",
    "text": "Compare\nplot_compare allows the visualization of several variables in the same figure using the same GHRexplore plotting function. Possible functions include plot_timeseries, plot_heatmap, plot_seasonality and plot_map.\nIn plot_compare, the var, var_lab, type and palette can be vectors of the same length that refer to each of the elements to be plotted, while some other elements, like pop, pt, time, area and aggregation functions are shared. The final display of the multiple plots is automatically done via the cowplot package, and several options to arrange the figures are available (see ?plot_combine) including all arguments of cowplot::plot_grid.\nIn this first example, we plot the time series of PDSI and dengue incidence as a single column and combine the legends (ncol=1, combine_legend=TRUE):\nplot_compare(plot_function = plot_timeseries,\n             data = dengue_MS, \n             var = c(\"pdsi\", \"dengue_cases\"),\n             type = c(\"cov\", \"inc\"), \n             var_lab = c(\"PDSI\", \"Dengue Incidence\"),\n             pop = \"population\",\n             time = \"date\", \n             area = \"micro_code\", \n             aggregate_space = \"meso_code\",\n             ncol=1, \n             combine_legend=TRUE)\n\nIn this second example, we plot heatmaps of PDSI and dengue incidence using different palettes:\nplot_compare(plot_function = plot_heatmap,\n             data = dengue_MS, \n             var = c(\"pdsi\", \"dengue_cases\"),\n             type = c(\"cov\", \"inc\"), \n             var_lab = c(\"PDSI\", \"Incidence\"),\n             palette = c(\"Purp\", \"Reds\"), \n             pop = \"population\",\n             time = \"date\", \n             area = \"micro_code\", \n             aggregate_space = \"meso_code\",\n             ncol=1)"
  },
  {
    "objectID": "docs/clim4health/clim4health-vignette1.html",
    "href": "docs/clim4health/clim4health-vignette1.html",
    "title": "clim4health tutorial",
    "section": "",
    "text": "Under construction."
  },
  {
    "objectID": "index.html#from-health-and-climate-data-to-disease-forecasts",
    "href": "index.html#from-health-and-climate-data-to-disease-forecasts",
    "title": "GHRtools",
    "section": "From health and climate data to disease forecasts",
    "text": "From health and climate data to disease forecasts\nGHRtools is a suite of R packages that support climate and health workflows by streamlining health and climate data collection and harmonization, exploratory analysis, Bayesian modelling and forecasting."
  },
  {
    "objectID": "index.html#our-tools",
    "href": "index.html#our-tools",
    "title": "GHRtools",
    "section": "Our tools",
    "text": "Our tools\n \n\n\n\n\n\n\n\n\n\n\n\n    data4health  \n  \n    \n        \n   Access, preprocess and aggregate health data at customized spatiotemporal resolutions.\n   Use a set of functions to streamline health data pipelines or leverage a user-friendly graphical interface provided as a Shiny app within the package.\n    \n    \n  \n\n\n\n  \n\n\n\n\n    clim4health  \n  \n     \n    \n  Obtain, transform and export climate data including reanalyses, forecasts, hindcasts, and weather stations.\n  Apply common transformations of climate data including postprocessing, downscaling, spatiotemporal aggregations, and construct threshold-based vector suitability indicators.\n    \n  \n  \n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n    GHRexplore  \n  \n         \n    \n   Perform exploratory analysis of temporal and spatiotemporal health data including case counts, incidence rates, and covariates.\n   Produce high-quality time series, heatmaps, seasonality, bivariate and correlation plots, as well as choropleth maps, with many customization options.\n    \n  \n  \n\n\n\n  \n\n\n\n\n    GHRmodel  \n  \n         \n    \n   A modular and flexible approach to modeling health outcomes using INLA. \n   It addresses common challenges when fitting INLA models, including covariate transformations, formula definitions with complex covariate effects, model fitting, diagnostic plots and model statistics.\n\n    \n  \n  \n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n    GHRpredict  \n  \n         \n    \n   Generate predictions of models fitted with GHRmodel.\n   Evaluate the quality of your predictions using out-of-sample statistics, graphical diagnostics and outbreak detection capabilities using cross-validation"
  },
  {
    "objectID": "docs/clim4health/clim4health.html#overview",
    "href": "docs/clim4health/clim4health.html#overview",
    "title": "clim4health",
    "section": "Overview",
    "text": "Overview\n\n\nclim4health is an R package designed to obtain, transform and export climate data for their use in epidemiological analyses and other types of applications. The package contains a series of functions structured in three sequential blocks: input, transformation, and output.\nIn the input block, clim4health provides functions to download several types of climate data including reanalyses, forecasts, hindcasts, and weather stations and load them into memory for their processing. The transformation block includes functions to postprocess and downscale climate data, perform spatiotemporal aggregations, as well as compute threshold-based suitability indicators. Finally, in the output block, functions to visualize and export the transformed data are provided.\n\n\n\n\n\n\n\n\n\n\n\n\nclim4health is one of the packages developed by the Global Health Resilience (GHR) team at the Barcelona Supercomputing Center (BSC) within the HARMONIZE project, which comprises different R and Python libraries tailored for health, climate, environmental, and socioeconomic data acquisition, harmonisation, and visualization.\nThe package is currently under development and its expected release date is February 2026."
  },
  {
    "objectID": "docs/clim4health/clim4health.html#developers",
    "href": "docs/clim4health/clim4health.html#developers",
    "title": "clim4health",
    "section": "Developers",
    "text": "Developers\nEmily Ball, PhD \nBarcelona Supercomputing Center\nClimate Services\nAlba Llabrés, PhD \nBarcelona Supercomputing Center\nClimate Services\nCarles Milà, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nRaul Capellan Fernandez, MSc\nBarcelona Supercomputing Center\nEarth Data and Diagnostics\nDaniela Lührsen, MSc \nBarcelona Supercomputing Center\nGlobal Health Resilience\nAnna B. Kawiecki, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nRachel Lowe, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience (Group leader)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-news.html#section",
    "href": "docs/GHRexplore/GHRexplore-news.html#section",
    "title": "GHRexplore changelog",
    "section": "0.2.0",
    "text": "0.2.0\n\nNew plotting function: plot_timeseries2() for dual-axis time series plots.\nIncreased flexibility of plot_map() (line colour, width, alpha).\nby_year argument deprecated in plot_map() and substituted by aggregate_time."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-news.html#section-1",
    "href": "docs/GHRexplore/GHRexplore-news.html#section-1",
    "title": "GHRexplore changelog",
    "section": "0.1.1",
    "text": "0.1.1\n\nFixed tests failing with cowplot 1.2.0.\nFixed minor bug in plot_map()."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-news.html#section-2",
    "href": "docs/GHRexplore/GHRexplore-news.html#section-2",
    "title": "GHRexplore changelog",
    "section": "0.1.0",
    "text": "0.1.0\n\nInitial CRAN submission."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore.html#overview",
    "href": "docs/GHRexplore/GHRexplore.html#overview",
    "title": "GHRexplore",
    "section": "Overview",
    "text": "Overview\n\n\nGHRexplore is an R package for exploratory analysis of temporal and spatio-temporal health data including case counts, incidence rates, and covariates. It provides commonly used visualizations and supports standard data transformations such as temporal and spatial aggregations. The package also offers extensive customization options for the resulting figures. Currently available plotting functions include:\n\n\n\n\n\n\n\nplot_timeseries: Plots time series of covariates, case counts or incidence rates.\nplot_heatmap: Plots a time series of covariates, case counts or incidence rates as heatmaps.\nplot_seasonality: Plots yearly time series to detect seasonal patterns of covariates, case counts or incidence rates.\nplot_correlation: Plots a correlation matrix of a series of variables.\nplot_map: Plots a choropleth map of covariates, case counts or incidence rates.\nplot_bivariate: Plots a bivariate plot of two numerical and/or categorical variables.\nplot_multiple, plot_combine and plot_compare: Used to generate graphs of several variables at the same time.\n\nGHRexplore is one of the packages developed by the Global Health Resilience (GHR) team at the Barcelona Supercomputing Center (BSC) within the IDExtremes project. The development version of the package can be found on gitlab."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore.html#installation",
    "href": "docs/GHRexplore/GHRexplore.html#installation",
    "title": "GHRexplore",
    "section": "Installation",
    "text": "Installation\n# Install from CRAN\ninstall.packages(\"GHRexplore\")\n\n# Get the development version from Gitlab\ndevtools::install_git('https://earth.bsc.es/gitlab/ghr/ghrexplore.git')"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore.html#usage",
    "href": "docs/GHRexplore/GHRexplore.html#usage",
    "title": "GHRexplore",
    "section": "Usage",
    "text": "Usage\nlibrary(\"GHRexplore\")\n\n# Use data included in the package to plot a heatmap with spatial aggregation\ndata(\"dengue_MS\")\nplot_heatmap(data = dengue_MS,\n             var = \"dengue_cases\",\n             type = \"inc\",\n             pop = \"population\",\n             time = \"date\",          \n             area = \"micro_code\",   \n             aggregate_space = \"meso_code\",\n             transform = \"log10p1\",\n             title = \"Dengue incidence in Brazil\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore.html#developers",
    "href": "docs/GHRexplore/GHRexplore.html#developers",
    "title": "GHRexplore",
    "section": "Developers",
    "text": "Developers\nGiovenale Moirano, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nCarles Milà, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nAnna B. Kawiecki, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience\nRachel Lowe, PhD \nBarcelona Supercomputing Center\nGlobal Health Resilience (Group leader)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html",
    "title": "Multiple plot",
    "section": "",
    "text": "Produces a list of multiple plots of the same type, each representing one variable.\nplot_multiple(plot_function, ...)\n\n\n\n\nplot_function: Indicates which of the plot types to use. Options are: ‘plot_timeseries’, ‘plot_heatmap’, ‘plot_seasonality’, and ‘plot_map’.\n...: Additional arguments to pass to the plotting function.\n\n\n\n\nVariable names, types, labels and palette can be customized for each plot, the rest of parameters will be the same for all variables (options depend on the chosen plot type).\n\n\n\nA list of the different generated plots.\n\n\n\nplot_compare, plot_combine\n\n\n\n# Load data\nlibrary(\"sf\")\ndata(\"dengue_MS\")\ndata(\"map_MS\")\n\nplots &lt;- plot_multiple(\n  plot_function = plot_timeseries,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette = c(\"blue\", \"red\", \"darkgreen\"),\n  time = \"date\",\n  area = \"micro_code\",\n  facet = TRUE)\n\n# Acess individual plots\nprint(plots[[1]])  \n\n# Multiple heatmap plots\nplots &lt;- plot_multiple(\n  plot_function = plot_heatmap,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette = c(\"Blues\", \"Reds\", \"BrBG\"),\n  time = \"date\",\n  area = \"micro_code\")\n\n# Multiple seasonality plots\nplots &lt;- plot_multiple(\n  plot_function = plot_seasonality,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette =  c(\"Blues\", \"Reds\", \"BrBG\"),\n  time = \"date\",\n  area = \"micro_code\")\n\n# Multiple map plots\nplots &lt;- plot_multiple(\n  plot_function = plot_map, \n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette = c(\"Reds\", \"Blues\", \"Viridis\"),\n  map = map_MS,         \n  map_area = \"code\",    \n  time = \"date\",\n  area = \"micro_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#description",
    "title": "Multiple plot",
    "section": "",
    "text": "Produces a list of multiple plots of the same type, each representing one variable.\nplot_multiple(plot_function, ...)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#arguments",
    "title": "Multiple plot",
    "section": "",
    "text": "plot_function: Indicates which of the plot types to use. Options are: ‘plot_timeseries’, ‘plot_heatmap’, ‘plot_seasonality’, and ‘plot_map’.\n...: Additional arguments to pass to the plotting function."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#details",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#details",
    "title": "Multiple plot",
    "section": "",
    "text": "Variable names, types, labels and palette can be customized for each plot, the rest of parameters will be the same for all variables (options depend on the chosen plot type)."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#returns",
    "title": "Multiple plot",
    "section": "",
    "text": "A list of the different generated plots."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#see-also",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#see-also",
    "title": "Multiple plot",
    "section": "",
    "text": "plot_compare, plot_combine"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_multiple.Rd.html#examples",
    "title": "Multiple plot",
    "section": "",
    "text": "# Load data\nlibrary(\"sf\")\ndata(\"dengue_MS\")\ndata(\"map_MS\")\n\nplots &lt;- plot_multiple(\n  plot_function = plot_timeseries,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette = c(\"blue\", \"red\", \"darkgreen\"),\n  time = \"date\",\n  area = \"micro_code\",\n  facet = TRUE)\n\n# Acess individual plots\nprint(plots[[1]])  \n\n# Multiple heatmap plots\nplots &lt;- plot_multiple(\n  plot_function = plot_heatmap,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette = c(\"Blues\", \"Reds\", \"BrBG\"),\n  time = \"date\",\n  area = \"micro_code\")\n\n# Multiple seasonality plots\nplots &lt;- plot_multiple(\n  plot_function = plot_seasonality,\n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette =  c(\"Blues\", \"Reds\", \"BrBG\"),\n  time = \"date\",\n  area = \"micro_code\")\n\n# Multiple map plots\nplots &lt;- plot_multiple(\n  plot_function = plot_map, \n  data = dengue_MS,\n  var = c(\"dengue_cases\", \"dengue_cases\", \"tmax\"),\n  type = c(\"counts\", \"inc\", \"cov\"),\n  pop = \"population\",\n  var_label = c(\"Dengue Cases\", \"Dengue inc\", \"Max Temp\"),\n  palette = c(\"Reds\", \"Blues\", \"Viridis\"),\n  map = map_MS,         \n  map_area = \"code\",    \n  time = \"date\",\n  area = \"micro_code\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html",
    "title": "Correlation plot",
    "section": "",
    "text": "Plots a correlation matrix of a series of variables.\nplot_correlation(\n  data,\n  var,\n  var_label = NULL,\n  method = \"pearson\",\n  plot_type = c(\"circle\", \"number\"),\n  scale = 1,\n  title = NULL,\n  palette = \"IDE1\",\n  print = FALSE\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Character vector containing variables in data to include in the correlation matrix.\nvar_label: Optional character vector of the same length as var containing custom names for the variables.\nmethod: Correlation computation method. Options include “pearson” (default), “spearman” or “kendall”.\nplot_type: Character vector of length 2 indicating the type of plot to use in the lower triangular and diagonal (1st element) and the upper triangular (2nd element). Options include “circle”, “number” and “raster”.\nscale: Circle and number size multiplier, e.g. 1.1 increases the size a 10% while 0.9 decreases it a 10%.\ntitle: Optional title of the plot.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\nprint: Logical. If TRUE, print the correlation matrix.\n\n\n\n\nA plot of the correlation matrix.\n\n\n\n# Load data\ndata(\"dengue_MS\")\n\n# Pearson correlation plot\nplot_correlation(dengue_MS, \n                 method = \"pearson\",\n                 var = c(\"dengue_cases\",\"pop_density\", \n                         \"tmax\", \"tmin\", \"pdsi\", \"urban\",\n                         \"water_network\", \"water_shortage\"),  \n                 var_label = c(\"dengue cases\",\"pop. density\", \n                               \"max temp\", \"min temp\", \"drought index\", \"urbanization\",\n                               \"water network\", \"water shortage\"),\n                 title = \"Correlation matrix\") \n\n# Print spearman correlation plot of type 'raster' and 'number' \n# with another palette \nplot_correlation(dengue_MS,\n                 method = \"spearman\",\n                 var = c(\"dengue_cases\",\"pop_density\", \n                         \"tmax\", \"tmin\", \"pdsi\", \"urban\",\n                         \"water_network\", \"water_shortage\"),  \n                 var_label = c(\"dengue cases\",\"pop. density\", \n                               \"max temp\", \"min temp\", \"drought index\", \"urbanization\",\n                               \"water network\", \"water shortage\"),\n                 plot_type = c(\"raster\", \"number\"),\n                 palette = \"-Blue-Red 3\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#description",
    "title": "Correlation plot",
    "section": "",
    "text": "Plots a correlation matrix of a series of variables.\nplot_correlation(\n  data,\n  var,\n  var_label = NULL,\n  method = \"pearson\",\n  plot_type = c(\"circle\", \"number\"),\n  scale = 1,\n  title = NULL,\n  palette = \"IDE1\",\n  print = FALSE\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#arguments",
    "title": "Correlation plot",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Character vector containing variables in data to include in the correlation matrix.\nvar_label: Optional character vector of the same length as var containing custom names for the variables.\nmethod: Correlation computation method. Options include “pearson” (default), “spearman” or “kendall”.\nplot_type: Character vector of length 2 indicating the type of plot to use in the lower triangular and diagonal (1st element) and the upper triangular (2nd element). Options include “circle”, “number” and “raster”.\nscale: Circle and number size multiplier, e.g. 1.1 increases the size a 10% while 0.9 decreases it a 10%.\ntitle: Optional title of the plot.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\nprint: Logical. If TRUE, print the correlation matrix."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#returns",
    "title": "Correlation plot",
    "section": "",
    "text": "A plot of the correlation matrix."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_correlation.Rd.html#examples",
    "title": "Correlation plot",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\n\n# Pearson correlation plot\nplot_correlation(dengue_MS, \n                 method = \"pearson\",\n                 var = c(\"dengue_cases\",\"pop_density\", \n                         \"tmax\", \"tmin\", \"pdsi\", \"urban\",\n                         \"water_network\", \"water_shortage\"),  \n                 var_label = c(\"dengue cases\",\"pop. density\", \n                               \"max temp\", \"min temp\", \"drought index\", \"urbanization\",\n                               \"water network\", \"water shortage\"),\n                 title = \"Correlation matrix\") \n\n# Print spearman correlation plot of type 'raster' and 'number' \n# with another palette \nplot_correlation(dengue_MS,\n                 method = \"spearman\",\n                 var = c(\"dengue_cases\",\"pop_density\", \n                         \"tmax\", \"tmin\", \"pdsi\", \"urban\",\n                         \"water_network\", \"water_shortage\"),  \n                 var_label = c(\"dengue cases\",\"pop. density\", \n                               \"max temp\", \"min temp\", \"drought index\", \"urbanization\",\n                               \"water network\", \"water shortage\"),\n                 plot_type = c(\"raster\", \"number\"),\n                 palette = \"-Blue-Red 3\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html",
    "title": "GHRexplore: Exploratory Analysis of Temporal and Spatio-Temporal Health Data",
    "section": "",
    "text": "A collection of commonly used visualizations of temporal and spatio-temporal health data including case counts, incidence rates, and covariates. The available plot types include time series, heatmaps, seasonality plots, maps and more. The package supports standard data transformations such as temporal and spatial aggregations, while offering extensive customization options for the resulting figures.\n\n\n\nMaintainer : Carles Milà carles.milagarcia@bsc.es (ORCID)\nAuthors:\n\nGiovenale Moirano (ORCID)\nAnna B. Kawiecki (ORCID)\nRachel Lowe (ORCID) [copyright holder]\n\n\n\n\nUseful links:\n\nhttps://earth.bsc.es/gitlab/ghr/ghrexplore\nReport bugs at https://earth.bsc.es/gitlab/ghr/ghrexplore/-/issues"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html#description",
    "title": "GHRexplore: Exploratory Analysis of Temporal and Spatio-Temporal Health Data",
    "section": "",
    "text": "A collection of commonly used visualizations of temporal and spatio-temporal health data including case counts, incidence rates, and covariates. The available plot types include time series, heatmaps, seasonality plots, maps and more. The package supports standard data transformations such as temporal and spatial aggregations, while offering extensive customization options for the resulting figures."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html#authors",
    "href": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html#authors",
    "title": "GHRexplore: Exploratory Analysis of Temporal and Spatio-Temporal Health Data",
    "section": "",
    "text": "Maintainer : Carles Milà carles.milagarcia@bsc.es (ORCID)\nAuthors:\n\nGiovenale Moirano (ORCID)\nAnna B. Kawiecki (ORCID)\nRachel Lowe (ORCID) [copyright holder]"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html#see-also",
    "href": "docs/GHRexplore/GHRexplore-reference/GHRexplore-package.Rd.html#see-also",
    "title": "GHRexplore: Exploratory Analysis of Temporal and Spatio-Temporal Health Data",
    "section": "",
    "text": "Useful links:\n\nhttps://earth.bsc.es/gitlab/ghr/ghrexplore\nReport bugs at https://earth.bsc.es/gitlab/ghr/ghrexplore/-/issues"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html",
    "title": "Dengue cases in Mato Grosso do Sul",
    "section": "",
    "text": "Monthly number of notified dengue cases by municipality in the Mato Grosso do Sul state of Brazil and a set of spatial and spatio-temporal covariates.\ndata(dengue_MS)\n\n\n\nA data frame with 2,640 rows and 27 columns:\n\nmicro_code: Unique ID number for each micro region (11 units).\nmicro_name: Name of each micro region.\nmicro_name_ibge: Name of each micro region in IBGE format.\nmeso_code: Unique ID number for each meso region (4 units).\nmeso_name: Name of each meso region.\nstate_code: Unique ID number for each state (1 unit).\nstate_name: Name of each state.\nregion_code: Unique ID number given to each Brazilian Region. All observations come from the “Southeast Region”.\nregion_name: Name of each Brazilian Region. All observations come from the “Southeast Region”.\nbiome_code: Biome code.\nbiome_name: Biome name.\necozone_code: Ecozone code.\necozone_name: Ecozone name.\nmain_climate: Most prevalent climate regime in the microregion. Based on Koppen Geiger climate regimes.\nmonth: Calendar month index, 1 = January, 12 = December.\nyear: Year 2000 - 2019.\ntime: Time index starting at 1 for January 2000.\ndengue_cases: Number of notified dengue cases registered in the notifiable diseases system in Brazil (SINAN) in the microregion of reference, at the month of first symptoms.\npopulation: Estimated population based on projections calculated using the 2000 and 2010 censuses, as well as population counts from 2007 and 2017.\npop_density: Population density (number of people per km2).\ntmax: Monthly average daily maximum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion.\ntmin: Monthly average daily minimum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion.\npdsi: Self-calibrated Palmer Drought Severity Index for each microregion. It measures how wet or dry a region is relative to usual conditions. Negative values represent periods of drought, positive values represent wetter periods. Calculated by taking the mean value within each microregion.\nurban: Percentage of population living in urban areas (2010 census).\nwater_network: Percentage of population with access to the piped water network according to the 2010 census.\nwater_shortage: Frequency of reported water shortages per microregion between 2000 and 2016.\ndate: First day of the month in date format (“%d-%m-%Y”).\n\n\n\n\nIn addition to the dengue counts, the dataset contains a set of environmental, socio-economic and meteo-climatic factors. This dataset is a subset of the original containing observations over the entire Brazil.\n\n\n\nhttps://github.com/drrachellowe/hydromet_dengue"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#description",
    "title": "Dengue cases in Mato Grosso do Sul",
    "section": "",
    "text": "Monthly number of notified dengue cases by municipality in the Mato Grosso do Sul state of Brazil and a set of spatial and spatio-temporal covariates.\ndata(dengue_MS)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#format",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#format",
    "title": "Dengue cases in Mato Grosso do Sul",
    "section": "",
    "text": "A data frame with 2,640 rows and 27 columns:\n\nmicro_code: Unique ID number for each micro region (11 units).\nmicro_name: Name of each micro region.\nmicro_name_ibge: Name of each micro region in IBGE format.\nmeso_code: Unique ID number for each meso region (4 units).\nmeso_name: Name of each meso region.\nstate_code: Unique ID number for each state (1 unit).\nstate_name: Name of each state.\nregion_code: Unique ID number given to each Brazilian Region. All observations come from the “Southeast Region”.\nregion_name: Name of each Brazilian Region. All observations come from the “Southeast Region”.\nbiome_code: Biome code.\nbiome_name: Biome name.\necozone_code: Ecozone code.\necozone_name: Ecozone name.\nmain_climate: Most prevalent climate regime in the microregion. Based on Koppen Geiger climate regimes.\nmonth: Calendar month index, 1 = January, 12 = December.\nyear: Year 2000 - 2019.\ntime: Time index starting at 1 for January 2000.\ndengue_cases: Number of notified dengue cases registered in the notifiable diseases system in Brazil (SINAN) in the microregion of reference, at the month of first symptoms.\npopulation: Estimated population based on projections calculated using the 2000 and 2010 censuses, as well as population counts from 2007 and 2017.\npop_density: Population density (number of people per km2).\ntmax: Monthly average daily maximum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion.\ntmin: Monthly average daily minimum temperature; gridded values (at a 0.5 deg resolution) averaged across each microregion.\npdsi: Self-calibrated Palmer Drought Severity Index for each microregion. It measures how wet or dry a region is relative to usual conditions. Negative values represent periods of drought, positive values represent wetter periods. Calculated by taking the mean value within each microregion.\nurban: Percentage of population living in urban areas (2010 census).\nwater_network: Percentage of population with access to the piped water network according to the 2010 census.\nwater_shortage: Frequency of reported water shortages per microregion between 2000 and 2016.\ndate: First day of the month in date format (“%d-%m-%Y”)."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#details",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#details",
    "title": "Dengue cases in Mato Grosso do Sul",
    "section": "",
    "text": "In addition to the dengue counts, the dataset contains a set of environmental, socio-economic and meteo-climatic factors. This dataset is a subset of the original containing observations over the entire Brazil."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#source",
    "href": "docs/GHRexplore/GHRexplore-reference/dengue_MS.Rd.html#source",
    "title": "Dengue cases in Mato Grosso do Sul",
    "section": "",
    "text": "https://github.com/drrachellowe/hydromet_dengue"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html",
    "title": "Heatmap plot",
    "section": "",
    "text": "Plots temporal heatmaps of covariates, case counts, or incidence rates.\nplot_heatmap(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = \"month\",\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  palette = NULL,\n  centering = NULL\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Numerical only used for type='inc'. It represents the scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (i.e., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the color ramp for better visualization. Useful options include “log10p1” log10(x+1) useful for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\nylab: Label for the y-axis.\nxlab: Label for the x-axis.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\ncentering: Numerical or “median”, defaults to NULL. If set, it centers the palette on that value.\n\n\n\n\nA ggplot2 heatmap plot.\n\n\n\n# Load data\ndata(\"dengue_MS\")\n\n# Covariate heatmap with space aggregation\nplot_heatmap(dengue_MS,\n             var = \"tmin\",\n             time = \"date\",\n             var_label = \"Minimum\\ntemp.\",\n             type = \"cov\",\n             area = \"micro_code\",\n             aggregate_space = \"meso_code\",  \n             palette = \"Blue-Red\")\n\n# Case count heatmap with log scale\nplot_heatmap(dengue_MS,\n             var = \"dengue_cases\", \n             time = \"date\",  \n             type = \"counts\",\n             area = \"micro_code\",  \n             palette = \"Reds\", \n             title = \"Dengue counts\", \n             var_label = \"Dengue \\ncounts\",\n             transform = \"log10p1\")  \n             \n# Case incidence (for 1,000 persons) heatmap with space aggregation\nplot_heatmap(dengue_MS,\n             var = \"dengue_cases\", \n             time = \"date\",          \n             type = \"inc\",\n             pop = \"population\",\n             pt = 1000,\n             area = \"micro_code\", \n             aggregate_space = \"meso_code\", \n             palette = \"Purp\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#description",
    "title": "Heatmap plot",
    "section": "",
    "text": "Plots temporal heatmaps of covariates, case counts, or incidence rates.\nplot_heatmap(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = \"month\",\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\",\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  ylab = NULL,\n  xlab = NULL,\n  palette = NULL,\n  centering = NULL\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#arguments",
    "title": "Heatmap plot",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or disease case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Numerical only used for type='inc'. It represents the scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (i.e., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the color ramp for better visualization. Useful options include “log10p1” log10(x+1) useful for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\nylab: Label for the y-axis.\nxlab: Label for the x-axis.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\ncentering: Numerical or “median”, defaults to NULL. If set, it centers the palette on that value."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#returns",
    "title": "Heatmap plot",
    "section": "",
    "text": "A ggplot2 heatmap plot."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_heatmap.Rd.html#examples",
    "title": "Heatmap plot",
    "section": "",
    "text": "# Load data\ndata(\"dengue_MS\")\n\n# Covariate heatmap with space aggregation\nplot_heatmap(dengue_MS,\n             var = \"tmin\",\n             time = \"date\",\n             var_label = \"Minimum\\ntemp.\",\n             type = \"cov\",\n             area = \"micro_code\",\n             aggregate_space = \"meso_code\",  \n             palette = \"Blue-Red\")\n\n# Case count heatmap with log scale\nplot_heatmap(dengue_MS,\n             var = \"dengue_cases\", \n             time = \"date\",  \n             type = \"counts\",\n             area = \"micro_code\",  \n             palette = \"Reds\", \n             title = \"Dengue counts\", \n             var_label = \"Dengue \\ncounts\",\n             transform = \"log10p1\")  \n             \n# Case incidence (for 1,000 persons) heatmap with space aggregation\nplot_heatmap(dengue_MS,\n             var = \"dengue_cases\", \n             time = \"date\",          \n             type = \"inc\",\n             pop = \"population\",\n             pt = 1000,\n             area = \"micro_code\", \n             aggregate_space = \"meso_code\", \n             palette = \"Purp\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html",
    "title": "Choropleth map",
    "section": "",
    "text": "Plots a choropleth map of covariates, case counts, or incidence rates.\nplot_map(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  map = NULL,\n  map_area = NULL,\n  by_year = NULL,\n  aggregate_time = \"year\",\n  aggregate_time_fun = \"mean\",\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  palette = NULL,\n  centering = NULL,\n  bins = NULL,\n  bins_method = \"quantile\",\n  bins_label = NULL,\n  ...\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) covariate or case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\nmap: Name of the sf object corresponding to the spatial unit specified in ‘area’.\nmap_area: Name of the variable that identifies the different locations (e.g., areal units) in the map object. If not specified, it assumes the same name as in area.\nby_year: Deprecated. Use ‘aggregate_time’ instead.\naggregate_time: Temporal scale for visualization and aggregation. Options include “all” (across all time points) and “year” (default).\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the color ramp for better visualization. Useful options include “log10p1” log10(x+1) for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\ncentering: Numerical or “median”, defaults to NULL. If set, it centers the palette on that value.\nbins: Number of bins for categorization of numerical variables. Defaults to NULL (no binning).\nbins_method: Method to compute the bins, only used when bins is not NULL. Possible values are “quantile” (default) and “equal”.\nbins_label: Optional labels for the bins. They must have the same length as the number of bins. Defaults to NULL (default interval labels).\n...: Additional aesthetics to be passed to geom_sf. Possible values include colour (e.g., colour=\"black\"), linewidth (e.g., linewidth=0.1), linetype (e.g., linetype=2), and alpha (e.g., alpha=0.8).\n\n\n\n\nA ggplot2 choropleth map.\n\n\n\n# Load data\nlibrary(\"sf\")\ndata(\"dengue_MS\")\ndata(\"map_MS\")\n\n# Temporal average of a covariate\nplot_map(data = dengue_MS, \n         var = \"tmin\",  \n         time = \"date\",       \n         type = \"cov\",\n         area = \"micro_code\",  \n         map = map_MS,         \n         map_area = \"code\",   \n         aggregate_time = \"all\",\n         aggregate_time_fun = \"mean\",         \n         palette =\"Reds\",\n         var_label= \"Min Temp.\")\n\n# Categorical covariate\nplot_map(data = dengue_MS, \n         var = \"biome_name\",        \n         time = \"date\",      \n         area = \"micro_code\", \n         aggregate_time = \"all\",\n         map = map_MS,       \n         map_area = \"code\",  \n         palette =\"Viridis\",\n         var_label= \"Biome\")\n\n# Case counts by year (log)\ndengue_MS |&gt;\n  plot_map(var = \"dengue_cases\",    \n           time = \"date\",    \n           type = \"counts\",\n           area = \"micro_code\", \n           pop = \"population\",\n           map = map_MS,   \n           map_area = \"code\",\n           palette = \"Reds\",\n           transform = \"log10p1\")\n\n# Case incidence by year, binned\nplot_map(dengue_MS,\n         var = \"dengue_cases\", \n         type = \"inc\",\n         time = \"date\",\n         area = \"micro_code\",\n         pop = \"population\",\n         pt = 1000,\n         map = map_MS, \n         map_area = \"code\",\n         bins = 5,   \n         palette = \"Viridis\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#description",
    "title": "Choropleth map",
    "section": "",
    "text": "Plots a choropleth map of covariates, case counts, or incidence rates.\nplot_map(\n  data,\n  var,\n  time,\n  type = \"cov\",\n  pop = NULL,\n  pt = 1e+05,\n  area = NULL,\n  map = NULL,\n  map_area = NULL,\n  by_year = NULL,\n  aggregate_time = \"year\",\n  aggregate_time_fun = \"mean\",\n  transform = \"identity\",\n  title = NULL,\n  var_label = NULL,\n  palette = NULL,\n  centering = NULL,\n  bins = NULL,\n  bins_method = \"quantile\",\n  bins_label = NULL,\n  ...\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#arguments",
    "title": "Choropleth map",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) covariate or case observations for one or multiple locations.\nvar: Name of the column identifying the variable to be plotted.\ntime: Name of the variable that identifies the temporal dimension of the data frame. Its values must be in date format (“yyyy-mm-dd”) representing the day of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\ntype: Character that specifies the type of variable in var. Possible values include ‘cov’ (covariate, default), ‘counts’ (case counts), and ‘inc’ (case incidence). If type='inc', pop is required.\npop: Character identifying the variable name for population. Only needed if type='inc'.\npt: Scale of the person-time (default 100,000) for incidence rates.\narea: Name of variable that identifies the different locations (e.g., areal units) for which a time series is available.\nmap: Name of the sf object corresponding to the spatial unit specified in ‘area’.\nmap_area: Name of the variable that identifies the different locations (e.g., areal units) in the map object. If not specified, it assumes the same name as in area.\nby_year: Deprecated. Use ‘aggregate_time’ instead.\naggregate_time: Temporal scale for visualization and aggregation. Options include “all” (across all time points) and “year” (default).\naggregate_time_fun: Character indicating the function to be used in the aggregation over time for type=\"cov\". Options are “mean” (default), “median”, “sum”. For case counts and incidence, “sum” is always applied.\ntransform: Character, defaults to “identity” (i.e., no transformation). Transforms the color ramp for better visualization. Useful options include “log10p1” log10(x+1) for case counts and incidence with 0s, or any of the in-built ggplot2 options such as “log10” log10(x), “log1p” log(x+1), and “sqrt” sqrt(x) (check all possible options using ?scale_y_continuous).\ntitle: Optional title of the plot.\nvar_label: Character with a custom name for the case or covariate variable.\npalette: GHR, RColorBrewer or colorspace palette. Use “-” before the palette name (e.g., “-Reds”) to reverse it.\ncentering: Numerical or “median”, defaults to NULL. If set, it centers the palette on that value.\nbins: Number of bins for categorization of numerical variables. Defaults to NULL (no binning).\nbins_method: Method to compute the bins, only used when bins is not NULL. Possible values are “quantile” (default) and “equal”.\nbins_label: Optional labels for the bins. They must have the same length as the number of bins. Defaults to NULL (default interval labels).\n...: Additional aesthetics to be passed to geom_sf. Possible values include colour (e.g., colour=\"black\"), linewidth (e.g., linewidth=0.1), linetype (e.g., linetype=2), and alpha (e.g., alpha=0.8)."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#returns",
    "title": "Choropleth map",
    "section": "",
    "text": "A ggplot2 choropleth map."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#examples",
    "href": "docs/GHRexplore/GHRexplore-reference/plot_map.Rd.html#examples",
    "title": "Choropleth map",
    "section": "",
    "text": "# Load data\nlibrary(\"sf\")\ndata(\"dengue_MS\")\ndata(\"map_MS\")\n\n# Temporal average of a covariate\nplot_map(data = dengue_MS, \n         var = \"tmin\",  \n         time = \"date\",       \n         type = \"cov\",\n         area = \"micro_code\",  \n         map = map_MS,         \n         map_area = \"code\",   \n         aggregate_time = \"all\",\n         aggregate_time_fun = \"mean\",         \n         palette =\"Reds\",\n         var_label= \"Min Temp.\")\n\n# Categorical covariate\nplot_map(data = dengue_MS, \n         var = \"biome_name\",        \n         time = \"date\",      \n         area = \"micro_code\", \n         aggregate_time = \"all\",\n         map = map_MS,       \n         map_area = \"code\",  \n         palette =\"Viridis\",\n         var_label= \"Biome\")\n\n# Case counts by year (log)\ndengue_MS |&gt;\n  plot_map(var = \"dengue_cases\",    \n           time = \"date\",    \n           type = \"counts\",\n           area = \"micro_code\", \n           pop = \"population\",\n           map = map_MS,   \n           map_area = \"code\",\n           palette = \"Reds\",\n           transform = \"log10p1\")\n\n# Case incidence by year, binned\nplot_map(dengue_MS,\n         var = \"dengue_cases\", \n         type = \"inc\",\n         time = \"date\",\n         area = \"micro_code\",\n         pop = \"population\",\n         pt = 1000,\n         map = map_MS, \n         map_area = \"code\",\n         bins = 5,   \n         palette = \"Viridis\")"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html",
    "title": "Aggregate covariates",
    "section": "",
    "text": "Aggregates a data frame containing a covariate of interest in space and/or time.\naggregate_cov(\n  data = NULL,\n  var = NULL,\n  time = NULL,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = NULL,\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\"\n)\n\n\n\n\ndata: Data frame containing equally spaced (daily, weekly, monthly) incident cases for one or multiple areas.\nvar: Name of the variable that identifies the covariate.\ntime: Name of the variable that identifies the temporal dimension. The values must be in date format (“yyyy-mm-dd”) representing the date of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\narea: Name of variable that identifies the different locations (i.e., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space, default is “mean”.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time, default is “mean”.\n\n\n\n\nA data frame with the aggregated covariate."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html#description",
    "title": "Aggregate covariates",
    "section": "",
    "text": "Aggregates a data frame containing a covariate of interest in space and/or time.\naggregate_cov(\n  data = NULL,\n  var = NULL,\n  time = NULL,\n  area = NULL,\n  aggregate_space = NULL,\n  aggregate_time = NULL,\n  aggregate_space_fun = \"mean\",\n  aggregate_time_fun = \"mean\"\n)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html#arguments",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html#arguments",
    "title": "Aggregate covariates",
    "section": "",
    "text": "data: Data frame containing equally spaced (daily, weekly, monthly) incident cases for one or multiple areas.\nvar: Name of the variable that identifies the covariate.\ntime: Name of the variable that identifies the temporal dimension. The values must be in date format (“yyyy-mm-dd”) representing the date of observation for daily data, the first day of the week for weekly, or the first day of the month for monthly observations.\narea: Name of variable that identifies the different locations (i.e., areal units) for which a time series is available.\naggregate_space: Name of variable used to define spatial aggregation groups.\naggregate_time: Temporal scale used to perform temporal aggregation. Options are: “week” (ISO 8601), “month”, “year”.\naggregate_space_fun: Character indicating the function to be used in the aggregation over space, default is “mean”.\naggregate_time_fun: Character indicating the function to be used in the aggregation over time, default is “mean”."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html#returns",
    "href": "docs/GHRexplore/GHRexplore-reference/aggregate_cov.Rd.html#returns",
    "title": "Aggregate covariates",
    "section": "",
    "text": "A data frame with the aggregated covariate."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/map_MS.Rd.html",
    "href": "docs/GHRexplore/GHRexplore-reference/map_MS.Rd.html",
    "title": "Municipality boundaries of Mato Grosso do Sul",
    "section": "",
    "text": "Administrative boundaries (polygon geometries) of the 11 municipalities in Mato Grosso do Sul (Brazil) to be used with the dengue_MS data set.\ndata(map_MS)\n\n\n\nA simple feature (sf) object including 11 rows and 2 columns:\n\ncode: Unique ID number to each micro region (11 units).\ngeometry: Geometries of the sf multipolygon."
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/map_MS.Rd.html#description",
    "href": "docs/GHRexplore/GHRexplore-reference/map_MS.Rd.html#description",
    "title": "Municipality boundaries of Mato Grosso do Sul",
    "section": "",
    "text": "Administrative boundaries (polygon geometries) of the 11 municipalities in Mato Grosso do Sul (Brazil) to be used with the dengue_MS data set.\ndata(map_MS)"
  },
  {
    "objectID": "docs/GHRexplore/GHRexplore-reference/map_MS.Rd.html#format",
    "href": "docs/GHRexplore/GHRexplore-reference/map_MS.Rd.html#format",
    "title": "Municipality boundaries of Mato Grosso do Sul",
    "section": "",
    "text": "A simple feature (sf) object including 11 rows and 2 columns:\n\ncode: Unique ID number to each micro region (11 units).\ngeometry: Geometries of the sf multipolygon."
  },
  {
    "objectID": "docs/data4health/data4health.html",
    "href": "docs/data4health/data4health.html",
    "title": "data4health",
    "section": "",
    "text": "Under construction."
  },
  {
    "objectID": "docs/GHRpredict/GHRpredict-vignette1.html",
    "href": "docs/GHRpredict/GHRpredict-vignette1.html",
    "title": "GHRpredict tutorial",
    "section": "",
    "text": "Under construction."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-index.html",
    "href": "docs/GHRmodel/GHRmodel-index.html",
    "title": "GHRmodel reference",
    "section": "",
    "text": "as_GHRformulas: This function converts a character vector of suitable R-INLA formulas into a structured GHRformulas object.\ncov_add: This function appends one or more covariate names to all elements (i.\ncov_interact: This function generates interaction terms between covariates specified in the pattern or name arguments.\ncov_multi: This function generates all possible combinations of covariates by selecting one variable from each user-defined group.\ncov_nl: This function transforms selected covariates identified by pattern or name into non-linear terms using INLA’s f() syntax.\ncov_uni: This function returns a list where each element contains a single covariate, based on covariates specified in the pattern or name arguments.\ncov_varying: This function transforms covariates identified by pattern or name into varying effect terms of the form: f(unit, covariate, model = ‘iid’) , which allows covariates to have varying slopes across spatial or temporal units.\ncrossbasis_inla: This function is a wrapper around dlnm::crossbasis to generate cross-basis matrices that capture nonlinear effects of a predictor across both exposure and lag dimensions.\ncrosspred_inla: This function takes an object of class GHRmodels , extracts the relevant coefficients and variance-covariance matrix, and then calls dlnm::crosspred to compute predictions over a range of covariate values (or at specified points).\ndengue_MS: The dengue_MS example data set contains monthly counts of notified dengue cases by microregion, along with a range of spatial and spatiotemporal covariates (e.\ndengue_SP: The dengue_SP example data set reports the weekly number of notified dengue cases in the municipality of São Paulo together with climatic covariates.\nextract_names: This function allows the user to select variables from a data set by prefix (using the pattern argument) or by exact name matching.\nfit_models: This function fits a set of INLA model formulas, provided in a GHRformulas object, to a specified dataset.\nget_covariates: Extracts covariates from a GHRmodels object and returns them as a list of character vectors.\nlag_cov: This function creates lagged versions of one or more numeric or categorical variables in an equally spaced time-series data set.\nmap_MS: A simple feature ( sf ) multipolygon object representing a map of Mato Grosso do Sul , Brazil, including 11 municipalities.\nonebasis_inla: This function is a wrapper around onebasis to create a one-dimensional basis for spline modeling.\nplot_coef_crosspred: Generate plots from a “crosspred” object.\nplot_coef_lin: This function extracts fixed-effect coefficients from a specified model in models , filters them by name or interaction pattern, and produces a forest plot (point estimates with error bars).\nplot_coef_nl: Generates plots of nonlinear effects from one or more fitted models contained within a GHRmodels object.\nplot_coef_varying: Generates a forest plot for a specified spatially or temporally varying coefficient (i.\nplot_fit: This function creates a time-series plot comparing observed cases with fitted values from one or more models in a GHRmodels object.\nplot_gof: Provides visualization of model performance using selected goodness-of-fit (GoF) metrics for one or more models.\nplot_ppd: This function draws kernel-density curves for posterior-predictive samples and observed data using ggplot2::geom_line() .\nplot_re: Generates plots of random effects from one or more fitted models contained within a GHRmodels object.\nrank_models: This function ranks fitted models in a GHRmodels object by a chosen metric (e.\nsample_ppd: This function refits a specified model from a GHRmodels object and generates samples from its posterior predictive distribution.\nstack_models: This function stack together two or more objects GHRmodels object, returning one GHRmodels object that contains all the input models.\nsubset_models: This function subsets selected models from a GHRmodels object into a new reduced GHRmodels object.\nwrite_inla_formulas: This function streamlines the creation of INLA-compatible model formulas by automatically structuring fixed effects, random effects, and interactions."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "This function takes an object of class GHRmodels, extracts the relevant coefficients and variance-covariance matrix, and then calls dlnm::crosspred to compute predictions over a range of covariate values (or at specified points).\ncrosspred_inla(\n  models,\n  basis,\n  mod_id,\n  at = NULL,\n  from = NULL,\n  to = NULL,\n  by = NULL,\n  lag,\n  bylag = 1,\n  cen = NULL,\n  ci.level = 0.95,\n  cumul = FALSE,\n  ...\n)\n\n\n\n\nmodels: An object of class GHRmodels, containing fitted model output (e.g., $fixed and $vcov lists).\nbasis: A cross-basis or one-basis object, typically created by crossbasis_inla or onebasis_inla.\nmod_id: An integer or character string specifying which model within the input GHRmodels object to use (e.g., if model$fixed and model$vcov both have multiple entries).\nat: A numeric vector of values at which to compute predictions (e.g.,seq(10,25, by=0.2))\nfrom, to: Numeric values specifying the range of the prediction sequence if at is not specified (e.g., from = 10 and to = 25).\nby: Numeric increment for the sequence if at is not specified (e.g., by = 0.2).\nlag: A vector of two elements with min and max lag as declared in the crossbasis_inla function.\nbylag: Numeric increment for lag steps (default is 1).\ncen: A centering value (e.g., a reference exposure level).\nci.level: The credible interval level (default 0.95).\ncumul: Logical; if TRUE, cumulative predictions are computed (default FALSE).\n...: Additional arguments passed on to crosspred , such as bound, ci.arg, etc.\n\n\n\n\nThe function identifies which coefficients in model$fixed[mod_id] and which rows/columns in model$vcov[mod_id] correspond to the one-basis or cross-basis terms (i.e., matching the column names in basis). Then it passes these slices to dlnm::crosspred to generate predictions. The centering value (cen), if specified, indicates the reference exposure (e.g., a mean temperature) at which to center the effect estimates (e.g., the effect a given temperature value on the outcome will be compared to the effect of the centering value on the outcome, in this case the mean temperature).\n\n\n\nAn object of class \"GHRcrosspred\", inheriting from \"crosspred\", with fields for the predicted values, credible intervals, and optionally cumulative predictions, as determined by crosspred .\n\n\n\ndlnm::crosspred for details on how predictions are computed.\n\n\n\n# Load example GHRmodels object from the package\nmodel_dlnm_file &lt;- system.file(\"examples\", \"model_dlnm.rds\", package = \"GHRmodel\")\nmodel_dlnm &lt;- readRDS(model_dlnm_file)\n\n# Load example cross-basis matrix from the package: 2-dimensional cross-basis matrix of the \n# non-linear effect of dengue risk across tmin values and lags: \ncb_tmin_file &lt;- system.file(\"examples\",\"cb_tmin.rds\", package = \"GHRmodel\")\ncb_tmin &lt;- readRDS(cb_tmin_file) # loads cross-basis matrix into the environment\n\n# Generate predictions\npred_result &lt;- crosspred_inla(\n  models    = model_dlnm,\n  basis    = cb_tmin,\n  mod_id = \"mod2\",\n  at       = seq(10, 30, by = 1),  # e.g., temperature sequence\n  lag      = 4,\n  cen      = 20,\n  ci.level = 0.95\n)\n\n# Inspect predictions\npred_result$predvar  # the sequence of 'at' values\npred_result$allfit   # fitted values\npred_result$alllow   # lower CI\npred_result$allhigh  # upper CI"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#description",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "This function takes an object of class GHRmodels, extracts the relevant coefficients and variance-covariance matrix, and then calls dlnm::crosspred to compute predictions over a range of covariate values (or at specified points).\ncrosspred_inla(\n  models,\n  basis,\n  mod_id,\n  at = NULL,\n  from = NULL,\n  to = NULL,\n  by = NULL,\n  lag,\n  bylag = 1,\n  cen = NULL,\n  ci.level = 0.95,\n  cumul = FALSE,\n  ...\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#arguments",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "models: An object of class GHRmodels, containing fitted model output (e.g., $fixed and $vcov lists).\nbasis: A cross-basis or one-basis object, typically created by crossbasis_inla or onebasis_inla.\nmod_id: An integer or character string specifying which model within the input GHRmodels object to use (e.g., if model$fixed and model$vcov both have multiple entries).\nat: A numeric vector of values at which to compute predictions (e.g.,seq(10,25, by=0.2))\nfrom, to: Numeric values specifying the range of the prediction sequence if at is not specified (e.g., from = 10 and to = 25).\nby: Numeric increment for the sequence if at is not specified (e.g., by = 0.2).\nlag: A vector of two elements with min and max lag as declared in the crossbasis_inla function.\nbylag: Numeric increment for lag steps (default is 1).\ncen: A centering value (e.g., a reference exposure level).\nci.level: The credible interval level (default 0.95).\ncumul: Logical; if TRUE, cumulative predictions are computed (default FALSE).\n...: Additional arguments passed on to crosspred , such as bound, ci.arg, etc."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#details",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "The function identifies which coefficients in model$fixed[mod_id] and which rows/columns in model$vcov[mod_id] correspond to the one-basis or cross-basis terms (i.e., matching the column names in basis). Then it passes these slices to dlnm::crosspred to generate predictions. The centering value (cen), if specified, indicates the reference exposure (e.g., a mean temperature) at which to center the effect estimates (e.g., the effect a given temperature value on the outcome will be compared to the effect of the centering value on the outcome, in this case the mean temperature)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#returns",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "An object of class \"GHRcrosspred\", inheriting from \"crosspred\", with fields for the predicted values, credible intervals, and optionally cumulative predictions, as determined by crosspred ."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#see-also",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "dlnm::crosspred for details on how predictions are computed."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/crosspred_inla.Rd.html#examples",
    "title": "Generate DLNM Predictions from GHRmodels Objects",
    "section": "",
    "text": "# Load example GHRmodels object from the package\nmodel_dlnm_file &lt;- system.file(\"examples\", \"model_dlnm.rds\", package = \"GHRmodel\")\nmodel_dlnm &lt;- readRDS(model_dlnm_file)\n\n# Load example cross-basis matrix from the package: 2-dimensional cross-basis matrix of the \n# non-linear effect of dengue risk across tmin values and lags: \ncb_tmin_file &lt;- system.file(\"examples\",\"cb_tmin.rds\", package = \"GHRmodel\")\ncb_tmin &lt;- readRDS(cb_tmin_file) # loads cross-basis matrix into the environment\n\n# Generate predictions\npred_result &lt;- crosspred_inla(\n  models    = model_dlnm,\n  basis    = cb_tmin,\n  mod_id = \"mod2\",\n  at       = seq(10, 30, by = 1),  # e.g., temperature sequence\n  lag      = 4,\n  cen      = 20,\n  ci.level = 0.95\n)\n\n# Inspect predictions\npred_result$predvar  # the sequence of 'at' values\npred_result$allfit   # fitted values\npred_result$alllow   # lower CI\npred_result$allhigh  # upper CI"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html",
    "title": "Plot crosspred Objects: Overall, Slices, or Heatmap",
    "section": "",
    "text": "Generate plots from a \"crosspred\" object. Three plot types are available:\n\ntype = \"overall\": Shows the overall exposure–response relationship, aggregated across all lags.\ntype = \"slices\": Produces line plots with credible interval ribbons, either across lags (for a fixed var) or across values of var (for a fixed lag).\ntype = \"heatmap\": Displays a two-dimensional heatmap of effects across both var and lag. Not applicable for one-basis models.\n\nplot_coef_crosspred(\n  crosspred,\n  type = c(\"heatmap\", \"slices\", \"overall\"),\n  var = NULL,\n  lag = NULL,\n  exp = FALSE,\n  palette = \"-RdBu\",\n  n_lag_smooth = 50,\n  line_color = \"black\",\n  line_size = 0.7,\n  ribbon_color = NULL,\n  ribbon_alpha = 0.2,\n  title = \"\",\n  ylab = NULL,\n  xlab = NULL,\n  ...\n)\n\n\n\n\ncrosspred: An object of class \"crosspred\" or \"GHR_crosspred\", produced by crosspred or crosspred_inla.\ntype: Character string. Options: \"overall\", \"slices\", or \"heatmap\".\nvar: Optional numeric vector of exposure values (used when type = \"slices\" to plot across lags).\nlag: Optional numeric vector of lag values (used when type = \"slices\" to plot across variables).\nexp: Logical. If TRUE, exponentiates the results (e.g., for log or logit links).\npalette: Character string for heatmap palette when type = \"heatmap\". Options: GHR, RColorBrewer or colorspace palette (e.g. “Purp”).\nn_lag_smooth: Integer, number of interpolation points along lag for heatmap smoothing (default = 50).\nline_color: Character string. Line color when type = \"slices\" or type = \"overall\". Default is “black”.\nline_size: Numeric. Line width (default = 0.7).\nribbon_color: Character string. Color for credible interval ribbons. Defaults to line_color.\nribbon_alpha: Numeric. Alpha transparency for ribbons (default = 0.2).\ntitle: Character string. Plot title.\nylab: Character string. Label for y-axis.\nxlab: Character string. Label for x-axis.\n...: Additional arguments passed to ggplot2 functions.\n\n\n\n\nA ggplot object for the specified plot type.\n\n\n\ncrosspred\n\n\n\n# Load example GHRmodels object from the package\nmodel_dlnm_file &lt;- system.file(\"examples\", \"model_dlnm.rds\", package = \"GHRmodel\")\nmodel_dlnm &lt;- readRDS(model_dlnm_file) \n\n# Load example cross-basis matrix from the package: 2-dimensional cross-basis matrix of the \n# non-linear effect of dengue risk across tmin values and lags: \ncb_tmin_file &lt;- system.file(\"examples\",\"cb_tmin.rds\", package = \"GHRmodel\")\ncb_tmin &lt;- readRDS(cb_tmin_file) # loads cross-basis matrix into the environment\n\n# Generate predictions\npred_result &lt;- crosspred_inla(\n  models    = model_dlnm,\n  basis    = cb_tmin,\n  mod_id = \"mod2\",\n  at       = seq(10, 30, by = 1),  # e.g., temperature sequence\n  lag      = 4,\n  cen      = 20,\n  ci.level = 0.95\n)\n\n# Plot DLNM predictions \nplot_coef_crosspred(\ncrosspred = pred_result,    # Crosspred object with model predictions\ntype = \"slices\",            # Plot temperature-specific slices of exposure-response curves\nexp = TRUE,                 # Exponentiate the coefficients (to relative risk scale)\nvar = c(22:24),             # Display results for temperature 22°C to 24°C\nline_color = \"red\",         # Red color for the lines representing effect estimates\nline_size = 0.8,            # Line thickness set to 0.8 for better visibility\nribbon_color = \"red\",       # Red shading for credible interval ribbons\nribbon_alpha = 0.3,         # Set ribbon transparency to 30%\ntitle = \"Effect of minimum temperatures 22°C to 23°C on dengue relative risk by lag\",\nxlab = \"Lag\",               # Label for the x-axis (exposure variable)\nylab = \"Relative Risk (RR)\" # Label for the y-axis (effect estimate scale)\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#description",
    "title": "Plot crosspred Objects: Overall, Slices, or Heatmap",
    "section": "",
    "text": "Generate plots from a \"crosspred\" object. Three plot types are available:\n\ntype = \"overall\": Shows the overall exposure–response relationship, aggregated across all lags.\ntype = \"slices\": Produces line plots with credible interval ribbons, either across lags (for a fixed var) or across values of var (for a fixed lag).\ntype = \"heatmap\": Displays a two-dimensional heatmap of effects across both var and lag. Not applicable for one-basis models.\n\nplot_coef_crosspred(\n  crosspred,\n  type = c(\"heatmap\", \"slices\", \"overall\"),\n  var = NULL,\n  lag = NULL,\n  exp = FALSE,\n  palette = \"-RdBu\",\n  n_lag_smooth = 50,\n  line_color = \"black\",\n  line_size = 0.7,\n  ribbon_color = NULL,\n  ribbon_alpha = 0.2,\n  title = \"\",\n  ylab = NULL,\n  xlab = NULL,\n  ...\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#arguments",
    "title": "Plot crosspred Objects: Overall, Slices, or Heatmap",
    "section": "",
    "text": "crosspred: An object of class \"crosspred\" or \"GHR_crosspred\", produced by crosspred or crosspred_inla.\ntype: Character string. Options: \"overall\", \"slices\", or \"heatmap\".\nvar: Optional numeric vector of exposure values (used when type = \"slices\" to plot across lags).\nlag: Optional numeric vector of lag values (used when type = \"slices\" to plot across variables).\nexp: Logical. If TRUE, exponentiates the results (e.g., for log or logit links).\npalette: Character string for heatmap palette when type = \"heatmap\". Options: GHR, RColorBrewer or colorspace palette (e.g. “Purp”).\nn_lag_smooth: Integer, number of interpolation points along lag for heatmap smoothing (default = 50).\nline_color: Character string. Line color when type = \"slices\" or type = \"overall\". Default is “black”.\nline_size: Numeric. Line width (default = 0.7).\nribbon_color: Character string. Color for credible interval ribbons. Defaults to line_color.\nribbon_alpha: Numeric. Alpha transparency for ribbons (default = 0.2).\ntitle: Character string. Plot title.\nylab: Character string. Label for y-axis.\nxlab: Character string. Label for x-axis.\n...: Additional arguments passed to ggplot2 functions."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#returns",
    "title": "Plot crosspred Objects: Overall, Slices, or Heatmap",
    "section": "",
    "text": "A ggplot object for the specified plot type."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#see-also",
    "title": "Plot crosspred Objects: Overall, Slices, or Heatmap",
    "section": "",
    "text": "crosspred"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_crosspred.Rd.html#examples",
    "title": "Plot crosspred Objects: Overall, Slices, or Heatmap",
    "section": "",
    "text": "# Load example GHRmodels object from the package\nmodel_dlnm_file &lt;- system.file(\"examples\", \"model_dlnm.rds\", package = \"GHRmodel\")\nmodel_dlnm &lt;- readRDS(model_dlnm_file) \n\n# Load example cross-basis matrix from the package: 2-dimensional cross-basis matrix of the \n# non-linear effect of dengue risk across tmin values and lags: \ncb_tmin_file &lt;- system.file(\"examples\",\"cb_tmin.rds\", package = \"GHRmodel\")\ncb_tmin &lt;- readRDS(cb_tmin_file) # loads cross-basis matrix into the environment\n\n# Generate predictions\npred_result &lt;- crosspred_inla(\n  models    = model_dlnm,\n  basis    = cb_tmin,\n  mod_id = \"mod2\",\n  at       = seq(10, 30, by = 1),  # e.g., temperature sequence\n  lag      = 4,\n  cen      = 20,\n  ci.level = 0.95\n)\n\n# Plot DLNM predictions \nplot_coef_crosspred(\ncrosspred = pred_result,    # Crosspred object with model predictions\ntype = \"slices\",            # Plot temperature-specific slices of exposure-response curves\nexp = TRUE,                 # Exponentiate the coefficients (to relative risk scale)\nvar = c(22:24),             # Display results for temperature 22°C to 24°C\nline_color = \"red\",         # Red color for the lines representing effect estimates\nline_size = 0.8,            # Line thickness set to 0.8 for better visibility\nribbon_color = \"red\",       # Red shading for credible interval ribbons\nribbon_alpha = 0.3,         # Set ribbon transparency to 30%\ntitle = \"Effect of minimum temperatures 22°C to 23°C on dengue relative risk by lag\",\nxlab = \"Lag\",               # Label for the x-axis (exposure variable)\nylab = \"Relative Risk (RR)\" # Label for the y-axis (effect estimate scale)\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html",
    "title": "Create Covariate Combinations Across Groups",
    "section": "",
    "text": "This function generates all possible combinations of covariates by selecting one variable from each user-defined group. Groups can be defined either by a regular expression pattern (pattern) or by exact variable names (name). The resulting list can be input into the covariates argument in write_inla_formulas to generate multivariable model formulas where all combinations of covariates are needed.\ncov_multi(covariates, pattern = NULL, name = NULL, add = FALSE)\n\n\n\n\ncovariates: A character vector or a list of single-element character vectors. Typically obtained from extract_names or cov_uni or cov_nl.\npattern: A character vector of regular expression patterns (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.). Each pattern defines a group to draw covariates from.\nname: A character vector of exact variable names to include as an additional group.\nadd: Logical; if TRUE, appends the generated combinations to the original covariates object. Default is FALSE.\n\n\n\n\nA list of character vectors. Each element is a unique combination of covariates, where one variable is drawn from each specified group. The resulting list is suitable as input in the covariates argument in write_inla_formulas.\n\n\n\ndata &lt;- data.frame(tmin = rnorm(10), tmin.l1 = rnorm(10),\n                   pdsi = rnorm(10), urban = rnorm(10))\n\n# Extract covariate names\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\", \"urban\"))\n\n# Combine \"tmin\" and \"pdsi\" into all possible pairings\ncov_multi(covariates = covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Combine \"tmin\" and \"urban\", treating \"urban\" as an exact match\ncov_multi(covariates = covs, pattern = \"tmin\", name = \"urban\")\n\n# Use output as input to write_inla_formulas()\ncombined_covs &lt;- cov_multi(covariates = covs, pattern = c(\"tmin\", \"pdsi\"))\nformulas &lt;- write_inla_formulas(outcome = \"cases\", covariates = combined_covs)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#description",
    "title": "Create Covariate Combinations Across Groups",
    "section": "",
    "text": "This function generates all possible combinations of covariates by selecting one variable from each user-defined group. Groups can be defined either by a regular expression pattern (pattern) or by exact variable names (name). The resulting list can be input into the covariates argument in write_inla_formulas to generate multivariable model formulas where all combinations of covariates are needed.\ncov_multi(covariates, pattern = NULL, name = NULL, add = FALSE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#arguments",
    "title": "Create Covariate Combinations Across Groups",
    "section": "",
    "text": "covariates: A character vector or a list of single-element character vectors. Typically obtained from extract_names or cov_uni or cov_nl.\npattern: A character vector of regular expression patterns (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.). Each pattern defines a group to draw covariates from.\nname: A character vector of exact variable names to include as an additional group.\nadd: Logical; if TRUE, appends the generated combinations to the original covariates object. Default is FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#returns",
    "title": "Create Covariate Combinations Across Groups",
    "section": "",
    "text": "A list of character vectors. Each element is a unique combination of covariates, where one variable is drawn from each specified group. The resulting list is suitable as input in the covariates argument in write_inla_formulas."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_multi.Rd.html#examples",
    "title": "Create Covariate Combinations Across Groups",
    "section": "",
    "text": "data &lt;- data.frame(tmin = rnorm(10), tmin.l1 = rnorm(10),\n                   pdsi = rnorm(10), urban = rnorm(10))\n\n# Extract covariate names\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\", \"urban\"))\n\n# Combine \"tmin\" and \"pdsi\" into all possible pairings\ncov_multi(covariates = covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Combine \"tmin\" and \"urban\", treating \"urban\" as an exact match\ncov_multi(covariates = covs, pattern = \"tmin\", name = \"urban\")\n\n# Use output as input to write_inla_formulas()\ncombined_covs &lt;- cov_multi(covariates = covs, pattern = c(\"tmin\", \"pdsi\"))\nformulas &lt;- write_inla_formulas(outcome = \"cases\", covariates = combined_covs)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html",
    "title": "Create a Two-Dimensional INLA-compatible Cross-basis Matrix",
    "section": "",
    "text": "This function is a wrapper around dlnm::crossbasis\nto generate cross-basis matrices that capture nonlinear effects of a predictor across both exposure and lag dimensions. The input covariate is passed as a numeric matrix of lagged values, and the resulting columns can be renamed via basis_name for easier reference in model formulas.\ncrossbasis_inla(\n  covariate,\n  basis_name,\n  lag,\n  argvar = list(),\n  arglag = list(),\n  ...\n)\n\n\n\n\ncovariate: A numeric matrix of covariate values. Typically this will be a matrix of lagged covariate values (which can be generated using lag_cov).\nbasis_name: A character string specifying the prefix for the spline columns in the resulting basis matrix (replacing the default \"v\").\nlag: A numeric vector with min and max lag of the matrix (as in crossbasis).\nargvar: A list specifying the shape of the exposure-response function (as in crossbasis).\narglag: A list specifying the shape of the lag-response function (as in crossbasis).\n...: Additional arguments passed to dlnm::crossbasis , such as df, degree, knots, etc.\n\n\n\n\nAn object of class \"crossbasis_inla\" (also inheriting class \"crossbasis\"), as returned by dlnm:crossbasis() but with customized column names.\n\n\n\n# Build cross-basis with a custom prefix for columns\n\n# Import example data set \ndata(\"dengue_MS\")\n\nlag_mat &lt;- lag_cov(data = dengue_MS,\n  name = c(\"tmin\"),\n  time = \"date\",\n  lag = c(1:6),\n  group = \"micro_code\",\n  add = FALSE) # add = FALSE return only the lagged matrix\n  \ncb_inla &lt;- crossbasis_inla(\n  covariate  = lag_mat,\n  basis_name = \"tempLag\",\n  lag = c(1,6),\n  argvar = list(fun = \"bs\", df = 3),\n  arglag = list(fun = \"poly\", degree = 2)\n)\n\n# Check class of the cross-basis object\nclass(cb_inla)\n\n# View resulting cross-basis matrix\nhead(colnames(cb_inla))"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#description",
    "title": "Create a Two-Dimensional INLA-compatible Cross-basis Matrix",
    "section": "",
    "text": "This function is a wrapper around dlnm::crossbasis\nto generate cross-basis matrices that capture nonlinear effects of a predictor across both exposure and lag dimensions. The input covariate is passed as a numeric matrix of lagged values, and the resulting columns can be renamed via basis_name for easier reference in model formulas.\ncrossbasis_inla(\n  covariate,\n  basis_name,\n  lag,\n  argvar = list(),\n  arglag = list(),\n  ...\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#arguments",
    "title": "Create a Two-Dimensional INLA-compatible Cross-basis Matrix",
    "section": "",
    "text": "covariate: A numeric matrix of covariate values. Typically this will be a matrix of lagged covariate values (which can be generated using lag_cov).\nbasis_name: A character string specifying the prefix for the spline columns in the resulting basis matrix (replacing the default \"v\").\nlag: A numeric vector with min and max lag of the matrix (as in crossbasis).\nargvar: A list specifying the shape of the exposure-response function (as in crossbasis).\narglag: A list specifying the shape of the lag-response function (as in crossbasis).\n...: Additional arguments passed to dlnm::crossbasis , such as df, degree, knots, etc."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#returns",
    "title": "Create a Two-Dimensional INLA-compatible Cross-basis Matrix",
    "section": "",
    "text": "An object of class \"crossbasis_inla\" (also inheriting class \"crossbasis\"), as returned by dlnm:crossbasis() but with customized column names."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/crossbasis_inla.Rd.html#examples",
    "title": "Create a Two-Dimensional INLA-compatible Cross-basis Matrix",
    "section": "",
    "text": "# Build cross-basis with a custom prefix for columns\n\n# Import example data set \ndata(\"dengue_MS\")\n\nlag_mat &lt;- lag_cov(data = dengue_MS,\n  name = c(\"tmin\"),\n  time = \"date\",\n  lag = c(1:6),\n  group = \"micro_code\",\n  add = FALSE) # add = FALSE return only the lagged matrix\n  \ncb_inla &lt;- crossbasis_inla(\n  covariate  = lag_mat,\n  basis_name = \"tempLag\",\n  lag = c(1,6),\n  argvar = list(fun = \"bs\", df = 3),\n  arglag = list(fun = \"poly\", degree = 2)\n)\n\n# Check class of the cross-basis object\nclass(cb_inla)\n\n# View resulting cross-basis matrix\nhead(colnames(cb_inla))"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html",
    "title": "Plot Posterior Predictive Densities Versus Observed Data",
    "section": "",
    "text": "This function draws kernel-density curves for posterior-predictive samples and observed data using ggplot2::geom_line(). Each predictive sample’s density is plotted in light blue; the observed density is overlaid in black.\nplot_ppd(\n  ppd,\n  xlab = \"Outcome\",\n  ylab = \"Density\",\n  title = \"Posterior Predictive Distribution\",\n  xlim = NULL,\n  obs_color = NULL,\n  ppd_color = NULL\n)\n\n\n\n\nppd: A data.frame containing posterior-predictive samples (one column per sample) and the column with observed data.\nxlab: Character: x-axis label. Default \"Outcome\".\nylab: Character: y-axis label. Default \"Density\".\ntitle: Character: plot title. Default \"Posterior Predictive Distribution\".\nxlim: Numeric vector of length 2 giving the minimum and maximum x-axis values, e.g. c(0, 25). If NULL (default) the limits are c(0, quantile(observed, 0.95)).\nobs_color: Color for the observed line density\nppd_color: Color for the posterior predictive distribution lines density\n\n\n\n\nA ggplot2 plot object.\n\n\n\n## Not run:\n\n# Load example posterior predictive distribution from the package: \nppd_df_file &lt;- system.file(\"examples\", \"ppd_df.rds\", package = \"GHRmodel\")\nppd_df &lt;- readRDS(ppd_df_file) # loads ghr_models into the environment\n\n# Plot densities of the posterior predictive distribution and observed cases. \nplot_ppd(ppd_df, \nobs_color = \"blue\",\nppd_color = \"red\")\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#description",
    "title": "Plot Posterior Predictive Densities Versus Observed Data",
    "section": "",
    "text": "This function draws kernel-density curves for posterior-predictive samples and observed data using ggplot2::geom_line(). Each predictive sample’s density is plotted in light blue; the observed density is overlaid in black.\nplot_ppd(\n  ppd,\n  xlab = \"Outcome\",\n  ylab = \"Density\",\n  title = \"Posterior Predictive Distribution\",\n  xlim = NULL,\n  obs_color = NULL,\n  ppd_color = NULL\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#arguments",
    "title": "Plot Posterior Predictive Densities Versus Observed Data",
    "section": "",
    "text": "ppd: A data.frame containing posterior-predictive samples (one column per sample) and the column with observed data.\nxlab: Character: x-axis label. Default \"Outcome\".\nylab: Character: y-axis label. Default \"Density\".\ntitle: Character: plot title. Default \"Posterior Predictive Distribution\".\nxlim: Numeric vector of length 2 giving the minimum and maximum x-axis values, e.g. c(0, 25). If NULL (default) the limits are c(0, quantile(observed, 0.95)).\nobs_color: Color for the observed line density\nppd_color: Color for the posterior predictive distribution lines density"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#returns",
    "title": "Plot Posterior Predictive Densities Versus Observed Data",
    "section": "",
    "text": "A ggplot2 plot object."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_ppd.Rd.html#examples",
    "title": "Plot Posterior Predictive Densities Versus Observed Data",
    "section": "",
    "text": "## Not run:\n\n# Load example posterior predictive distribution from the package: \nppd_df_file &lt;- system.file(\"examples\", \"ppd_df.rds\", package = \"GHRmodel\")\nppd_df &lt;- readRDS(ppd_df_file) # loads ghr_models into the environment\n\n# Plot densities of the posterior predictive distribution and observed cases. \nplot_ppd(ppd_df, \nobs_color = \"blue\",\nppd_color = \"red\")\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html",
    "title": "Generate lagged variables for one or more lags",
    "section": "",
    "text": "This function creates lagged versions of one or more numeric or categorical variables in an equally spaced time-series data set. A single call can create multiple lags for each selected variable and, optionally, for each spatial/grouping unit.\nlag_cov(data, name, time, lag, group = NULL, add = TRUE)\n\n\n\n\ndata: A data.frame containing equally spaced observations.\nname: A character vector: name of the variable (or variables) to lag.\ntime: A single character string: name of the time-index variable (e.g., \"date\").\nlag: A numeric vector of one or more positive integers. Each value is interpreted as a ‘lag’ (i.e. shift the series backward by k observations).\ngroup: Optional character vector naming column(s) that define independent time-series (e.g. regions). If NULL, the whole data set is treated as one series.\nadd: Logical. If TRUE (default) the lagged columns are appended to data; if FALSE the function returns only the lagged columns as a matrix.\n\n\n\n\nEither a data frame (when add = TRUE) containing the original data plus the new lagged columns, or a numeric matrix of lagged values (when add = FALSE).\n\n\n\n## Daily series for two micro-regions\nd &lt;- data.frame(\n  date       = as.Date(\"2023-01-01\") + 0:9,\n  micro_code = rep(c(\"A\", \"B\"), each = 5),\n  tmin       = rnorm(10, 10, 2),\n  pdsi       = rnorm(10)\n)\n\n## Create lags 1 to 3 for tmin and pdsi\nlagged &lt;- lag_cov(\n  data  = d,\n  name   = c(\"tmin\", \"pdsi\"),\n  time  = \"date\",\n  group = \"micro_code\",\n  lag   = c(1:3)\n)\n\n## Only lagged columns (matrix),\nlag_only &lt;- lag_cov(\n  data = d, name = \"tmin\", time = \"date\",\n  lag  = c(1:3), add = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#description",
    "title": "Generate lagged variables for one or more lags",
    "section": "",
    "text": "This function creates lagged versions of one or more numeric or categorical variables in an equally spaced time-series data set. A single call can create multiple lags for each selected variable and, optionally, for each spatial/grouping unit.\nlag_cov(data, name, time, lag, group = NULL, add = TRUE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#arguments",
    "title": "Generate lagged variables for one or more lags",
    "section": "",
    "text": "data: A data.frame containing equally spaced observations.\nname: A character vector: name of the variable (or variables) to lag.\ntime: A single character string: name of the time-index variable (e.g., \"date\").\nlag: A numeric vector of one or more positive integers. Each value is interpreted as a ‘lag’ (i.e. shift the series backward by k observations).\ngroup: Optional character vector naming column(s) that define independent time-series (e.g. regions). If NULL, the whole data set is treated as one series.\nadd: Logical. If TRUE (default) the lagged columns are appended to data; if FALSE the function returns only the lagged columns as a matrix."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#returns",
    "title": "Generate lagged variables for one or more lags",
    "section": "",
    "text": "Either a data frame (when add = TRUE) containing the original data plus the new lagged columns, or a numeric matrix of lagged values (when add = FALSE)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/lag_cov.Rd.html#examples",
    "title": "Generate lagged variables for one or more lags",
    "section": "",
    "text": "## Daily series for two micro-regions\nd &lt;- data.frame(\n  date       = as.Date(\"2023-01-01\") + 0:9,\n  micro_code = rep(c(\"A\", \"B\"), each = 5),\n  tmin       = rnorm(10, 10, 2),\n  pdsi       = rnorm(10)\n)\n\n## Create lags 1 to 3 for tmin and pdsi\nlagged &lt;- lag_cov(\n  data  = d,\n  name   = c(\"tmin\", \"pdsi\"),\n  time  = \"date\",\n  group = \"micro_code\",\n  lag   = c(1:3)\n)\n\n## Only lagged columns (matrix),\nlag_only &lt;- lag_cov(\n  data = d, name = \"tmin\", time = \"date\",\n  lag  = c(1:3), add = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html",
    "title": "Create Spatially or Temporally Varying Effects for INLA",
    "section": "",
    "text": "This function transforms covariates identified by pattern or name into varying effect terms of the form:f(unit, covariate, model = 'iid'), which allows covariates to have varying slopes across spatial or temporal units. The output can be used directly in the covariates argument of write_inla_formulas.\ncov_varying(\n  covariates,\n  unit,\n  pattern = NULL,\n  name = NULL,\n  model = \"iid\",\n  constr = FALSE,\n  add = FALSE\n)\n\n\n\n\ncovariates: A character vector or a list of character vectors of covariate names. Typically output from cov_multi, cov_uni, or extract_names.\nunit: Character string specifying the unit of variation (e.g., \"spat_id\", \"year\").\npattern: A character vector specifying the prefix pattern(s) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.) for transformation.\nname: Character vector of exact variable names to be transformed.\nmodel: Character string specifying the INLA model for the varying effect. Currently, only \"iid\" is supported.\nconstr: Logical. If TRUE it will impose a sum-to-zero constraint to the random effect. Default is FALSE.\nadd: Logical; if TRUE, appends the transformed covariates to the original ones. Default is FALSE.\n\n\n\n\n\nUse pattern or name (or both) to specify which covariates to transform.\nThe resulting terms use INLA’s f() syntax: f(unit, covariate, model = \"iid\").\nCurrently only supports \"iid\" models for varying effects.\n\n\n\n\nA list of character vectors, each including covariates with varying effects. The output is suitable as input for write_inla_formulas.\n\n\n\ndata &lt;- data.frame(tmin.l1 = rnorm(10), pdsi.l1 = rnorm(10))\n\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\"))\ncovlist &lt;- cov_multi(covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Apply varying effect to tmin\ncov_varying(covlist, pattern = \"tmin\", unit = \"spat_id\")\n\n# Keep original and add varying effect terms\ncov_varying(covlist, pattern = \"tmin\", unit = \"spat_id\", add = TRUE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#description",
    "title": "Create Spatially or Temporally Varying Effects for INLA",
    "section": "",
    "text": "This function transforms covariates identified by pattern or name into varying effect terms of the form:f(unit, covariate, model = 'iid'), which allows covariates to have varying slopes across spatial or temporal units. The output can be used directly in the covariates argument of write_inla_formulas.\ncov_varying(\n  covariates,\n  unit,\n  pattern = NULL,\n  name = NULL,\n  model = \"iid\",\n  constr = FALSE,\n  add = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#arguments",
    "title": "Create Spatially or Temporally Varying Effects for INLA",
    "section": "",
    "text": "covariates: A character vector or a list of character vectors of covariate names. Typically output from cov_multi, cov_uni, or extract_names.\nunit: Character string specifying the unit of variation (e.g., \"spat_id\", \"year\").\npattern: A character vector specifying the prefix pattern(s) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.) for transformation.\nname: Character vector of exact variable names to be transformed.\nmodel: Character string specifying the INLA model for the varying effect. Currently, only \"iid\" is supported.\nconstr: Logical. If TRUE it will impose a sum-to-zero constraint to the random effect. Default is FALSE.\nadd: Logical; if TRUE, appends the transformed covariates to the original ones. Default is FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#details",
    "title": "Create Spatially or Temporally Varying Effects for INLA",
    "section": "",
    "text": "Use pattern or name (or both) to specify which covariates to transform.\nThe resulting terms use INLA’s f() syntax: f(unit, covariate, model = \"iid\").\nCurrently only supports \"iid\" models for varying effects."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#returns",
    "title": "Create Spatially or Temporally Varying Effects for INLA",
    "section": "",
    "text": "A list of character vectors, each including covariates with varying effects. The output is suitable as input for write_inla_formulas."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/cov_varying.Rd.html#examples",
    "title": "Create Spatially or Temporally Varying Effects for INLA",
    "section": "",
    "text": "data &lt;- data.frame(tmin.l1 = rnorm(10), pdsi.l1 = rnorm(10))\n\ncovs &lt;- extract_names(data, pattern = c(\"tmin\", \"pdsi\"))\ncovlist &lt;- cov_multi(covs, pattern = c(\"tmin\", \"pdsi\"))\n\n# Apply varying effect to tmin\ncov_varying(covlist, pattern = \"tmin\", unit = \"spat_id\")\n\n# Keep original and add varying effect terms\ncov_varying(covlist, pattern = \"tmin\", unit = \"spat_id\", add = TRUE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "This function extracts fixed-effect coefficients from a specified model in models, filters them by name or interaction pattern, and produces a forest plot (point estimates with error bars).\n\nIf name = NULL, all fixed-effect terms (excluding the intercept) are shown.\nIf name is a character vector, only the matching terms are included.\n\nplot_coef_lin(\n  models,\n  mod_id = NULL,\n  name = NULL,\n  pattern = NULL,\n  title = NULL,\n  mod_label = NULL,\n  var_label = NULL,\n  palette = \"IDE2\",\n  exp = FALSE,\n  legend = \"Model\"\n)\n\n\n\n\nmodels: An object of class GHRmodels containing fitted model output.\nmod_id: Character vector of model identifiers (must match entries in model$mod_gof$model_id). If NULL (the default), all models are considered.\nname: A character vector specifying exact linear covariates names to be plotted. If both pattern and name are NULL (the default), all terms (except (Intercept)) are plotted.\npattern: A character vector specifying prefix(es) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.) Covariates matching these patterns (case‐insensitive search) will be plotted. If both pattern and name are NULL (the default), all terms (except (Intercept)) are plotted.\ntitle: An optional string specifying an overall plot title.\nmod_label: An optional named character vector mapping model names to custom labels, e.g. c(“mod1” = “Model 1”). Any model not found in the vector names retains its original label.\nvar_label: An optional named character vector mapping variable (or interaction) names to custom labels. Interaction matching is order-insensitive: \"A:B\" matches \"B:A\". Any term not found in the vector names retains its original label.\npalette: GHR, RColorBrewer or colorspace palette (e.g. “Purp”) colour palette to use for the different models. See all available options by running GHR_palettes(), RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE). Single R colors in colors() or hex codes can also be used.\nexp: Logical,if TRUE the coefficients are exponentiated, Default is if FALSE.\nlegend: Legend title for the replicate color scale. Default is \"Model\".\n\n\n\n\n\nIntercept: By default, (Intercept) is excluded unless explicitly included in name.\nIndividual terms: e.g., \"temp\".\nInteraction Terms: e.g. \"temp:precip\". Split by :, sorted, and compared setwise; for example, \"temp:precip\" matches \"precip:temp\".\nLabels: If var_label is supplied, any matched covariate or interaction string is replaced by its custom label on the y-axis.\n\n\n\n\nA ggplot2 forest plot object (class ggplot).\n\n\n\ngeom_errorbar for the plotting environment.\n\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot point estimates with confidence intervals for the linear covariates: \nplot_coef_lin(\nmodel = model_list,\nmod_id = c(\"mod2\",\"mod4\"),\nvar_label = c(\"tmin.l1\"= \"Min. temp lag 1\",\n              \"pdsi.l1\" = \"Drought index lag 1\"),\ntitle = \"Effects of linear covariates\"\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#description",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "This function extracts fixed-effect coefficients from a specified model in models, filters them by name or interaction pattern, and produces a forest plot (point estimates with error bars).\n\nIf name = NULL, all fixed-effect terms (excluding the intercept) are shown.\nIf name is a character vector, only the matching terms are included.\n\nplot_coef_lin(\n  models,\n  mod_id = NULL,\n  name = NULL,\n  pattern = NULL,\n  title = NULL,\n  mod_label = NULL,\n  var_label = NULL,\n  palette = \"IDE2\",\n  exp = FALSE,\n  legend = \"Model\"\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#arguments",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "models: An object of class GHRmodels containing fitted model output.\nmod_id: Character vector of model identifiers (must match entries in model$mod_gof$model_id). If NULL (the default), all models are considered.\nname: A character vector specifying exact linear covariates names to be plotted. If both pattern and name are NULL (the default), all terms (except (Intercept)) are plotted.\npattern: A character vector specifying prefix(es) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.) Covariates matching these patterns (case‐insensitive search) will be plotted. If both pattern and name are NULL (the default), all terms (except (Intercept)) are plotted.\ntitle: An optional string specifying an overall plot title.\nmod_label: An optional named character vector mapping model names to custom labels, e.g. c(“mod1” = “Model 1”). Any model not found in the vector names retains its original label.\nvar_label: An optional named character vector mapping variable (or interaction) names to custom labels. Interaction matching is order-insensitive: \"A:B\" matches \"B:A\". Any term not found in the vector names retains its original label.\npalette: GHR, RColorBrewer or colorspace palette (e.g. “Purp”) colour palette to use for the different models. See all available options by running GHR_palettes(), RColorBrewer::display.brewer.all() and colorspace::hcl_palettes(plot=TRUE). Single R colors in colors() or hex codes can also be used.\nexp: Logical,if TRUE the coefficients are exponentiated, Default is if FALSE.\nlegend: Legend title for the replicate color scale. Default is \"Model\"."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#details",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "Intercept: By default, (Intercept) is excluded unless explicitly included in name.\nIndividual terms: e.g., \"temp\".\nInteraction Terms: e.g. \"temp:precip\". Split by :, sorted, and compared setwise; for example, \"temp:precip\" matches \"precip:temp\".\nLabels: If var_label is supplied, any matched covariate or interaction string is replaced by its custom label on the y-axis."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#returns",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "A ggplot2 forest plot object (class ggplot)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#see-also",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "geom_errorbar for the plotting environment."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_coef_lin.Rd.html#examples",
    "title": "Produce a Forest Plot of Linear Covariates from a GHRmodels Object",
    "section": "",
    "text": "# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot point estimates with confidence intervals for the linear covariates: \nplot_coef_lin(\nmodel = model_list,\nmod_id = c(\"mod2\",\"mod4\"),\nvar_label = c(\"tmin.l1\"= \"Min. temp lag 1\",\n              \"pdsi.l1\" = \"Drought index lag 1\"),\ntitle = \"Effects of linear covariates\"\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "This function streamlines the creation of INLA-compatible model formulas by automatically structuring fixed effects, random effects, and interactions. It accepts a list of covariate sets and produces a corresponding set of model formulas that share a common random effect structure.\nwrite_inla_formulas(\n  outcome,\n  covariates = NULL,\n  baseline = TRUE,\n  re1 = list(id = NULL, model = NULL, replicate = NULL, group = NULL, graph = NULL,\n    cyclic = FALSE, scale.model = FALSE, constr = FALSE, adjust.for.con.comp = FALSE,\n    hyper = NULL),\n  re2 = NULL,\n  re3 = NULL,\n  re4 = NULL,\n  re5 = NULL\n)\n\n\n\n\noutcome: Character string specifying the name of the outcome variable.\ncovariates: A list of character vectors, where each vector contains covariate names to be included in the model. If a single vector is provided, a single model formula is generated.\nbaseline: Logical; If TRUE, a baseline formula without covariates is included. If no random effects are specified, this will be an intercept-only model. If random effects are specified, the baseline formula will include random effects but not covariates. This formula will be the first in the list. Default is TRUE.\nre1: A list defining a random effect structure. Up to five such lists (re1 through re5) can be passed.\nre2: Additional random effect definitions, as described for re1.\nre3: Additional random effect definitions, as described for re1.\nre4: Additional random effect definitions, as described for re1.\nre5: Additional random effect definitions, as described for re1.\n\n\n\n\nThe write_inla_formulas() function simplifies the creation of multiple INLA models by automatically structuring fixed effects, random effects, and interactions. The function ensures that all models have a consistent structure, making them easier to analyze and modify.\nIf baseline = TRUE, a null formula (without covariates) is included as the first element of the list.\nThe number of formulas generated depends on the length of the covariates list.\nRandom effects can be added using re1, ..., re5, where each effect must be a named list (e.g. re1 = list(id = “year_id”, model = “rw1”)). In the list the following fields are strictly necessary:\n\nid (character): the variable name that indexes the random effect (e.g., “year”, “region”).\nmodel (character): the type of random effect. Supported values include: \"iid\", \"rw1\", \"rw2\", \"bym\", and \"bym2\".\nThe following optional fields can be provided in the random effect list:\n\nreplicate (character): defines an additional variable used to replicate the random effect structure across groups (e.g., spatial units for repeated time-series).\ngroup (character): used to model group-specific effects or nested structures.\ngraph (character): required for \"bym\" and \"bym2\" models; refers to the name of an object in the environment that holds the spatial adjacency matrix.\ncyclic (logical): indicates whether the random walk (\"rw1\" or \"rw2\") is cyclic. Default is FALSE. Use for periodic structures (e.g., months).\nscale.model (logical): if TRUE, scales structured random effects (like rw1, rw2, bym) so the generalized variance is 1. For bym2 INLA automatically applies scale.model = TRUE internally.\nconstr (logical): If TRUE, a sum to zero constrain is introduced. This ‘constr’ option is applied only to ‘iid’ random effects. For rw, ar, bym, bym2 INLA automatically applies scale.model = TRUE internally.\nadjust.for.con.comp (logical): if TRUE, accounts for disconnected components in spatial graphs. Recommended for \"bym\" and \"bym2\". Default is FALSE.\nhyper (character): the name of an object in the environment that contains the hyperprior specification for the random effect’s precision or other parameters.\n\n\nFor more information on random effects in R-INLA, see Bayesian inference with INLA: Mixed-effects Models.\n\n\n\nA character vector of INLA model formulas.\n\n\n\nas_GHRformulas for transforming model formulas into structured objects.\n\n\n\n# Define covariates of interest\ncovs &lt;- c(\"tmin.l1\", \"tmin.l2\", \"pdsi.l1\", \"pdsi.l2\", \"urban_level\")\n\n# Combine covariate names using a pattern-matching functionality\ncombined_covariates &lt;- cov_multi(\n  covariates = covs,\n  pattern    = c(\"tmin\", \"pdsi\", \"urban_level\")\n)\n\n# Define hyperprior specifications for random effects\nprior_re1 &lt;- list(prec = list(prior = \"loggamma\", param = c(0.01, 0.01)))\nprior_re2 &lt;- list(prec = list(prior = \"loggamma\", param = c(0.01, 0.01)))\nprior_re3 &lt;- list(\n  prec = list(prior = \"pc.prec\", param = c(0.5 / 0.31, 0.01)),\n  phi  = list(prior = \"pc\",      param = c(0.5, 2 / 3))\n)\n\n# Write a set of INLA-compatible model formulas\ninla_formulas &lt;- write_inla_formulas(\n  outcome    = \"dengue_cases\",\n  covariates = combined_covariates,\n  re1 = list(\n    id        = \"month_id\",\n    model        = \"rw1\",\n    cyclic    = TRUE,\n    hyper     = \"prior_re1\",\n    replicate = \"spat_meso_id\"\n  ),\n  re2 = list(\n    id    = \"year_id\",\n    model    = \"rw1\",\n    hyper = \"prior_re2\"\n  ),\n  re3 = list(\n    id    = \"spat_id\",\n    model    = \"iid\",\n    hyper = \"prior_re3\"\n  ),\n  baseline = TRUE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#description",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "This function streamlines the creation of INLA-compatible model formulas by automatically structuring fixed effects, random effects, and interactions. It accepts a list of covariate sets and produces a corresponding set of model formulas that share a common random effect structure.\nwrite_inla_formulas(\n  outcome,\n  covariates = NULL,\n  baseline = TRUE,\n  re1 = list(id = NULL, model = NULL, replicate = NULL, group = NULL, graph = NULL,\n    cyclic = FALSE, scale.model = FALSE, constr = FALSE, adjust.for.con.comp = FALSE,\n    hyper = NULL),\n  re2 = NULL,\n  re3 = NULL,\n  re4 = NULL,\n  re5 = NULL\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#arguments",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "outcome: Character string specifying the name of the outcome variable.\ncovariates: A list of character vectors, where each vector contains covariate names to be included in the model. If a single vector is provided, a single model formula is generated.\nbaseline: Logical; If TRUE, a baseline formula without covariates is included. If no random effects are specified, this will be an intercept-only model. If random effects are specified, the baseline formula will include random effects but not covariates. This formula will be the first in the list. Default is TRUE.\nre1: A list defining a random effect structure. Up to five such lists (re1 through re5) can be passed.\nre2: Additional random effect definitions, as described for re1.\nre3: Additional random effect definitions, as described for re1.\nre4: Additional random effect definitions, as described for re1.\nre5: Additional random effect definitions, as described for re1."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#details",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "The write_inla_formulas() function simplifies the creation of multiple INLA models by automatically structuring fixed effects, random effects, and interactions. The function ensures that all models have a consistent structure, making them easier to analyze and modify.\nIf baseline = TRUE, a null formula (without covariates) is included as the first element of the list.\nThe number of formulas generated depends on the length of the covariates list.\nRandom effects can be added using re1, ..., re5, where each effect must be a named list (e.g. re1 = list(id = “year_id”, model = “rw1”)). In the list the following fields are strictly necessary:\n\nid (character): the variable name that indexes the random effect (e.g., “year”, “region”).\nmodel (character): the type of random effect. Supported values include: \"iid\", \"rw1\", \"rw2\", \"bym\", and \"bym2\".\nThe following optional fields can be provided in the random effect list:\n\nreplicate (character): defines an additional variable used to replicate the random effect structure across groups (e.g., spatial units for repeated time-series).\ngroup (character): used to model group-specific effects or nested structures.\ngraph (character): required for \"bym\" and \"bym2\" models; refers to the name of an object in the environment that holds the spatial adjacency matrix.\ncyclic (logical): indicates whether the random walk (\"rw1\" or \"rw2\") is cyclic. Default is FALSE. Use for periodic structures (e.g., months).\nscale.model (logical): if TRUE, scales structured random effects (like rw1, rw2, bym) so the generalized variance is 1. For bym2 INLA automatically applies scale.model = TRUE internally.\nconstr (logical): If TRUE, a sum to zero constrain is introduced. This ‘constr’ option is applied only to ‘iid’ random effects. For rw, ar, bym, bym2 INLA automatically applies scale.model = TRUE internally.\nadjust.for.con.comp (logical): if TRUE, accounts for disconnected components in spatial graphs. Recommended for \"bym\" and \"bym2\". Default is FALSE.\nhyper (character): the name of an object in the environment that contains the hyperprior specification for the random effect’s precision or other parameters.\n\n\nFor more information on random effects in R-INLA, see Bayesian inference with INLA: Mixed-effects Models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#returns",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "A character vector of INLA model formulas."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#see-also",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "as_GHRformulas for transforming model formulas into structured objects."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/write_inla_formulas.Rd.html#examples",
    "title": "Generate INLA-compatible Model Formulas",
    "section": "",
    "text": "# Define covariates of interest\ncovs &lt;- c(\"tmin.l1\", \"tmin.l2\", \"pdsi.l1\", \"pdsi.l2\", \"urban_level\")\n\n# Combine covariate names using a pattern-matching functionality\ncombined_covariates &lt;- cov_multi(\n  covariates = covs,\n  pattern    = c(\"tmin\", \"pdsi\", \"urban_level\")\n)\n\n# Define hyperprior specifications for random effects\nprior_re1 &lt;- list(prec = list(prior = \"loggamma\", param = c(0.01, 0.01)))\nprior_re2 &lt;- list(prec = list(prior = \"loggamma\", param = c(0.01, 0.01)))\nprior_re3 &lt;- list(\n  prec = list(prior = \"pc.prec\", param = c(0.5 / 0.31, 0.01)),\n  phi  = list(prior = \"pc\",      param = c(0.5, 2 / 3))\n)\n\n# Write a set of INLA-compatible model formulas\ninla_formulas &lt;- write_inla_formulas(\n  outcome    = \"dengue_cases\",\n  covariates = combined_covariates,\n  re1 = list(\n    id        = \"month_id\",\n    model        = \"rw1\",\n    cyclic    = TRUE,\n    hyper     = \"prior_re1\",\n    replicate = \"spat_meso_id\"\n  ),\n  re2 = list(\n    id    = \"year_id\",\n    model    = \"rw1\",\n    hyper = \"prior_re2\"\n  ),\n  re3 = list(\n    id    = \"spat_id\",\n    model    = \"iid\",\n    hyper = \"prior_re3\"\n  ),\n  baseline = TRUE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "This function stack together two or more objects GHRmodels object, returning one GHRmodels object that contains all the input models.\nIf any model_id is duplicated across the inputs the new_name argument must be provided to ensure unique IDs.\nstack_models(..., new_name = NULL, vs_first = FALSE)\n\n\n\n\n...: Two or more GHRmodels objects, or a single list of them.\nnew_name: NULL (default) or a character used to build the new model IDs.\nvs_first: Logical. If TRUE columns comparing the model vs the first model are kept in the mod_gof, otherwise are discarded. Default is FALSE. Set to TRUE only when models contained in the GHRmodels object to be stacked are compared with the same first models.\n\n\n\n\nCombine (Stack) Multiple GHRmodels Objects\n\n\n\nA single GHRmodels object containing all models from the inputs.\n\n\n\nsubset_models for subsetting GHRmodels objects, fit_models for fitting INLA models.\n\n\n\n## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Load example GHRmodels object with DLNM from the package:\nmodel_dlnm_file &lt;- system.file(\"examples\", \"model_dlnm.rds\", package = \"GHRmodel\")\nmodel_dlnm &lt;- readRDS(model_dlnm_file)\n\n# Merge models from the model_list and model_dlnm objects\nmodel_stack &lt;- stack_models( \n  model_list,\n  model_dlnm, \n  new_name = \"mod\")\n  \n# The combined model_stack combines the models in the model_list and model_dlnm objects\nmodel_stack$mod_gof$model_id  \n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#description",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "This function stack together two or more objects GHRmodels object, returning one GHRmodels object that contains all the input models.\nIf any model_id is duplicated across the inputs the new_name argument must be provided to ensure unique IDs.\nstack_models(..., new_name = NULL, vs_first = FALSE)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#arguments",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "...: Two or more GHRmodels objects, or a single list of them.\nnew_name: NULL (default) or a character used to build the new model IDs.\nvs_first: Logical. If TRUE columns comparing the model vs the first model are kept in the mod_gof, otherwise are discarded. Default is FALSE. Set to TRUE only when models contained in the GHRmodels object to be stacked are compared with the same first models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#details",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "Combine (Stack) Multiple GHRmodels Objects"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#returns",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "A single GHRmodels object containing all models from the inputs."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#see-also",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "subset_models for subsetting GHRmodels objects, fit_models for fitting INLA models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/stack_models.Rd.html#examples",
    "title": "Merge GHRmodels",
    "section": "",
    "text": "## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Load example GHRmodels object with DLNM from the package:\nmodel_dlnm_file &lt;- system.file(\"examples\", \"model_dlnm.rds\", package = \"GHRmodel\")\nmodel_dlnm &lt;- readRDS(model_dlnm_file)\n\n# Merge models from the model_list and model_dlnm objects\nmodel_stack &lt;- stack_models( \n  model_list,\n  model_dlnm, \n  new_name = \"mod\")\n  \n# The combined model_stack combines the models in the model_list and model_dlnm objects\nmodel_stack$mod_gof$model_id  \n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html",
    "title": "Extract Covariate Names",
    "section": "",
    "text": "This function allows the user to select variables from a data set by prefix (using the pattern argument) or by exact name matching. The return object is a character vector with the selected covariate names that can be used as input for cov_add, cov_uni, cov_multi, cov_interact, cov_nl, and cov_varying functions.\nextract_names(data = NULL, pattern = NULL, name = NULL)\n\n\n\n\ndata: A data.frame containing the variables.\npattern: A character vector specifying prefix(es) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: A character vector of exact variable name(s) to extract.\n\n\n\n\nA character vector of matched covariate names.\n\n\n\ndata &lt;- data.frame(tmin = 1:10, tmin.l1 = 1:10, urban = 1:10)\nextract_names(data, pattern = \"tmin\")\nextract_names(data, name = \"urban\")\nextract_names(data, pattern = \"tmin\", name = \"urban\")"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#description",
    "title": "Extract Covariate Names",
    "section": "",
    "text": "This function allows the user to select variables from a data set by prefix (using the pattern argument) or by exact name matching. The return object is a character vector with the selected covariate names that can be used as input for cov_add, cov_uni, cov_multi, cov_interact, cov_nl, and cov_varying functions.\nextract_names(data = NULL, pattern = NULL, name = NULL)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#arguments",
    "title": "Extract Covariate Names",
    "section": "",
    "text": "data: A data.frame containing the variables.\npattern: A character vector specifying prefix(es) to match (e.g., “tmin” matches “tmin”, “tmin.l1”, etc.).\nname: A character vector of exact variable name(s) to extract."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#returns",
    "title": "Extract Covariate Names",
    "section": "",
    "text": "A character vector of matched covariate names."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/extract_names.Rd.html#examples",
    "title": "Extract Covariate Names",
    "section": "",
    "text": "data &lt;- data.frame(tmin = 1:10, tmin.l1 = 1:10, urban = 1:10)\nextract_names(data, pattern = \"tmin\")\nextract_names(data, name = \"urban\")\nextract_names(data, pattern = \"tmin\", name = \"urban\")"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html",
    "title": "Sample from the Posterior Predictive Distribution",
    "section": "",
    "text": "This function refits a specified model from a GHRmodels object and generates samples from its posterior predictive distribution.\nsample_ppd(models, mod_id, s = 1000, nthreads = 8)\n\n\n\n\nmodels: A GHRmodels object.\nmod_id: Character; model identifier (from models$mod_gof$model_id).\ns: An integer specifying the number of samples to draw from the posterior predictive distribution.\nnthreads: An integer specifying the number of threads for parallel computation to refit the model. Default is 8.\n\n\n\n\nA data.frame containing columns for each of the posterior predictive samples and one column with observed data.\n\n\n\n## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Generate 1000 samples from the posterior predictive distribution of model 3.\nppd_df &lt;- sample_ppd( \n  model_list,\n  mod_id = \"mod3\", \n  s = 1000,\n  nthreads = 2)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#description",
    "title": "Sample from the Posterior Predictive Distribution",
    "section": "",
    "text": "This function refits a specified model from a GHRmodels object and generates samples from its posterior predictive distribution.\nsample_ppd(models, mod_id, s = 1000, nthreads = 8)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#arguments",
    "title": "Sample from the Posterior Predictive Distribution",
    "section": "",
    "text": "models: A GHRmodels object.\nmod_id: Character; model identifier (from models$mod_gof$model_id).\ns: An integer specifying the number of samples to draw from the posterior predictive distribution.\nnthreads: An integer specifying the number of threads for parallel computation to refit the model. Default is 8."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#returns",
    "title": "Sample from the Posterior Predictive Distribution",
    "section": "",
    "text": "A data.frame containing columns for each of the posterior predictive samples and one column with observed data."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/sample_ppd.Rd.html#examples",
    "title": "Sample from the Posterior Predictive Distribution",
    "section": "",
    "text": "## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Generate 1000 samples from the posterior predictive distribution of model 3.\nppd_df &lt;- sample_ppd( \n  model_list,\n  mod_id = \"mod3\", \n  s = 1000,\n  nthreads = 2)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html",
    "title": "Rank Models by Goodness-of-Fit",
    "section": "",
    "text": "This function ranks fitted models in a GHRmodels object by a chosen metric (e.g., dic, waic, crps, etc.).\nrank_models(models, metric = \"dic\", n = 10)\n\n\n\n\nmodels: A GHRmodels object containing fitted model output.\nmetric: A character string indicating which goodness-of-fit metric to use for ranking. One of: \"dic\", \"waic\",\"lms\",\"mae\", \"rmse\",\"crps\", \"rsq\",\"dic_vs_first\", \"waic_vs_first\", \"mae_vs_first\", \"rmse_vs_first\", \"crps_vs_first\", \"re_n_var\", and \"re_n_var_change\" (where n is the number of random effect, for ex. re_1_var, re_1_var_change).\nn: An integer specifying how many top-ranked models to return (default 10).\n\n\n\n\nA character vector of the top model IDs (in ascending order of the specified metric).\n\n\n\nfit_models for fitting multiple INLA models.\n\n\n\n## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Get a list of the 5 best models by DIC\ntop_model_dic &lt;- rank_models(\n  models = model_list,\n  metric = \"dic\",\n  n = 5\n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#description",
    "title": "Rank Models by Goodness-of-Fit",
    "section": "",
    "text": "This function ranks fitted models in a GHRmodels object by a chosen metric (e.g., dic, waic, crps, etc.).\nrank_models(models, metric = \"dic\", n = 10)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#arguments",
    "title": "Rank Models by Goodness-of-Fit",
    "section": "",
    "text": "models: A GHRmodels object containing fitted model output.\nmetric: A character string indicating which goodness-of-fit metric to use for ranking. One of: \"dic\", \"waic\",\"lms\",\"mae\", \"rmse\",\"crps\", \"rsq\",\"dic_vs_first\", \"waic_vs_first\", \"mae_vs_first\", \"rmse_vs_first\", \"crps_vs_first\", \"re_n_var\", and \"re_n_var_change\" (where n is the number of random effect, for ex. re_1_var, re_1_var_change).\nn: An integer specifying how many top-ranked models to return (default 10)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#returns",
    "title": "Rank Models by Goodness-of-Fit",
    "section": "",
    "text": "A character vector of the top model IDs (in ascending order of the specified metric)."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#see-also",
    "title": "Rank Models by Goodness-of-Fit",
    "section": "",
    "text": "fit_models for fitting multiple INLA models."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/rank_models.Rd.html#examples",
    "title": "Rank Models by Goodness-of-Fit",
    "section": "",
    "text": "## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Get a list of the 5 best models by DIC\ntop_model_dic &lt;- rank_models(\n  models = model_list,\n  metric = \"dic\",\n  n = 5\n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html",
    "title": "Plot Random Effects",
    "section": "",
    "text": "Generates plots of random effects from one or more fitted models contained within a GHRmodels object. The function supports two main display modes:\n\nCaterpillar plot of effect sizes with uncertainty intervals (the default).\nChoropleth map (when a spatial map (sf object) is provided in the map argument).\n\nIt also supports visualization of replicated or grouped effects via the rep_id argument.\nplot_re(\n  models,\n  mod_id,\n  re_id,\n  rep_id = NULL,\n  map = NULL,\n  map_area = NULL,\n  mod_label = NULL,\n  re_label = NULL,\n  rep_label = NULL,\n  ref_color = NULL,\n  palette = NULL,\n  var_arrange = \"ID\",\n  title = \"\",\n  xlab = \"Re ID\",\n  ylab = \"Effect Size\",\n  legend = \"Effect Size\",\n  centering = 0,\n  exp = FALSE\n)\n\n\n\n\nmodels: A GHRmodels object containing fitted models and random effects.\nmod_id: Character vector of model IDs to plot (must match entries in models$mod_gof$model_id).\nre_id: Character; name of the variable defining the random effect (from models$re).\nrep_id: Optional character string; name of a grouping variable if random effects are replicated. Default is NULL.\nmap: Optional sf object providing spatial geometry. If NULL, returns a caterpillar plot.\nmap_area: Character; column name in map indicating spatial units (must match re_id order).\nmod_label: Optional labels for models. Can be a named vector (e.g., c(\"mod1\" = \"Baseline\", \"mod2\" = \"Adjusted\")) or an unnamed vector with the same order as mod_id.\nre_label: Optional; variable in the data to label the random effect units (e.g., year names instead of numeric IDs).\nrep_label: Optional; label for replicated grouping variable (e.g., for years or time periods).\nref_color: Color used for the reference model. If specified, this will apply to the first model in mod_id.\npalette: Character; name of the color palette to use. Defaults to \"IDE1\" for maps and \"IDE2\" otherwise.\nvar_arrange: Character; how to arrange REs on the x-axis. Options: \"median\" or \"ID\". Default is \"ID\".\ntitle: Title for the plot.\nxlab: Label for the x-axis. Default is \"Re ID\".\nylab: Label for the y-axis. Default is \"Effect Size\".\nlegend: Label for the legend in map plots. Default is \"Effect Size\".\ncentering: Value at which to center the color scale for map plots. Default is 0.\nexp: Logical; if TRUE, exponentiates the effects (useful for log-scale models). Default is FALSE.\n\n\n\n\nPlot Random Effects from GHRmodels\n\nIf map is used, map_area must match a column in map and correspond in order to the RE unit.\nFor BYM/BYM2 models, only the total random effect is plotted (structured/unstructured parts are merged).\nWhen no map is used, the plot compares models via colored points and intervals for each RE unit.\nReplicated REs (e.g., for years) can be plotted across facets using rep_label.\nModel comparison is visually aided using distinct colors; the first model in mod_id is the reference.\n\n\n\n\nA ggplot2 plot object:\n\nIf map is NULL, returns a caterpillar plot showing median REs with 95% uncertainty intervals.\nIf map is provided, returns a faceted choropleth map showing RE medians by area and (optionally) replicate.\n\n\n\n\nfit_models for model fitting; as_GHRformulas for formula setup.\n\n\n\n## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n#  Plot the estimated yearly random effects for three different models.\nplot_re(\nmodel = model_list,                          # A GHRmodels object \nmod_id = c(\"mod1\", \"mod3\", \"mod5\"),          # IDs of the models \n\nmod_label = c(\"Baseline\",                    # Custom labels for the models\n              \"tmin.l1_nl\",           \n              \"pdsi.l1_nl + tmin.l1_nl\"),     \n\nre_id = \"year_id\",                           # Name of the random effect variable \nre_label = \"year\",                           # Label to map year_id to calendar years\n\nref_color = \"grey\",                          # Color for the reference model’s effects\npalette = \"IDE2\",                            # Color for other model effects\n\ntitle = \"Yearly Random Effect\",              # Title for the plot\nxlab = \"Year\"                                # Label for the x-axis \n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#description",
    "title": "Plot Random Effects",
    "section": "",
    "text": "Generates plots of random effects from one or more fitted models contained within a GHRmodels object. The function supports two main display modes:\n\nCaterpillar plot of effect sizes with uncertainty intervals (the default).\nChoropleth map (when a spatial map (sf object) is provided in the map argument).\n\nIt also supports visualization of replicated or grouped effects via the rep_id argument.\nplot_re(\n  models,\n  mod_id,\n  re_id,\n  rep_id = NULL,\n  map = NULL,\n  map_area = NULL,\n  mod_label = NULL,\n  re_label = NULL,\n  rep_label = NULL,\n  ref_color = NULL,\n  palette = NULL,\n  var_arrange = \"ID\",\n  title = \"\",\n  xlab = \"Re ID\",\n  ylab = \"Effect Size\",\n  legend = \"Effect Size\",\n  centering = 0,\n  exp = FALSE\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#arguments",
    "title": "Plot Random Effects",
    "section": "",
    "text": "models: A GHRmodels object containing fitted models and random effects.\nmod_id: Character vector of model IDs to plot (must match entries in models$mod_gof$model_id).\nre_id: Character; name of the variable defining the random effect (from models$re).\nrep_id: Optional character string; name of a grouping variable if random effects are replicated. Default is NULL.\nmap: Optional sf object providing spatial geometry. If NULL, returns a caterpillar plot.\nmap_area: Character; column name in map indicating spatial units (must match re_id order).\nmod_label: Optional labels for models. Can be a named vector (e.g., c(\"mod1\" = \"Baseline\", \"mod2\" = \"Adjusted\")) or an unnamed vector with the same order as mod_id.\nre_label: Optional; variable in the data to label the random effect units (e.g., year names instead of numeric IDs).\nrep_label: Optional; label for replicated grouping variable (e.g., for years or time periods).\nref_color: Color used for the reference model. If specified, this will apply to the first model in mod_id.\npalette: Character; name of the color palette to use. Defaults to \"IDE1\" for maps and \"IDE2\" otherwise.\nvar_arrange: Character; how to arrange REs on the x-axis. Options: \"median\" or \"ID\". Default is \"ID\".\ntitle: Title for the plot.\nxlab: Label for the x-axis. Default is \"Re ID\".\nylab: Label for the y-axis. Default is \"Effect Size\".\nlegend: Label for the legend in map plots. Default is \"Effect Size\".\ncentering: Value at which to center the color scale for map plots. Default is 0.\nexp: Logical; if TRUE, exponentiates the effects (useful for log-scale models). Default is FALSE."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#details",
    "title": "Plot Random Effects",
    "section": "",
    "text": "Plot Random Effects from GHRmodels\n\nIf map is used, map_area must match a column in map and correspond in order to the RE unit.\nFor BYM/BYM2 models, only the total random effect is plotted (structured/unstructured parts are merged).\nWhen no map is used, the plot compares models via colored points and intervals for each RE unit.\nReplicated REs (e.g., for years) can be plotted across facets using rep_label.\nModel comparison is visually aided using distinct colors; the first model in mod_id is the reference."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#returns",
    "title": "Plot Random Effects",
    "section": "",
    "text": "A ggplot2 plot object:\n\nIf map is NULL, returns a caterpillar plot showing median REs with 95% uncertainty intervals.\nIf map is provided, returns a faceted choropleth map showing RE medians by area and (optionally) replicate."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#see-also",
    "title": "Plot Random Effects",
    "section": "",
    "text": "fit_models for model fitting; as_GHRformulas for formula setup."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_re.Rd.html#examples",
    "title": "Plot Random Effects",
    "section": "",
    "text": "## Not run:\n\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n#  Plot the estimated yearly random effects for three different models.\nplot_re(\nmodel = model_list,                          # A GHRmodels object \nmod_id = c(\"mod1\", \"mod3\", \"mod5\"),          # IDs of the models \n\nmod_label = c(\"Baseline\",                    # Custom labels for the models\n              \"tmin.l1_nl\",           \n              \"pdsi.l1_nl + tmin.l1_nl\"),     \n\nre_id = \"year_id\",                           # Name of the random effect variable \nre_label = \"year\",                           # Label to map year_id to calendar years\n\nref_color = \"grey\",                          # Color for the reference model’s effects\npalette = \"IDE2\",                            # Color for other model effects\n\ntitle = \"Yearly Random Effect\",              # Title for the plot\nxlab = \"Year\"                                # Label for the x-axis \n)\n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "This function creates a time-series plot comparing observed cases with fitted values from one or more models in a GHRmodels object. The plot supports faceting by model and/or group.\nplot_fit(\n  models = NULL,\n  mod_id = NULL,\n  time = NULL,\n  group = NULL,\n  group_id = NULL,\n  mod_label = NULL,\n  mod_facet = FALSE,\n  palette = \"IDE2\",\n  ref_color = NULL,\n  obs_color = NULL,\n  obs_label = NULL,\n  title = \"\",\n  ci = FALSE,\n  transform = \"identity\",\n  xlab = \"Time\",\n  ylab = \"Cases\",\n  xlim = NULL,\n  legend = \"Model\"\n)\n\n\n\n\nmodels: A GHRmodels object containing fitted model output.\nmod_id: Character vector of model identifiers (from models$mod_gof$model_id) to plot.\ntime: Character; name of the time-variable column in models$data.\ngroup: Optional; character name of the column defining independent time series (e.g., spatial areas).\ngroup_id: Optional vector of specific group values to subset if group is provided.\nmod_label: Optional custom labels for each model. Can be a named vector (e.g., c(\"mod1\" = \"Base\")) or an unnamed vector with the same length and order as mod_id.\nmod_facet: Logical; if TRUE, faceting is applied by model. Can be combined with group.\npalette: Character; name of the color palette for fitted lines. Default is \"IDE2\".\nref_color: Optional color to override the first model’s line (reference model).\nobs_color: Color for observed data line. Default is \"black\".\nobs_label: Legend label for observed data. Default is \"Observed\".\ntitle: Character; title of the plot.\nci: Logical; if TRUE, adds 95% credible interval ribbons for model fits.\ntransform: Character string for y-axis transformation. Defaults to \"identity\" (no transform). Other options include \"log10p1\", \"log1p\", \"sqrt\", etc.\nxlab: Label for the x-axis. Default is \"Time\".\nylab: Label for the y-axis. Default is \"Cases\".\nxlim: Character vector of length two in “yyyy-mm-dd” format (e.g., c(\"2010-01-01\", \"2020-12-31\")). Use NA to leave one side open (e.g., c(\"2015-01-01\", NA)).\nlegend: Legend title for model lines. Default is \"Model\".\n\n\n\n\n\nFaceting is flexible: if mod_facet = TRUE and group is provided, both are used.\nIf ci = TRUE, ribbons are plotted for fitted model uncertainty.\nmod_label, ref_color, and obs_color allow full customization of the legend.\nThe function automatically sums values across replicates for grouped time series.\n\n\n\n\nA ggplot2 object:\n\nTime-series line plot of observed vs fitted cases\nOptionally includes credible intervals and facets by model or group\nX-axis can be limited by xlim; Y-axis can be transformed for readability\n\n\n\n\nfit_models to generate GHRmodels.\n\n\n\n## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot observed vs. fitted cases over time for three selected models\nplot_fit(\n  models = model_list,                         # A GHRmodels object containing the fitted models\n  mod_id = c(\"mod1\", \"mod3\", \"mod5\"),          # Vector of model IDs to plot\n  mod_label = c(\"Baseline\",                    # Custom display names \n                \"tmin.l1.nl\",                  \n                \"pdsi.l1.nl_tmin.l1.nl\"),            \n  ref_color = \"grey\",                          # Color for the reference model \n  time = \"date\",                               # Name of the time variable \n  palette = \"Set2\",                            # Color palette for fitted lines\n  xlim = c(\"2010-01-01\", \"2020-01-01\"),        # Limit x-axis to this date range\n  title = \"Fitted vs Observed\"                 # Main plot title\n)  \n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#description",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#description",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "This function creates a time-series plot comparing observed cases with fitted values from one or more models in a GHRmodels object. The plot supports faceting by model and/or group.\nplot_fit(\n  models = NULL,\n  mod_id = NULL,\n  time = NULL,\n  group = NULL,\n  group_id = NULL,\n  mod_label = NULL,\n  mod_facet = FALSE,\n  palette = \"IDE2\",\n  ref_color = NULL,\n  obs_color = NULL,\n  obs_label = NULL,\n  title = \"\",\n  ci = FALSE,\n  transform = \"identity\",\n  xlab = \"Time\",\n  ylab = \"Cases\",\n  xlim = NULL,\n  legend = \"Model\"\n)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#arguments",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#arguments",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "models: A GHRmodels object containing fitted model output.\nmod_id: Character vector of model identifiers (from models$mod_gof$model_id) to plot.\ntime: Character; name of the time-variable column in models$data.\ngroup: Optional; character name of the column defining independent time series (e.g., spatial areas).\ngroup_id: Optional vector of specific group values to subset if group is provided.\nmod_label: Optional custom labels for each model. Can be a named vector (e.g., c(\"mod1\" = \"Base\")) or an unnamed vector with the same length and order as mod_id.\nmod_facet: Logical; if TRUE, faceting is applied by model. Can be combined with group.\npalette: Character; name of the color palette for fitted lines. Default is \"IDE2\".\nref_color: Optional color to override the first model’s line (reference model).\nobs_color: Color for observed data line. Default is \"black\".\nobs_label: Legend label for observed data. Default is \"Observed\".\ntitle: Character; title of the plot.\nci: Logical; if TRUE, adds 95% credible interval ribbons for model fits.\ntransform: Character string for y-axis transformation. Defaults to \"identity\" (no transform). Other options include \"log10p1\", \"log1p\", \"sqrt\", etc.\nxlab: Label for the x-axis. Default is \"Time\".\nylab: Label for the y-axis. Default is \"Cases\".\nxlim: Character vector of length two in “yyyy-mm-dd” format (e.g., c(\"2010-01-01\", \"2020-12-31\")). Use NA to leave one side open (e.g., c(\"2015-01-01\", NA)).\nlegend: Legend title for model lines. Default is \"Model\"."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#details",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#details",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "Faceting is flexible: if mod_facet = TRUE and group is provided, both are used.\nIf ci = TRUE, ribbons are plotted for fitted model uncertainty.\nmod_label, ref_color, and obs_color allow full customization of the legend.\nThe function automatically sums values across replicates for grouped time series."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#returns",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#returns",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "A ggplot2 object:\n\nTime-series line plot of observed vs fitted cases\nOptionally includes credible intervals and facets by model or group\nX-axis can be limited by xlim; Y-axis can be transformed for readability"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#see-also",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#see-also",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "fit_models to generate GHRmodels."
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#examples",
    "href": "docs/GHRmodel/GHRmodel-reference/plot_fit.Rd.html#examples",
    "title": "Plot Observed vs. Fitted Cases",
    "section": "",
    "text": "## Not run:\n\n# Load example GHRmodels object from the package: \nmodel_list_file &lt;- system.file(\"examples\", \"model_list.rds\", package = \"GHRmodel\")\nmodel_list &lt;- readRDS(model_list_file)\n\n# Plot observed vs. fitted cases over time for three selected models\nplot_fit(\n  models = model_list,                         # A GHRmodels object containing the fitted models\n  mod_id = c(\"mod1\", \"mod3\", \"mod5\"),          # Vector of model IDs to plot\n  mod_label = c(\"Baseline\",                    # Custom display names \n                \"tmin.l1.nl\",                  \n                \"pdsi.l1.nl_tmin.l1.nl\"),            \n  ref_color = \"grey\",                          # Color for the reference model \n  time = \"date\",                               # Name of the time variable \n  palette = \"Set2\",                            # Color palette for fitted lines\n  xlim = c(\"2010-01-01\", \"2020-01-01\"),        # Limit x-axis to this date range\n  title = \"Fitted vs Observed\"                 # Main plot title\n)  \n## End(Not run)"
  },
  {
    "objectID": "docs/GHRmodel/GHRmodel-news.html#section",
    "href": "docs/GHRmodel/GHRmodel-news.html#section",
    "title": "GHRmodel changelog",
    "section": "0.1.0",
    "text": "0.1.0\n\nInitial CRAN submission."
  }
]